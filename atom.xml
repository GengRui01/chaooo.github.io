<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋过冬漫长</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://chaooo.github.io/atom.xml" rel="self"/>
  
  <link href="http://chaooo.github.io/"/>
  <updated>2021-02-03T13:49:45.301Z</updated>
  <id>http://chaooo.github.io/</id>
  
  <author>
    <name>郑超(Charles·Zheng)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx常用配置详解</title>
    <link href="http://chaooo.github.io/article/20210102.html"/>
    <id>http://chaooo.github.io/article/20210102.html</id>
    <published>2021-01-02T05:56:02.000Z</published>
    <updated>2021-02-03T13:49:45.301Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于Nginx安装目录下的<code>conf</code>目录下。</p><p>Nginx配置文件中每个指令必须有<code>;</code>结束。以<code>#</code>开头的行会被当做注释。</p><p>配置文件通常命名为<code>nginx.conf</code>并且默认放置在<code>/usr/local/nginx/conf</code>，<code>/etc/nginx</code>，或<code>/usr/local/etc/nginx</code>。</p><a id="more"></a><h3><span id="1-nginx配置文件结构">1. Nginx配置文件结构</span></h3><ul><li>Nginx配置文件常用到的几个部分：main（全局设置），server（主机设置），upstream（上游服务器设置，主要为反向代理、负载均衡相关配置），location（URL匹配特定位置后的设置）</li><li>每部分包含若干个指令。<ul><li>main模块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>events模块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>http模块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>upstream模块：使nginx跨越单机的限制，完成网络数据的接收、处理和转发，该指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</li><li>server模块：主要用于指定虚拟主机域名、IP和端口；</li><li>location模块：配置请求的路由，以及各种页面的处理情况（比如，根目录“/”,“/images”,等等）。</li></ul></li><li>他们之间的关系式：<ul><li>server继承main，location继承server；</li><li>upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...                           # main(全局)模块</span><br><span class="line"></span><br><span class="line">events &#123;                      # events模块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">http &#123;                        # http模块</span><br><span class="line">    ...</span><br><span class="line">    upstream &#123;                # upstream模块</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;                  # server模块</span><br><span class="line">        ...</span><br><span class="line">        location [PATTERN] &#123;  # location模块</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2-nginx配置文件详解">2. Nginx配置文件详解</span></h3><h4><span id="21-全局模块">2.1 全局模块</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># ------------------------------ 全局模块 start ------------------------------</span><br><span class="line"># user             www www;               # 配置用户或者组，默认为nobody nobody。</span><br><span class="line"></span><br><span class="line"># worker_processes 1;                     # 允许生成的进程数，默认为1，建议设置为等于CPU总核心数。</span><br><span class="line"></span><br><span class="line"># pid              &#x2F;nginx&#x2F;pid&#x2F;nginx.pid;  # 指定nginx进程pid文件存放地址。</span><br><span class="line"></span><br><span class="line">error_log          &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log info; # 全局错误日志路径，级别，[ debug|info|notice|warn|error|crit|alert|emerg ]。</span><br><span class="line">                                                         # 这个设置可以放入全局块，http块，server块</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 65535;   # 指定进程可以打开的最大描述符。</span><br><span class="line">                              # 工作模式与连接数上限：这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">                              # 现在在linux 2.6内核下开启文件打开数为65535。因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line"># ------------------------------ 全局模块 end ------------------------------</span><br><span class="line">events &#123; ... &#125; # events块</span><br><span class="line">http &#123; ... &#125;   # http块</span><br></pre></td></tr></table></figure><h4><span id="22-events模块">2.2 events模块</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># ------------------------------ events模块 start ------------------------------</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;  # 参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; </span><br><span class="line">                # epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">                # nginx针对不同的操作系统，有不同的事件模型：</span><br><span class="line">                #    1.标准事件模型：Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">                #    2.高效事件模型：Kqueue，Epoll，&#x2F;dev&#x2F;poll，Eventport</span><br><span class="line">                #        Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">                #        Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">                #        &#x2F;dev&#x2F;poll：使用于Solaris 7 11&#x2F;99+，HP&#x2F;UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">                #        Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    </span><br><span class="line">    worker_connections 65535;   # 单个进程最大连接数（最大连接数&#x3D;连接数*进程数）。</span><br><span class="line">                                # 根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line"></span><br><span class="line">    accept_mutex on;            # 网路连接序列化，防止惊群现象发生，默认:on</span><br><span class="line">    multi_accept on;            # 一个进程是否同时接受多个网络连接，默认:off</span><br><span class="line">    keepalive_timeout 60;       # keepalive超时时间。</span><br><span class="line"></span><br><span class="line">    client_header_buffer_size 4k;   # 客户端请求头部的缓冲区大小。</span><br><span class="line">                                    # 分页大小可以用shell命令getconf PAGESIZE取得，如：[root@centos ~]# getconf PAGESIZE # 返回4096。</span><br><span class="line">                                    # 但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line"></span><br><span class="line">    open_file_cache max&#x3D;65535 inactive&#x3D;60s;   # 为打开文件指定缓存，默认是关闭的。max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line"></span><br><span class="line">    open_file_cache_valid 80s;      # 检查open_file_cache中缓存项目的有效信息的时间间隔。</span><br><span class="line">                                    # 默认值:60；使用字段:http, server, location</span><br><span class="line"></span><br><span class="line">    open_file_cache_min_uses 1;     # 指定在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态。</span><br><span class="line">                                    # 如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">                                    # 默认值:1；使用字段:http, server, location</span><br><span class="line"></span><br><span class="line">    open_file_cache_errors on;      #　指定是否在搜索一个文件时记录cache错误[ on | off ]，默认值:off</span><br><span class="line">&#125;</span><br><span class="line"># ------------------------------ events模块 end ------------------------------</span><br><span class="line"></span><br><span class="line">http &#123; ... &#125;   # http块</span><br></pre></td></tr></table></figure><h4><span id="22-http模块">2.2 http模块</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">... # 全局块</span><br><span class="line">events &#123; ... &#125; # events块</span><br><span class="line"># ------------------------------ http模块 start ------------------------------</span><br><span class="line">http &#123;      </span><br><span class="line">    # 设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line"></span><br><span class="line">    include       mime.types;                # 文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application&#x2F;octet-stream;  # 默认文件类型，默认为text&#x2F;plain</span><br><span class="line">    #charset      utf-8;                     # 默认编码</span><br><span class="line"></span><br><span class="line">    server_names_hash_bucket_size 128;  # 服务器名字的hash表大小</span><br><span class="line">                                        # 保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line"></span><br><span class="line">    client_header_buffer_size 32k;  # 客户端请求头部的缓冲区大小。   </span><br><span class="line">                                    # 这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line"></span><br><span class="line">    large_client_header_buffers 4 64k;  # 客户请求头缓冲大小。</span><br><span class="line">                                        # nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line"></span><br><span class="line">    client_max_body_size 8m;  # 设定通过nginx上传文件的大小</span><br><span class="line"></span><br><span class="line">    sendfile on;    # 允许sendfile方式（高效文件传输模式）传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">                    # 指定nginx是否调用sendfile函数（zero copy方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line"></span><br><span class="line">    autoindex on;   # 开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line"></span><br><span class="line">    tcp_nopush on;  # 此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on; # 该参数最核心的功能，就是把小包组成成大包，提高带宽利用率也就是著名的nagle算法</span><br><span class="line"></span><br><span class="line">    keepalive_timeout 120;   # 长连接超时时间，单位是秒</span><br><span class="line"></span><br><span class="line">    # FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    # gzip模块设置</span><br><span class="line">    gzip on;                # 开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;     # 最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;     # 压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;  # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;      # 压缩等级</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml; # 压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    # limit_zone crawler $binary_remote_addr 10m; # 开启限制IP连接数的时候需要使用</span><br><span class="line">    </span><br><span class="line">    upstream &#123; ... &#125; # upstream模块</span><br><span class="line">    server &#123; ... &#125;   # server模块</span><br><span class="line">&#125;</span><br><span class="line"># ------------------------------ http模块 end ------------------------------</span><br></pre></td></tr></table></figure><h4><span id="23-upstream模块">2.3 upstream模块</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">... # 全局块</span><br><span class="line">events &#123; ... &#125; # events块</span><br><span class="line">http &#123;</span><br><span class="line">    ...        # http块</span><br><span class="line"># ------------------------------ upstream模块 start ------------------------------</span><br><span class="line">    upstream www.test.com &#123;    # upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight&#x3D;3;</span><br><span class="line">        server 192.168.80.122:80 weight&#x3D;2;</span><br><span class="line">        server 192.168.80.123:80 weight&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line">    # nginx的upstream目前支持4种方式的分配: ①轮询（默认），②weight，③ip_hash，④第三方</span><br><span class="line">        # 轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        # weight：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">            # 例如： upstream bakend &#123;</span><br><span class="line">            #           server 192.168.0.14 weight&#x3D;10;</span><br><span class="line">            #           server 192.168.0.15 weight&#x3D;10;</span><br><span class="line">            #       &#125;</span><br><span class="line">        # ip_hash：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">            # 例如： upstream bakend &#123;</span><br><span class="line">            #           ip_hash;</span><br><span class="line">            #           server 192.168.0.14:88;</span><br><span class="line">            #           server 192.168.0.15:80;</span><br><span class="line">            #        &#125;</span><br><span class="line">        # fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">            # 例如： upstream backend &#123;</span><br><span class="line">            #           server server1;</span><br><span class="line">            #           server server2;</span><br><span class="line">            #           fair;</span><br><span class="line">            #        &#125;</span><br><span class="line">        # url_hash（第三方）：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">            # 例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">            # upstream backend &#123;</span><br><span class="line">            #     server squid1:3128;</span><br><span class="line">            #     server squid2:3128;</span><br><span class="line">            #     hash $request_uri;</span><br><span class="line">            #     hash_method crc32;</span><br><span class="line">            # &#125;</span><br><span class="line">    # tips:</span><br><span class="line">    # upstream bakend&#123;  # 定义负载均衡设备的Ip及设备状态</span><br><span class="line">    #    ip_hash;</span><br><span class="line">    #    server 127.0.0.1:9090 down;</span><br><span class="line">    #    server 127.0.0.1:8080 weight&#x3D;2;</span><br><span class="line">    #    server 127.0.0.1:6060 max_fails&#x3D;10 fail_timeout&#x3D;60s;</span><br><span class="line">    #    server 127.0.0.1:7070 backup;</span><br><span class="line">    # &#125;</span><br><span class="line">    # 在需要使用负载均衡的server中增加 proxy_pass http:&#x2F;&#x2F;bakend&#x2F;;</span><br><span class="line"></span><br><span class="line">    # 每个设备的状态设置为:</span><br><span class="line">    #     1.down表示单前的server暂时不参与负载</span><br><span class="line">    #     2.weight为weight越大，负载的权重就越大。</span><br><span class="line">    #     3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">    #                  fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">    #     4.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">    # nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">    # client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">    # client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">    # location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line"></span><br><span class="line">    server &#123; ... &#125;   # server模块</span><br><span class="line">&#125;</span><br><span class="line"># ------------------------------ upstream模块 end ------------------------------</span><br></pre></td></tr></table></figure><h4><span id="23-server模块">2.3 server模块</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">... # 全局块</span><br><span class="line">events &#123; ... &#125; # events块</span><br><span class="line">http &#123;</span><br><span class="line">    ...              # http块</span><br><span class="line">    upstream &#123; ... &#125; # upstream模块</span><br><span class="line"></span><br><span class="line">    # ------------------------------ server模块 start ------------------------------</span><br><span class="line"></span><br><span class="line">    server &#123;    # 虚拟主机的配置</span><br><span class="line">        listen 80;      # 监听端口</span><br><span class="line">        server_name www.test.com test.com;  # 监听地址，域名可以有多个，用空格隔开</span><br><span class="line">        index index.html index.htm;       # 指定网站初始页</span><br><span class="line">        root &#x2F;data&#x2F;www&#x2F;test;                   # 指定网站根目录</span><br><span class="line">        charset utf-8;</span><br><span class="line">        rewrite ^(.*)$ https:&#x2F;&#x2F;www.test.com$1 permanent;  # URL重写</span><br><span class="line"></span><br><span class="line">        access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.log; # 定义本虚拟主机的访问日志</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        location ...&#123; ... &#125;  # location模块</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # ------------------------------ server模块 end ------------------------------</span><br><span class="line"></span><br><span class="line">    # include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;  # 导入其他server配置</span><br></pre></td></tr></table></figure><ul><li>URL重写（rewrite）配置及信息详解：<ul><li>语法：<code>rewrite &lt;regex&gt; &lt;replacement&gt; [flag];</code></li><li><code>regex</code>：perl兼容正则表达式语句进行规则匹配</li><li><code>replacement</code>：将正则匹配的内容替换成replacement</li><li><code>flag</code> rewrite支持的flag标记<ul><li><code>last</code>:本条规则匹配完成后，继续向下匹配新的location URI规则</li><li><code>break</code>:本条规则匹配完成即终止，不再匹配后面的任何规则</li><li><code>redirect</code>:返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li><code>permanent</code>:返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul></li><li>使用位置：server, location, if</li></ul></li></ul><h4><span id="24-location模块">2.4 location模块</span></h4><p>语法：<code>location  [ = | ~ | ~* | ^~ | @]  /uri/  &#123; configuration &#125;</code>。<br>匹配模式分为两种：普通字符串（literal string）和正则表达式（regular expression），其中 ~ 和 ~* 用于正则表达式， 其他前缀和无任何前缀都用于普通字符串。</p><ul><li>前缀含义：<ul><li><code>=</code>：=开头表示精确前缀匹配，只有完全匹配才能生效。</li><li><code>~</code>：~开头表示区分大小写的正则匹配。</li><li><code>~*</code>：~*开头表示不区分大小写的正则匹配。</li><li><code>^~</code>：^~开头表示普通字符串匹配上以后不再进行正则匹配。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">... # 全局块</span><br><span class="line">events &#123; ... &#125; # events块</span><br><span class="line">http &#123;</span><br><span class="line">    ...              # http块</span><br><span class="line">    upstream &#123; ... &#125; # upstream模块</span><br><span class="line">    server &#123;    # 虚拟主机的配置</span><br><span class="line">        listen 80;      # 监听端口</span><br><span class="line">        server_name www.test.com test.com;  # 监听地址</span><br><span class="line"></span><br><span class="line">        # ------------------------------ location模块 start ------------------------------</span><br><span class="line">        ### alias: 别名配置</span><br><span class="line">        location &#x2F;test&#x2F; &#123;</span><br><span class="line">            alias  &#x2F;usr&#x2F;local&#x2F;;  # 在匹配到location配置的URL路径后，指向alias配置的路径</span><br><span class="line">        &#125;</span><br><span class="line">        location ~* &#x2F;img&#x2F;(.+\.(gif|jpg|jpeg|png|bmp|swf)) &#123;</span><br><span class="line">            alias  &#x2F;usr&#x2F;local&#x2F;images&#x2F;$1;    # 请求中只要能匹配到正则，比如&#x2F;img&#x2F;test.png或者&#x2F;resource&#x2F;img&#x2F;test.png，都会转换为请求&#x2F;usr&#x2F;local&#x2F;images&#x2F;test.png。</span><br><span class="line">        &#125;</span><br><span class="line">        ### root: 根路径配置</span><br><span class="line">        location &#x2F;test&#x2F; &#123;</span><br><span class="line">            root  &#x2F;usr&#x2F;local&#x2F;;  # 用于访问文件系统，在匹配到location配置的URL路径后，指向root配置的路径，并把请求路径附加到其后</span><br><span class="line">        &#125;</span><br><span class="line">        ### proxy_pass: 反向代理配置</span><br><span class="line">        location &#x2F;test&#x2F; &#123;</span><br><span class="line">            proxy_pass  http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;;  # 用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景</span><br><span class="line">        &#125;</span><br><span class="line">        ### JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$ &#123;</span><br><span class="line">            expires 1h;  # JS和CSS缓存时间设置</span><br><span class="line">        &#125;</span><br><span class="line">        ### 反向代理的其他配置</span><br><span class="line">        location &#x2F; &#123;             # 对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            # 以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            client_max_body_size 10m;     # 允许客户端请求的最大单文件字节数</span><br><span class="line">            client_body_buffer_size 128k; # 缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            proxy_intercept_errors on;    # 表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_connect_timeout 90;     # 后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            proxy_send_timeout 90;        # 后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            proxy_read_timeout 90;        # 连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_buffer_size 4k;         # 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffers 4 32k;          # proxy_buffers缓冲区，网页平均在32k以下的设置，设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_busy_buffers_size 64k;  # 高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_temp_file_write_size 64k; # 设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">                                            # 设定缓存文件夹大小大于这个值将从upstream服务器传</span><br><span class="line">        &#125;</span><br><span class="line">        # ------------------------------ location模块 end ------------------------------</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3><span id="3-nginx日志配置">3. Nginx日志配置</span></h3><p>Nginx日志主要分为两种：<code>access_log(访问日志)</code>和<code>error_log(错误日志)</code>。</p><ol><li><strong>访问日志</strong>可以记录用户的IP地址、浏览器的信息，请求的处理时间等信息。<ul><li><code>access_log指令</code>的作用域：http，server，location，limit_except。</li></ul></li><li><strong>错误日志</strong>记录了访问出错的信息，可以帮助我们定位错误的原因。<ul><li><code>error_log指令</code>的作用域：main， http, mail, stream, server, location</li></ul></li></ol><h4><span id="31-nginx访问日志access_log">3.1 Nginx访问日志<code>access_log</code></span></h4><p>访问日志主要记录客户端的请求。客户端向Nginx服务器发起的每一次请求都记录在这里。<br>客户端IP，浏览器信息，referer，请求处理时间，请求URL等都可以在访问日志中得到。<br>可以通过log_format指令定义具体要记录哪些信息。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭访问日志</span><br><span class="line">access_log off; </span><br><span class="line"># 设置访问日志</span><br><span class="line"># access_log  path  [format [buffer&#x3D;size] [gzip[&#x3D;level]] [flush&#x3D;time] [if&#x3D;condition]];</span><br></pre></td></tr></table></figure><ul><li><code>path</code>：指定日志的存放位置。</li><li><code>format</code>：指定日志的格式。默认使用预定义的combined。</li><li><code>buffer</code>：用来指定日志写入时的缓存大小。默认是64k。</li><li><code>gzip</code>：日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。</li><li><code>flush</code>：设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。</li><li><code>if条件判断</code>：如果指定的条件计算为0或空字符串，那么该请求不会写入日志。</li></ul><h5><span id="311-使用log_format自定义日志格式">3.1.1 使用log_format自定义日志格式</span></h5><p>Nginx预定义了名为combined日志格式，如果没有明确指定日志格式默认使用该格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format combined <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &#x27;</span><span class="string">&#x27;&quot;$request&quot; $status $body_bytes_sent &#x27;</span><span class="string">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果不想使用Nginx预定义的格式，可以通过log_format指令来自定义:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format name [escape=default|json] string ...;</span><br></pre></td></tr></table></figure><ul><li>name 格式名称。在access_log指令中引用。</li><li>escape 设置变量中的字符编码方式是json还是default，默认是default。</li><li>string 要定义的日志格式内容。该参数可以有多个。参数中可以使用Nginx变量。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log  main;</span><br></pre></td></tr></table></figure><ul><li>日志格式设定常用Nginx变量：<ul><li><code>$remote_addr</code> / <code>$http_x_forwarded_for</code>：用以记录客户端的ip地址；</li><li><code>$remote_user</code>：用来记录客户端用户名称；</li><li><code>$time_local</code>： 用来记录访问时间与时区；</li><li><code>$request</code>： 用来记录请求的url与http协议；</li><li><code>$status</code>： 用来记录请求状态；成功是200，</li><li><code>$body_bytes_sent</code>：记录发送给客户端文件主体内容大小；</li><li><code>$http_referer</code>：用来记录从那个页面链接访问过来的；</li><li><code>$http_user_agent</code>：记录客户浏览器的相关信息；</li></ul></li></ul><h4><span id="32-nginx错误日志error_log">3.2 Nginx错误日志<code>error_log</code></span></h4><p>错误日志在Nginx中是通过error_log指令实现的。该指令记录服务器和请求处理过程中的错误信息。</p><p>语法：<code>error_log  file  [level];</code>，默认是：<code>error_log  logs/error.log  error;</code>；<br>级别有：<code>[ debug|info|notice|warn|error|crit|alert|emerg ]</code>。</p><p>基本用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log  info;</span><br></pre></td></tr></table></figure><h4><span id="33-通过open_log_file_cache指令来设置日志文件描述符缓存">3.3 通过<code>open_log_file_cache</code>指令来设置日志文件描述符缓存</span></h4><p>Nginx中通过<code>access_log</code>和<code>error_log</code>指令配置访问日志和错误日志，通过<code>log_format</code>我们可以自定义日志格式。</p><p>如果日志文件路径中使用了变量，我们可以通过<code>open_log_file_cache</code>指令来设置缓存，提升性能。它可以配置在http、server、location作用域中。</p><ul><li>语法: <code>open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];</code><ul><li><code>max</code> 设置缓存中最多容纳的文件描述符数量，如果被占满，采用LRU算法将描述符关闭。</li><li><code>inactive</code> 设置缓存存活时间，默认是10s。</li><li><code>min_uses</code> 在inactive时间段内，日志文件最少使用几次，该日志文件描述符记入缓存，默认是1次。</li><li><code>valid</code>：设置多久对日志文件名进行检查，看是否发生变化，默认是60s。</li><li><code>off</code>：不使用缓存。默认为off。</li></ul></li></ul><p>基本用法: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_log_file_cache max&#x3D;1000 inactive&#x3D;20s valid&#x3D;1m min_uses&#x3D;2;</span><br></pre></td></tr></table></figure><h3><span id="4-nginx配置文件实例">4. Nginx配置文件实例：</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">user  cmuser;</span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  8096;</span><br><span class="line">    multi_accept        on;</span><br><span class="line">    use                 epoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 40000;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;data&#x2F;runtime&#x2F;nginx&#x2F;logs&#x2F;access.log  main;</span><br><span class="line">    error_log   &#x2F;data&#x2F;runtime&#x2F;nginx&#x2F;logs&#x2F;error.log   error;</span><br><span class="line"></span><br><span class="line">    sendfile           on;</span><br><span class="line">    tcp_nopush         on;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  15;</span><br><span class="line"></span><br><span class="line">    # ------------ www.test.com的访问配置 --------------------</span><br><span class="line">    upstream www.test.com &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 10.104.60.165:8100;</span><br><span class="line">        server 10.104.60.166:8100;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name  www.test.com;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        rewrite ^(.*)$ https:&#x2F;&#x2F;www.test.com$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;                           # 配置SSL证书</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.test.com;</span><br><span class="line">        ssl on;                            </span><br><span class="line">        ssl_certificate sslkey&#x2F;_.test.com_bundle.crt;</span><br><span class="line">        ssl_certificate_key sslkey&#x2F;_.test.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        # 上传文件的路径配置</span><br><span class="line">        location &#x2F;uploadFile&#x2F; &#123;</span><br><span class="line">            alias &#x2F;mnt&#x2F;newdatadrive&#x2F;nfs_client&#x2F;upload&#x2F;;</span><br><span class="line">        &#125;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;www.test.com;</span><br><span class="line">            proxy_redirect  off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line">            client_body_buffer_size 256k;</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line">            proxy_buffer_size 8k;</span><br><span class="line">            proxy_buffers 4 64k;</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # ------------------ 静态文件夹 -----------------</span><br><span class="line">    server &#123;</span><br><span class="line">            listen  80;</span><br><span class="line">            server_name  static.test.com;</span><br><span class="line">            charset utf-8;</span><br><span class="line">            location &#x2F; &#123;</span><br><span class="line">                root &#x2F;mnt&#x2F;newdatadrive&#x2F;static_files;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">            listen 443;</span><br><span class="line">            server_name static.test.com;</span><br><span class="line">            ssl on;</span><br><span class="line">            ssl_certificate sslkey&#x2F;_.test.com_bundle.crt;</span><br><span class="line">            ssl_certificate_key sslkey&#x2F;_.test.com.key;</span><br><span class="line">            ssl_session_timeout 5m;</span><br><span class="line">            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">            ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">            ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">            location &#x2F; &#123;</span><br><span class="line">                root &#x2F;mnt&#x2F;newdatadrive&#x2F;static_files;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # ------------------ 引入外部其他配置 -----------------</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="附-nginx启动命令">附. Nginx启动命令</span></h3><p>运行可执行文件就可以启动<code>nginx</code>，可以使用<code>-c</code>参数指定配置文件，比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>如果nginx已经启动，可以使用-s参数的可执行命令来控制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx -s [reload | stop | quit | reopen]</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop — 直接关闭 nginx</span></span><br><span class="line"><span class="comment"># quit — 会在处理完当前正在的请求后退出，也叫优雅关闭</span></span><br><span class="line"><span class="comment"># reload — 重新加载配置文件，相当于重启</span></span><br><span class="line"><span class="comment"># reopen — 重新打开日志文件</span></span><br></pre></td></tr></table></figure><p>比如，重载配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于Nginx安装目录下的&lt;code&gt;conf&lt;/code&gt;目录下。&lt;/p&gt;
&lt;p&gt;Nginx配置文件中每个指令必须有&lt;code&gt;;&lt;/code&gt;结束。以&lt;code&gt;#&lt;/code&gt;开头的行会被当做注释。&lt;/p&gt;
&lt;p&gt;配置文件通常命名为&lt;code&gt;nginx.conf&lt;/code&gt;并且默认放置在&lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;，&lt;code&gt;/etc/nginx&lt;/code&gt;，或&lt;code&gt;/usr/local/etc/nginx&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Nginx配置" scheme="http://chaooo.github.io/categories/nginx/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Nginx" scheme="http://chaooo.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用Nexus搭建Maven私服（CentOS 8）</title>
    <link href="http://chaooo.github.io/article/20201225.html"/>
    <id>http://chaooo.github.io/article/20201225.html</id>
    <published>2020-12-25T11:30:24.000Z</published>
    <updated>2021-02-03T13:47:50.968Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Maven私服</strong> 就是在内网架设一个<code>Maven仓库服务器</code>，在代理远程仓库的同时维护本地仓库。<br>当我们需要下载一些构件（artifact）时，如果本地仓库没有，再去私服下载，私服没有，再去中央仓库下载。</p><p><strong>Nexus</strong>是一个专门的 Maven仓库管理软件。它提供了强大的仓库管理功能，构件搜索功能；<br>它占用较少的内存，基于REST，基于简单文件系统而非数据库。</p><a id="more"></a><h3><span id="1-安装nexus服务">1. 安装Nexus服务</span></h3><h4><span id="11-前置条件jdk18环境">1.1 前置条件：<code>jdk1.8环境 </code></span></h4><h4><span id="12-下载nexus">1.2 下载Nexus</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.18.1-01-unix.tar.gz</span><br></pre></td></tr></table></figure><p>下载失败的话，可以试试这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">百度云: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;16IfFUtL3W0YGciS-XPlPfQ</span><br><span class="line">提取码: naxi </span><br></pre></td></tr></table></figure><h4><span id="13-安装nexus">1.3 安装Nexus</span></h4><p>解压到安装目录（<code>/data/apps/nexus/</code>），会得到两个文件夹：nexus-3.18.1-01（nexus 服务目录）、sonatype-work（私有库目录）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /data/apps/nexus/</span><br><span class="line">[root@localhost ~]# mv nexus-3.18.1-01-unix.tar.gz /data/apps/nexus/nexus-3.18.1-01-unix.tar.gz</span><br><span class="line">[root@localhost ~]# cd /data/apps/nexus/</span><br><span class="line">[root@localhost nexus]# tar -zvxf nexus-3.18.1-01-unix.tar.gz</span><br><span class="line">[root@localhost nexus]# ls</span><br><span class="line">nexus-3.18.1-01  nexus-3.18.1-01-unix.tar.gz  sonatype-work</span><br></pre></td></tr></table></figure><p>进入 nexus-3.18.1-01 文件夹，其中 etc/nexus-default.properties 文件配置端口（默认为 8081）和 work 目录信息，可以按需修改。</p><h4><span id="14-开放端口并启动服务">1.4 开放端口并启动服务</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nexus-3.18.1-01]# firewall-cmd --zone=public --add-port=8081/tcp --permanent &amp;&amp; firewall-cmd --reload</span><br><span class="line">[root@localhost nexus-3.18.1- /data/apps/nexus/nexus-3.18.1-01/bin</span><br><span class="line">[root@localhost bin]# ./nexus start</span><br><span class="line">WARNING: ************************************************************</span><br><span class="line">WARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!</span><br><span class="line">WARNING: ************************************************************</span><br><span class="line">Starting nexus</span><br></pre></td></tr></table></figure><p>首次启动，初始账号为：<code>admin</code>，查看初始密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# cat /data/apps/nexus/sonatype-work/nexus3/admin.password</span><br><span class="line">e6c47f75-dc91-4f87-a2a9-0188df6e4b7c</span><br></pre></td></tr></table></figure><h3><span id="2-配置nexus">2. 配置Nexus</span></h3><h4><span id="21-登录nexus">2.1 登录Nexus</span></h4><p>Nexus服务启动以后，使用浏览器访问<code>http://IP:8081/</code>，并用初始账号密码登录，登陆后会让我们先修改初始密码。</p><p><img src="https://oscimg.oschina.net/oscnet/up-502db1f338b345d6fd3148a090e2fd2fe12.JPEG"></p><p>仓库浏览在左侧菜单栏<code>Browse</code>，这里有多种仓库：</p><ol><li><code>maven-central</code>：maven 中央库，默认从 <a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a> 拉取 jar</li><li><code>maven-releases</code>：私库发行版 jar，初次安装请将 Deployment policy 设置为 Allow redeploy</li><li><code>maven-snapshots</code>：私库快照（调试版本）jar</li><li><code>maven-public</code>：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地 maven 基础配置 settings.xml 或项目 pom.xml 中使用</li></ol><ul><li>仓库类型说明：<ul><li><code>group</code>：这是一个仓库聚合的概念，用户仓库地址选择 Group 的地址，即可访问 Group 中配置的，用于方便开发人员自己设定的仓库。maven-public 就是一个 Group 类型的仓库，内部设置了多个仓库，访问顺序取决于配置顺序，3.x 默认为 Releases、Snapshots、Central，当然你也可以自己设置。</li><li><code>hosted</code>：私有仓库，内部项目的发布仓库，专门用来存储我们自己生成的 jar 文件</li><li><code>snapshots</code>：本地项目的快照仓库</li><li><code>releases</code>： 本地项目发布的正式版本</li><li><code>proxy</code>：代理类型，从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的 Configuration 页签下 Remote Storage 属性的值即被代理的远程仓库的路径），如可配置阿里云 maven 仓库</li><li><code>central</code>：中央仓库</li></ul></li></ul><h4><span id="22-设置">2.2 设置</span></h4><ol><li>配置Releases版本可重复上传: <code>Deployment pollcy --&gt; Allow redeploy</code>。</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-0c975f956016a64ea320c944c072af7411e.JPEG"></p><ol start="2"><li>增加一个代理仓库，使用的是阿里云公共仓库。首先点击<code>Create repository</code>按钮开始创建一个仓库，类型选择 maven2（proxy）。</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-7f1d30bc0b032cf43278b9074ca9aee21dc.JPEG"></p><ol start="3"><li>配置阿里云地址<code>http://maven.aliyun.com/nexus/content/groups/public/</code>，并创建。</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-c6a3ab35342767a6a95ef40073278967a11.JPEG"></p><ol start="4"><li>阿里云代理仓库创建完毕后，我们编辑<code>maven-public</code>，将其添加到放入<code>group</code>中，并调整优先级，然后保存。</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-bf6e3f140adb09aeddfd2f6f6366740263b.JPEG"></p><ol start="5"><li>点击maven-public条目的<code>copy</code>按钮即可拷贝私服地址</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-8419fbf8913733269363b199c0260abae0b.JPEG"></p><h3><span id="3-maven配置使用私服">3. Maven配置使用私服</span></h3><h4><span id="31-使用配置下载依赖">3.1 使用配置（下载依赖）</span></h4><p>两种方式：①通过<code>Maven</code>的<code>setting.xml</code>文件配置（全局模式），②通过<code>项目</code>的<code>pom.xml</code>文件配置（项目独享模式）。</p><blockquote><p>注意：若<code>pom.xml</code>和<code>setting.xml</code>同时配置了，以<code>pom.xml</code>为准。</p></blockquote><ol><li>全局模式：通过<code>Maven</code>的<code>setting.xml</code>文件配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--镜像名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.2.100:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>项目独享模式：通过<code>项目</code>的<code>pom.xml</code>文件配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.2.100:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="32-发布配置发布依赖">3.2 发布配置（发布依赖）</span></h4><ol><li>修改<code>setting.xml</code>文件，指定<code>releases</code>和<code>snapshots server</code>的用户名和密码：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在发布依赖项目的<code>pom.xml</code>文件中加入<code>distributionManagement</code>节点（这里<code>repository id</code>需要和上一步里的<code>server id</code>名称保持一致）：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.2.100:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.2.100:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>执行<code>mvn deploy</code>命令发布。</li><li>登录<code>Nexus</code>，查看对应的仓库就能看到发布的依赖包了。</li></ol><blockquote><p>发布到的仓库说明：<br>①若项目版本号末尾带有<code>-SNAPSHOT</code>，则会发布到<code>snapshots</code>快照版本仓库。<br>②若项目版本号末尾带有<code>-RELEASES</code>或什么都不带，则会发布到<code>releases</code>正式版本仓库。</p></blockquote><h3><span id="4-设置nexus开机自启">4. 设置Nexus开机自启</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nexus.service</span><br></pre></td></tr></table></figure><p><code>nexus.service</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unitt]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/data/apps/nexus/nexus-3.18.1-01/bin/nexus start</span><br><span class="line">ExecReload=/data/apps/nexus/nexus-3.18.1-01/bin/nexus restart</span><br><span class="line">ExecStop=/data/apps/nexus/nexus-3.18.1-01/bin/nexus stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启开机启动</span></span><br><span class="line">systemctl enable nexus.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl start nexus.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">systemctl stop nexus.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Maven私服&lt;/strong&gt; 就是在内网架设一个&lt;code&gt;Maven仓库服务器&lt;/code&gt;，在代理远程仓库的同时维护本地仓库。&lt;br&gt;当我们需要下载一些构件（artifact）时，如果本地仓库没有，再去私服下载，私服没有，再去中央仓库下载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nexus&lt;/strong&gt;是一个专门的 Maven仓库管理软件。它提供了强大的仓库管理功能，构件搜索功能；&lt;br&gt;它占用较少的内存，基于REST，基于简单文件系统而非数据库。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Maven" scheme="http://chaooo.github.io/tags/Maven/"/>
    
    <category term="Nexus" scheme="http://chaooo.github.io/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Centos 8 私人Git服务器搭建(Gogs)</title>
    <link href="http://chaooo.github.io/article/20201222.html"/>
    <id>http://chaooo.github.io/article/20201222.html</id>
    <published>2020-12-22T07:30:56.000Z</published>
    <updated>2021-02-03T13:50:47.681Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-创建gogs用户">1. 创建gogs用户</span></h3><p>为Gogs创建一个MySQL用户<code>gogs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先创建一个MySQL用户</span></span><br><span class="line">use mysql;</span><br><span class="line">create user &#x27;gogs&#x27;@&#x27;localhost&#x27; identified by &#x27;J5p&quot;;~OVazNl%y)?&#x27;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">再进行授权</span></span><br><span class="line">grant all privileges on *.* to &#x27;gogs&#x27;@&#x27;%&#x27;  IDENTIFIED BY &#x27;J5p&quot;;~OVazNl%y)?&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><a id="more"></a><p>为Gogs创建一个系统用户<code>git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个用户</span></span><br><span class="line">[root@localhost ~]# useradd -mU git -s /bin/bash</span><br><span class="line">[root@localhost ~]# passwd git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到git用户</span></span><br><span class="line">[root@localhost ~]# su git</span><br><span class="line">[git@localhost ~]$ cd /home/git</span><br></pre></td></tr></table></figure><h3><span id="2-下载安装">2. 下载安装</span></h3><p>下载Gogs二进制安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.gogs.io/0.12.3/gogs_0.12.3_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压安装包</span></span><br><span class="line">tar -zxvf gogs_0.12.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>使用Gogs脚本创建gogs数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 切换目录到gogs脚本文件夹</span><br><span class="line">cd <span class="operator">/</span>home<span class="operator">/</span>git<span class="operator">/</span>gogs<span class="operator">/</span>scripts<span class="operator">/</span></span><br><span class="line"></span><br><span class="line"># 使用mysql.sql创建gogs数据库，这里会要求输入密码</span><br><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p <span class="operator">&lt;</span> mysql.sql</span><br><span class="line"></span><br><span class="line"># 假如执行这条命令会报错【ERROR <span class="number">1115</span> (<span class="number">42000</span>) <span class="keyword">at</span> line <span class="number">2</span>: <span class="literal">Unknown</span> <span class="type">character</span> <span class="keyword">set</span>: <span class="string">&#x27;utf8mb4&#x27;</span>】的话继续执行下面这个可选操作,在重新执行上面的命令。</span><br><span class="line"># 修改mysql.sql</span><br><span class="line">vim mysql.sql</span><br><span class="line"><span class="comment">/*************** 原文 ***************/</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> gogs;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> gogs <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line"><span class="comment">/*************** 修改为 *************/</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> gogs;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> gogs <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="comment">/*************** 结束 ***************/</span></span><br></pre></td></tr></table></figure><p>开放端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>启动Gogs服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/git/gogs/gogs web</span><br></pre></td></tr></table></figure><p>访问Gogs网站 <code>http://你的服务器IP:3000</code></p><p><img src="https://oscimg.oschina.net/oscnet/up-84af5c842f2a6e3ec51ac831999ade1802c.JPEG"></p><p>填写正确的配置信息，点击 “<code>立即安装</code>”</p><h3><span id="3-配置开机自启动">3. 配置开机自启动</span></h3><p>配置Gogs服务自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭gogs服务</span></span><br><span class="line">ctrl + c </span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到root用户</span></span><br><span class="line">su root</span><br><span class="line">cp /home/git/gogs/scripts/systemd/gogs.service /usr/lib/systemd/system/</span><br><span class="line">systemctl enable gogs.service</span><br><span class="line">systemctl start gogs.service</span><br></pre></td></tr></table></figure><p>若CentOS 8开机启动gogs失败，先禁用SELinux:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p>将SELinux属性设置为Disabled，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta">#</span><span class="bash"> SELINUXTYPE= can take one of these three values:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><p>重启系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-创建gogs用户&quot;&gt;&lt;a href=&quot;#1-创建gogs用户&quot; class=&quot;headerlink&quot; title=&quot;1. 创建gogs用户&quot;&gt;&lt;/a&gt;1. 创建gogs用户&lt;/h3&gt;&lt;p&gt;为Gogs创建一个MySQL用户&lt;code&gt;gogs&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;先创建一个MySQL用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use mysql;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create user &amp;#x27;gogs&amp;#x27;@&amp;#x27;localhost&amp;#x27; identified by &amp;#x27;J5p&amp;quot;;~OVazNl%y)?&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;再进行授权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grant all privileges on *.* to &amp;#x27;gogs&amp;#x27;@&amp;#x27;%&amp;#x27;  IDENTIFIED BY &amp;#x27;J5p&amp;quot;;~OVazNl%y)?&amp;#x27; with grant option;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flush privileges;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Gogs" scheme="http://chaooo.github.io/tags/Gogs/"/>
    
    <category term="Git" scheme="http://chaooo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat9安装及多实例多应用配置(CentOS 8)</title>
    <link href="http://chaooo.github.io/article/20201221.html"/>
    <id>http://chaooo.github.io/article/20201221.html</id>
    <published>2020-12-21T05:30:56.000Z</published>
    <updated>2021-02-03T13:48:11.734Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-tomcat9安装">1. Tomcat9安装</span></h3><p>使用wget获取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>下载之后如果没有进入别的文件夹，压缩包一般是在/root下面。进入/root下面进行解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzf apache-tomcat-9.0.41.tar.gz</span><br></pre></td></tr></table></figure><p>然后复制到指定的文件夹下(在/data/apps下面创建了一个tomcat的文件夹)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/apps</span><br><span class="line">mv apache-tomcat-9.0.41 /data/apps/tomcat</span><br></pre></td></tr></table></figure><p>然后配置jvm内存参数（也可以不用配置）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /data/apps/tomcat/bin/setenv.sh</span><br></pre></td></tr></table></figure><p>在setenv.sh中写入如下语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&#x27;-Djava.security.egd=file:/dev/./urandom -server -Xms512m -Xmx1024m -Dfile.encoding=UTF-8&#x27;</span><br></pre></td></tr></table></figure><p>开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开放8080端口</span></span><br><span class="line">firewall-cmd --add-port=8080/tcp --permanent &amp;&amp; firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>启动/停用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">cd /data/apps/tomcat/bin &amp;&amp; sh startup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">停用</span></span><br><span class="line">cd /data/apps/tomcat/bin &amp;&amp; sh shutdown.sh</span><br></pre></td></tr></table></figure><p>通过浏览器访问 【ip】:8080</p><h3><span id="2-tomcat多实例配置">2. Tomcat多实例配置</span></h3><p>Tomcat多实例部署的好处在于升级方便，配置及安装文件间互不影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    安装路径                       实例位置</span><br><span class="line">【CATALINA_HOME】            【CATALINA_BASE】</span><br><span class="line">        |————bin     &lt;-------------|</span><br><span class="line">        |————lib     &lt;-------------|</span><br><span class="line">                                   |————（conf,webapps,logs,temp,work）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个实例存放路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/runtime/tomcat-instance</span><br></pre></td></tr></table></figure><p>新建两个tomcat实例，把安装路径下的<code>conf,webapps,logs,temp,work</code>文件拷贝到实例中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /data/runtime/tomcat-instance</span><br><span class="line">mkdir tomcat1 tomcat2</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">cd /data/apps/tomcat/</span><br><span class="line">cp conf/ webapps/ temp/ logs/ work/ -rt /data/runtime/tomcat-instance/tomcat1</span><br><span class="line">cp conf/ webapps/ temp/ logs/ work/ -rt /data/runtime/tomcat-instance/tomcat2</span><br></pre></td></tr></table></figure><p>新建 Tomcat实例启动/停止脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/runtime/tomcat-instance</span><br><span class="line">vim tomcat1.sh</span><br><span class="line">vim tomcat2.sh</span><br></pre></td></tr></table></figure><p>tomcat1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">export CATALINA_BASE=/data/runtime/tomcat-instance/tomcat1</span><br><span class="line">export CATALINA_HOME=/data/apps/tomcat</span><br><span class="line">export CATALINA_PID=$CATALINA_BASE/CATALINA_PID</span><br><span class="line">export JAVA_OPTS=&quot;-server -Xms256m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m&quot;</span><br><span class="line"></span><br><span class="line">sname=tomcat1</span><br><span class="line">mark=$CATALINA_BASE/temp</span><br><span class="line">pid=`ps -ef | grep &quot;$mark&quot; | grep -v &quot;grep $mark&quot; | awk -F &quot; &quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">function start()</span><br><span class="line">&#123;</span><br><span class="line">  if [ -f &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    rm -rf $CATALINA_PID</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;$sname start ......&quot;</span><br><span class="line"><span class="meta">  $</span><span class="bash">CATALINA_HOME/bin/catalina.sh start 2&gt;/dev/null</span></span><br><span class="line">  pid=`ps -ef | grep &quot;$mark&quot; | grep -v &quot;grep $mark&quot; | awk -F &quot; &quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">  echo &quot;PID:                   $pid&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stop()</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;$sname stop ......&quot;</span><br><span class="line">  if [ $pid ]; then</span><br><span class="line">    kill -9 $pid</span><br><span class="line">    rm -f $CATALINA_PID</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function status()</span><br><span class="line">&#123;</span><br><span class="line">  if [ $pid ]; then</span><br><span class="line">    echo &quot;$sname run ......&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;$sname stop ......&quot;</span><br><span class="line">  fi</span><br><span class="line">  echo `ps -ef | grep &quot;$CATALINA_BASE&quot; | grep -v &quot;grep $CATALINA_BASE&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">status)</span><br><span class="line">  status</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo &quot;Option in (start|stop|restart|status)&quot;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>tomcat2.sh参考tomcat1.sh</p><p>赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 tomcat1.sh tomcat2.sh</span><br></pre></td></tr></table></figure><p>配置实例<code>server.xml</code>端口</p><ul><li>Server Port：该端口用于监听关闭tomcat的shutdown命令，默认为8005</li><li>Connector Port：该端口用于监听HTTP的请求，默认为8080</li><li>AJP Port：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，默认为8009</li><li>Redirect Port：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把 https 的请求转发到这个Redirect Port指定的端口，默认为8443；</li></ul><p>这里<code>tomcat1</code>实例保持默认，把<code>tomcat2</code>实例的<code>Server Port</code>改为了<code>8006</code>，<code>Connector Port</code>改为了 <code>8081</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /data/runtime/tomcat-instance/tomcat2</span><br><span class="line">vim conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 8081端口</span></span><br><span class="line">firewall-cmd --add-port=8081/tcp --permanent &amp;&amp; firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>分别在 tomcat1、tomcat2 的 webapps/ROOT 目录下放入了页面文件。</p><p>启动两个实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/runtime/tomcat-instance</span><br><span class="line">./tomcat1.sh start</span><br><span class="line">./tomcat2.sh start</span><br></pre></td></tr></table></figure><p>通过浏览器：<code>【ip】:8080/</code>，<code>【ip】:8081/</code>，如：192.168.2.100:8080</p><h3><span id="3-nginx使用https代理tomcat">3. nginx使用https代理tomcat</span></h3><p>修改nginx配置文件，在server中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location /tomcat1/ &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">          proxy_set_header   Host     $host:$server_port;</span><br><span class="line">          proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">          proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header   Scheme  $scheme;</span><br><span class="line">&#125;</span><br><span class="line">location /tomcat2/ &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8081/;</span><br><span class="line">          proxy_set_header   Host     $host:$server_port;</span><br><span class="line">          proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">          proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header   Scheme  $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器访问：<code>【ip】/tomcat1/</code>，<code>【ip】/tomcat2/</code>，如：192.168.2.100/tomcat1/</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Tomcat9安装&quot;&gt;&lt;a href=&quot;#1-Tomcat9安装&quot; class=&quot;headerlink&quot; title=&quot;1. Tomcat9安装&quot;&gt;&lt;/a&gt;1. Tomcat9安装&lt;/h3&gt;&lt;p&gt;使用wget获取：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Tomcat" scheme="http://chaooo.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 8 安装和配置 NFS 服务器</title>
    <link href="http://chaooo.github.io/article/20201218.html"/>
    <id>http://chaooo.github.io/article/20201218.html</id>
    <published>2020-12-18T02:30:56.000Z</published>
    <updated>2021-02-03T13:51:11.174Z</updated>
    
    <content type="html"><![CDATA[<p>网络文件系统（NFS）是一个分布式文件系统协议，它允许你通过网络共享远程文件夹。</p><p>NFS 协议默认是不加密的，不提供用户身份鉴别。服务端通过限定客户端的 IP 地址和端口来限制访问。</p><ul><li>NFS 特点：<ul><li>基于TCP/IP协议，服务于linux之间资源共享</li><li>将远程主机上共享资源挂载到本地目录，使得像使用本地文件一样方便。</li></ul></li></ul><a id="more"></a><h3><span id="1-建立-nfs-服务器">1. 建立 NFS 服务器</span></h3><h4><span id="11-安装-nfs-服务端centos8中默认安装了nfs-utils软件包">1.1 安装 NFS 服务端（CentOS8中默认安装了nfs-utils软件包）</span></h4><ol><li>用rpm检查是否有nfs-utils的包已安装：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep nfs-utils</span><br><span class="line">nfs-utils-2.3.3-31.el8.x86_64</span><br></pre></td></tr></table></figure><ol start="2"><li>如果没有安装 执行如下命令安装：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dnf install nfs-utils</span><br></pre></td></tr></table></figure><ol start="3"><li>启用并启动 NFS 服务：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl enable --now nfs-server</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /usr/lib/systemd/system/nfs-server.service.</span><br></pre></td></tr></table></figure><ol start="4"><li>默认情况下，在 CentOS8 上，NFS3 和 NFS4 都可以用，NFS2 被禁用。想要验证，运行下面的cat命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/fs/nfsd/versions</span><br><span class="line">-2 +3 +4 +4.1 +4.2</span><br></pre></td></tr></table></figure><p>NFS 服务器配置选项在<code>/etc/nfsmount.conf</code>和<code>/etc/nfs.conf</code>文件中。默认的设置足够满足我们的要求。</p><h4><span id="12-创建文件系统">1.2 创建文件系统</span></h4><ol><li>创建共享目录，并开放目录权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /nfs_database</span><br><span class="line">[root@localhost ~]# chmod 777 /nfs_database</span><br><span class="line">[root@localhost ~]# cd /nfs_database/ &amp;&amp; echo &quot;this is nfs database test !!&quot; &gt; nfs_test.txt</span><br><span class="line">cd /nfs_database/ &amp;&amp; echo &quot;this is nfs database test chmod 777 /nfs_database&quot; &gt; nfs_test.txt</span><br><span class="line">[root@localhost nfs_database]# ls</span><br><span class="line">nfs_test.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑NFS服务程序配置文件(允许IP地址<code>192.168.2.*</code>的所有主机访问NFS共享资源文件夹)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/exports</span><br><span class="line">/nfs_database 192.168.2.* (rw,no_root_squash,async) </span><br></pre></td></tr></table></figure><p>配置完成后，使nfs配置生效，使用exportfs实用程序有选择地导出目录，而无需重新启动NFS服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用exportfs实用程序有选择地导出目录，而无需重新启动NFS服务</span></span><br><span class="line">[root@localhost ~]# exportfs -rv</span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前配置为nfs共享的目录及其状态</span></span><br><span class="line">[root@localhost ~]# exportfs -v</span><br></pre></td></tr></table></figure><table><thead><tr><th>NFS配置文件参数</th><th>作用</th></tr></thead><tbody><tr><td>ro</td><td>只读（read only）</td></tr><tr><td>rw</td><td>读写（read write）</td></tr><tr><td>root_squash</td><td>当NFS客户端以root管理员访问时，映射为NFS服务器匿名用户</td></tr><tr><td>no_root_squash</td><td>当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员</td></tr><tr><td>all_squash</td><td>表示客户机所有用户访问时，映射为NFS服务器匿名用户</td></tr><tr><td>sync</td><td>同时将数据写入到内存与硬盘中，保证不丢失数据</td></tr><tr><td>async</td><td>优先将数据保存到内存，然后再写入硬盘，效率更高，但可能丢失数据</td></tr></tbody></table><ol start="3"><li>启动和启用rpcbind服务程序</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装rpcbind</span></span><br><span class="line">[root@localhost ~]# yum install -y rpcbind</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启并启用rpc服务程序</span></span><br><span class="line">[root@localhost ~]# systemctl restart rpcbind &amp;&amp; systemctl enable rpcbind</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启并启用NFS服务程序</span></span><br><span class="line">[root@localhost ~]# systemctl restart nfs-server &amp;&amp; systemctl enable nfs-server</span><br></pre></td></tr></table></figure><h4><span id="13-防火墙设置">1.3 防火墙设置</span></h4><p>将该服务添加到防火墙中进行放行。</p><p>部署nfs服务不仅需要nfs服务软件包，还需要rpc-bind服务和mountd服务。<br>因为nfs服务需要向客户端广播地址和端口信息，nfs客户端需要使用mount对远程nfs服务器目录进行挂载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --permanent --zone=public --add-service=nfs</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --permanent --zone=public --add-service=rpc-bind</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --permanent --zone=public --add-service=mountd</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><h3><span id="2-客户端配置">2. 客户端配置</span></h3><ol><li>查询远程nfs服务器是否能够连通</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# showmount -e 192.168.2.100</span><br><span class="line">Export list for 192.168.2.100:</span><br><span class="line">/nfs_database (everyone)</span><br></pre></td></tr></table></figure><table><thead><tr><th>showmount参数</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>显示NFS服务器共享列表</td></tr><tr><td>-a</td><td>显示本地挂载的文件资源情况</td></tr><tr><td>-v</td><td>显示版本号</td></tr></tbody></table><ol start="2"><li>创建本地nfs专用共享目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /nfs_database</span><br><span class="line">[root@localhost ~]# chmod 777 /nfs_database</span><br></pre></td></tr></table></figure><ol start="3"><li>将远程nfs服务器共享目录挂载到本地创建的nfs共享目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mount -t nfs 192.168.2.100:/nfs_database /nfs_database</span><br></pre></td></tr></table></figure><ul><li>mount参数：<ul><li><code>-t</code>：使用TCP协议</li><li><code>nfs</code>：nfs服务</li><li><code>192.168.2.100:/nfs_database</code>：远程nfs服务器资源共享目录</li><li><code>/nfs-database</code>：本地资源共享目录</li></ul></li></ul><ol start="4"><li>本机查看共享文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /nfs_database</span><br><span class="line">[root@localhost nfs_database]# ll</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 root root 50 12月 17 14:52 nfs_test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络文件系统（NFS）是一个分布式文件系统协议，它允许你通过网络共享远程文件夹。&lt;/p&gt;
&lt;p&gt;NFS 协议默认是不加密的，不提供用户身份鉴别。服务端通过限定客户端的 IP 地址和端口来限制访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFS 特点：&lt;ul&gt;
&lt;li&gt;基于TCP/IP协议，服务于linux之间资源共享&lt;/li&gt;
&lt;li&gt;将远程主机上共享资源挂载到本地目录，使得像使用本地文件一样方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="NFS" scheme="http://chaooo.github.io/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 整合 FastDFS</title>
    <link href="http://chaooo.github.io/article/20201217.html"/>
    <id>http://chaooo.github.io/article/20201217.html</id>
    <published>2020-12-17T04:30:56.000Z</published>
    <updated>2021-02-03T13:48:23.037Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-在maven项目pomxml中添加依赖">1. 在maven项目pom.xml中添加依赖</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3><span id="2-在applicationyml中添加配置">2. 在application.yml中添加配置</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#FDFS配置</span><br><span class="line">fdfs:</span><br><span class="line">  so-timeout: 5000 #上传的超时时间</span><br><span class="line">  connect-timeout: 2000 #连接超时时间</span><br><span class="line">  thumb-image:             #缩略图生成参数</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  tracker-list:            #TrackerList参数,支持多个</span><br><span class="line">  - 192.168.2.100:22122</span><br></pre></td></tr></table></figure><h3><span id="3-编写fastdfs工具类">3. 编写FastDFS工具类</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDfsUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThumbImageConfig thumbImageConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FastFileStorageClient fastFileStorageClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FdfsWebServer fdfsWebServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastDfsUtil</span><span class="params">(ThumbImageConfig thumbImageConfig, FastFileStorageClient fastFileStorageClient, FdfsWebServer fdfsWebServer)</span> </span>&#123;</span><br><span class="line">        FastDfsUtil.thumbImageConfig = thumbImageConfig;</span><br><span class="line">        FastDfsUtil.fastFileStorageClient = fastFileStorageClient;</span><br><span class="line">        FastDfsUtil.fdfsWebServer = fdfsWebServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile 文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回文件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> qbanxiaoli</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(MultipartFile multipartFile)</span> </span>&#123;</span><br><span class="line">        StorePath storePath = fastFileStorageClient.uploadFile(multipartFile.getInputStream(), multipartFile.getSize(), FilenameUtils.getExtension(multipartFile.getOriginalFilename()), <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> storePath.getFullPath();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4-编写测试controller">4. 编写测试Controller</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片并保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadFile</span><span class="params">(MultipartFile[] file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; file.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String saveFile = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file.length; i++) &#123;</span><br><span class="line">                MultipartFile partFile = file[i];</span><br><span class="line">                <span class="comment">// 保存文件</span></span><br><span class="line">                saveFile = FastDfsUtil.uploadFile(partFile);;</span><br><span class="line">                saveFile = <span class="string">&quot;http://192.168.2.100/&quot;</span> + saveFile;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(<span class="string">&quot;data&quot;</span>, saveFile);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;图片上传成功:&quot;</span> + saveFile);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;图片上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5-编写前端页面代码">5. 编写前端页面代码</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        图片上传：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/png,image/jpeg,image/gif,image/jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        图片回显：</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;upload-file&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&#x27;#input-file&#x27;</span>).on(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">    formData.append(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">// 开始上传</span></span></span><br><span class="line"><span class="javascript">    fileUpload(<span class="string">&quot;/upload&quot;</span>, formData);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 测试读取图片(本地显示)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line"><span class="javascript">    fileReader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">fEvent</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> src = fEvent.target.result;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(src);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#upload-file&quot;</span>).attr(<span class="string">&quot;src&quot;</span>, src);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">url, formData</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line">        url: url,</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        cache: <span class="literal">false</span>,</span></span><br><span class="line">        data: formData,</span><br><span class="line"><span class="javascript">        processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        dataType: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(res);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, type, errorThrown</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;照片上传失败&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="6-浏览器访问页面测试">6. 浏览器访问页面测试</span></h3><p><img src="https://oscimg.oschina.net/oscnet/up-83d0d727e478c0a4832f661f79076b4128d.JPEG"></p><blockquote><p>demo源码地址：<a href="https://gitee.com/chaoo/fastdfs-demo.git">https://gitee.com/chaoo/fastdfs-demo.git</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-在maven项目pom-xml中添加依赖&quot;&gt;&lt;a href=&quot;#1-在maven项目pom-xml中添加依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 在maven项目pom.xml中添加依赖&quot;&gt;&lt;/a&gt;1. 在maven项目pom.xml中添加依赖&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.tobato&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastdfs-client&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.27.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="FastDFS" scheme="http://chaooo.github.io/tags/FastDFS/"/>
    
    <category term="SpringBoot" scheme="http://chaooo.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Centos8 安装 FastDFS 6.06</title>
    <link href="http://chaooo.github.io/article/20201215.html"/>
    <id>http://chaooo.github.io/article/20201215.html</id>
    <published>2020-12-15T11:30:56.000Z</published>
    <updated>2021-02-03T13:51:18.521Z</updated>
    
    <content type="html"><![CDATA[<p>FastDFS是一款开源的分布式文件系统，功能主要包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了文件大容量存储和高性能访问的问题。FastDFS特别适合以文件为载体的在线服务，如图片、视频、文档等等。</p><p>FastDFS为互联网应用量身定做，解决大容量文件存储问题，追求高性能和高扩展性。FastDFS可以看做是基于文件的key value存储系统，key为文件ID，value为文件内容，因此称作分布式文件存储服务更为合适。</p><a id="more"></a><ul><li>FastDFS特点如下： <ol><li>分组存储，简单灵活；</li><li>对等结构，不存在单点；</li><li>文件ID由FastDFS生成，作为文件访问凭证。FastDFS不需要传统的name server或meta server；</li><li>大、中、小文件均可以很好支持，可以存储海量小文件；</li><li>一台storage支持多块磁盘，支持单盘数据恢复；</li><li>提供了nginx扩展模块，可以和nginx无缝衔接；</li><li>支持多线程方式上传和下载文件，支持断点续传；</li><li>存储服务器上可以保存文件附加属性。</li></ol></li></ul><p><a href="https://github.com/happyfish100/fastdfs">【官方GitHub地址】</a></p><h3><span id="1-准备安装文件">1. 准备安装文件</span></h3><ul><li>安装文件：fastdfs,libfastcommon,fastdfs-nginx-module</li><li>文件存放位置：/usr/local/src</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget -c &quot;https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz&quot; -O fastdfs-6.06.tar.gz</span><br><span class="line">wget -c &quot;https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz&quot; -O libfastcommon-1.0.43.tar.gz</span><br><span class="line">wget -c &quot;https://github.com/happyfish100/fastdfs-nginx-module/archive/V1.22.tar.gz&quot; -O fastdfs-nginx-module-1.22.tar.gz</span><br><span class="line">wget -c http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><h3><span id="2-编译安装">2. 编译安装</span></h3><p>准备编译环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br><span class="line">tar -zxvf libfastcommon-1.0.43.tar.gz</span><br><span class="line">tar -zxvf fastdfs-6.06.tar.gz</span><br><span class="line">tar -zxvf fastdfs-nginx-module-1.22.tar.gz</span><br></pre></td></tr></table></figure><h4><span id="21-编译安装libfatscommon">2.1 编译安装libfatscommon</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/libfastcommon-1.0.43</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><p>检查(出现libfastcommon.so即成功)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/lib64|grep libfastcommon</span><br><span class="line">ls /usr/lib|grep libfastcommon</span><br></pre></td></tr></table></figure><h4><span id="22-编译安装fastdfs">2.2 编译安装fastdfs</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/fastdfs-6.06</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/bin|grep fdfs</span><br></pre></td></tr></table></figure><h3><span id="3-配置trackerfastfds跟踪器">3. 配置Tracker(FastFDS跟踪器)</span></h3><ol><li>启用并修改配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs/</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件生效</span></span><br><span class="line">disabled = false</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提供服务端口</span></span><br><span class="line">port = 22122</span><br><span class="line"><span class="meta">#</span><span class="bash"> Tracker 数据和日志目录地址（根目录必须存在，子目录会自动创建）</span></span><br><span class="line">base_path = /fastdfs/tracker</span><br><span class="line"><span class="meta">#</span><span class="bash"> HTTP 服务端口 默认8080，建议修改防止冲突</span></span><br><span class="line">http.server_port = 8080</span><br></pre></td></tr></table></figure><ol start="3"><li>创建Tracker基础数据目录，即base_path对应的目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /fastdfs/tracker</span><br></pre></td></tr></table></figure><ol start="4"><li>启动Tracker服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">systemctl start fdfs_trackerd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">systemctl restart fdfs_trackerd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line">systemctl status fdfs_trackerd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查服务是否启动</span></span><br><span class="line">ps -ef | grep fdfs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 22122端口正在被监听，则算Tracker服务安装成功</span></span><br><span class="line">netstat -tulnp | grep fdfs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">systemctl stop fdfs_trackerd</span><br></pre></td></tr></table></figure><ol start="5"><li>设置开机启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable fdfs_trackerd.service</span><br></pre></td></tr></table></figure><h3><span id="4-配置storagefastfds存储器">4. 配置Storage(FastFDS存储器)</span></h3><ol><li>启用并修改配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs/</span><br><span class="line">cp storage.conf.sample storage.conf</span><br><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Storage 数据和日志目录地址（根目录必须存在，子目录会自动创建）</span></span><br><span class="line">base_path = /fastdfs/storage/base</span><br><span class="line"><span class="meta">#</span><span class="bash"> 逐一配置 store_path_count 个路径，索引号基于 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不配置，那就和base_path一样</span></span><br><span class="line">store_path0 = /fastdfs/storage</span><br><span class="line"><span class="meta">#</span><span class="bash"> tracker_server 的列表，多个时，每个写一行（会主动连接 tracker_server）</span></span><br><span class="line">tracker_server = ip:22122</span><br><span class="line"><span class="meta">#</span><span class="bash"> HTTP 服务端口 默认8888，建议修改防止冲突</span></span><br><span class="line">http.server_port = 8888</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Tracker基础数据目录，即base_path对应的目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对应base_path</span></span><br><span class="line">mkdir -p  /fastdfs/storage/base</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应store_path0，有多个要创建多个</span></span><br><span class="line">mkdir -p  /fastdfs/storage</span><br></pre></td></tr></table></figure><ol start="3"><li>启动Storage服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">systemctl start fdfs_storaged</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">systemctl restart fdfs_storaged</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line">systemctl status fdfs_storaged</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查服务是否启动</span></span><br><span class="line">ps -ef | grep fdfs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 22122端口正在被监听，则算Tracker服务安装成功</span></span><br><span class="line">netstat -tulnp | grep fdfs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">systemctl stop fdfs_storaged</span><br></pre></td></tr></table></figure><ol start="4"><li>查看Storage和Tracker是否在通信</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><ol start="5"><li>设置开机自启</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable fdfs_storaged.service</span><br></pre></td></tr></table></figure><h3><span id="5-客户端配置">5. 客户端配置</span></h3><ol><li>启用修改Client配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs/</span><br><span class="line">cp client.conf.sample client.conf</span><br><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Client 的数据和日志目录</span></span><br><span class="line">base_path= /fastdfs/client</span><br><span class="line"><span class="meta">#</span><span class="bash"> Tracker 端口</span></span><br><span class="line">tracker_server=ip:22122</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Client基础数据目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /fastdfs/client</span><br></pre></td></tr></table></figure></li></ol><h3><span id="6-配置nginx模块">6. 配置Nginx模块</span></h3><p>安装配置fastfds-nginx-module模块</p><ol><li>进入 /usr/local/src/fastdfs-nginx-module-1.22/src/</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/fastdfs-nginx-module-1.22/src/</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑配置文件（FastDFS 服务脚本设置的 bin 目录是 /usr/local/bin， 但实际命令安装在 /usr/bin/ 下）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将config文件中的/usr/<span class="built_in">local</span>替换成/usr</span></span><br><span class="line">:%s+/usr/local+/usr</span><br></pre></td></tr></table></figure><ol start="3"><li>进入 nginx 解压目录，添加fastdfs-nginx-module</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/newdatadrive/apps/nginx-1.18.0</span><br><span class="line">./configure --add-module=/mnt/newdatadrive/apps/fastdfs/fastdfs-nginx-module-1.22/src/ --with-http_stub_status_module</span><br></pre></td></tr></table></figure><p>若是SSL(https)，没有SSL证书忽略此步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-module=/mnt/newdatadrive/apps/fastdfs/fastdfs-nginx-module-1.22/src/ --with-http_ssl_module</span><br></pre></td></tr></table></figure><ol start="4"><li>编译安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="5"><li>复制并修改fastdfs-ngin-module中的配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/src/fastdfs-nginx-module-1.22/src/mod_fastdfs.conf /etc/fdfs/</span><br><span class="line">vi /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"></span><br><span class="line">connect_timeout=10</span><br><span class="line">tracker_server=ip:22122</span><br><span class="line">url_have_group_name = true</span><br><span class="line">store_path0=/fastdfs/storage</span><br></pre></td></tr></table></figure><ol start="6"><li>进入fastdfd源码conf目录，将http.conf，mime.types两个文件拷贝到/etc/fdfs/目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/fastdfs-6.06/conf/</span><br><span class="line">cp http.conf mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><ol start="7"><li>创建一个软连接，在/fastdfs/storage文件存储目录下创建软连接，将其链接到实际存放数据 的目录（可以省略）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00</span><br></pre></td></tr></table></figure><ol start="8"><li>编辑Nginx配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;# 建议修改，防止冲突</span><br><span class="line">    server_name  ip;</span><br><span class="line">    location ~/group([0-9])/M00 &#123;</span><br><span class="line">            root  /fastdfs/storage/data;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>启动Ngnix</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3><span id="7-测试">7. 测试</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载测试图片到本地</span></span><br><span class="line">cd /usr/local/src</span><br><span class="line">wget -c &quot;https://www.caimei365.com/img/base/placeholder.png&quot; -O test.png</span><br><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/test.png</span><br><span class="line"><span class="meta">#</span><span class="bash"> 得到返回文件名</span></span><br><span class="line">group1/M00/00/00/wKgCZF_YlreAcZCZAAHolZLymZE514.png</span><br></pre></td></tr></table></figure><p>与ip拼接后浏览器访问：<a href="http://192.168.2.100/group1/M00/00/00/wKgCZF_YlreAcZCZAAHolZLymZE514.png">http://192.168.2.100/group1/M00/00/00/wKgCZF_YlreAcZCZAAHolZLymZE514.png</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FastDFS是一款开源的分布式文件系统，功能主要包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了文件大容量存储和高性能访问的问题。FastDFS特别适合以文件为载体的在线服务，如图片、视频、文档等等。&lt;/p&gt;
&lt;p&gt;FastDFS为互联网应用量身定做，解决大容量文件存储问题，追求高性能和高扩展性。FastDFS可以看做是基于文件的key value存储系统，key为文件ID，value为文件内容，因此称作分布式文件存储服务更为合适。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="FastDFS" scheme="http://chaooo.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 8 常用软件安装(MySQL Nginx SVN Redis)</title>
    <link href="http://chaooo.github.io/article/20201209.html"/>
    <id>http://chaooo.github.io/article/20201209.html</id>
    <published>2020-12-09T08:00:56.000Z</published>
    <updated>2021-02-03T13:50:58.902Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-centos-8-安装mysql80mysql57">1. CentOS 8 安装（MySQL8.0/MySQL5.7)</span></h3><h4><span id="11-安装-mysql-80">1.1 安装 MySQL 8.0</span></h4><h5><span id="111-使用最新的包管理器安装mysql">1.1.1 使用最新的包管理器安装MySQL</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install @mysql</span><br></pre></td></tr></table></figure><a id="more"></a><h5><span id="112-配置表大小写不敏感">1.1.2 配置表大小写不敏感</span></h5><p>在首次启动之前要配置表大小写不敏感，这是和 MySQL 7 不一样的地方。</p><p>mysql的配置文件是 /etc/my.cnf，它 include 了 /etc/my.cnf.d 目录下的配置，所以在 /etc/my.cnf.d/mysql-server.cnf 配置文件里<code>[mysqld]</code>下面的配置<code>lower_case_table_names=1</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names&#x3D;1</span><br></pre></td></tr></table></figure><h5><span id="113-设置开机启动">1.1.3 设置开机启动</span></h5><p>安装完成后，运行以下命令来启动MySQL服务并使它在开机时自动启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now mysqld</span><br></pre></td></tr></table></figure><p>检查MySQL服务器是否正在运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><h5><span id="114-添加密码及安全设置">1.1.4 添加密码及安全设置</span></h5><p>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>要求你配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置<ul><li>  选择密码验证策略等级， 我这里选择0 （low），回车</li><li>  输入新密码两次</li><li>  确认是否继续使用提供的密码？输入y ，回车</li><li>  移除匿名用户？ 输入y ，回车</li><li>  不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车</li></ul></li><li> 移除test数据库？ 输入y ，回车</li><li> 重新载入权限表？ 输入y ，回车</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: y</span><br><span class="line"></span><br><span class="line">There are three levels of password validation policy:</span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: </span><br><span class="line">Re-enter new password: </span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100 </span><br><span class="line">Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done! </span><br></pre></td></tr></table></figure><h5><span id="115-配置远程登陆用户">1.1.5 配置远程登陆用户</span></h5><ol><li>本机登录MySQL:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&lt;上面步骤中设置的密码&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建用户和授权</li></ol><p>在mysql8.0创建用户和授权和之前不太一样了，其实严格上来讲，也不能说是不一样,只能说是更严格,mysql8.0需要先创建用户和设置密码,然后才能授权；<br>将root用户的host字段设为’%’，意为接受root所有IP地址的登录请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#先创建一个用户</span><br><span class="line">use mysql;</span><br><span class="line">create user &#39;developer&#39;@&#39;%&#39; identified by &#39;05bZ&#x2F;OxTB:X+yd%1&#39;;</span><br><span class="line"> </span><br><span class="line">#再进行授权</span><br><span class="line">grant all privileges on *.* to &#39;developer&#39;@&#39;%&#39; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line"># 若用SQLyog连接MySQL8.0出现错误2058，执行如下命令</span><br><span class="line">ALTER USER &#39;developer&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;05bZ&#x2F;OxTB:X+yd%1&#39;;</span><br></pre></td></tr></table></figure><ol start="3"><li>开放防火墙端口3306</li></ol><p>MySQL默认监听3306端口，设置完成后输入exit退出mysql，回到终端shell界面，接着开启系统防火墙的3306端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h5><span id="116-关闭mysql主机查询dns">1.1.6 关闭MySQL主机查询dns</span></h5><p>MySQL会反向解析远程连接地址的dns记录，如果MySQL主机无法连接外网，则dns可能无法解析成功，导致第一次连接MySQL速度很慢，所以在配置中可以关闭该功能。<br><a href="https://www.cnblogs.com/liruning/p/7111015.html">参考文档</a><br>打开<code>/etc/my.cnf</code>文件，添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><h5><span id="117-重启服务">1.1.7 重启服务</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>本机测试安装后，MySQL8.0默认已经是utf8mb4字符集，所以字符集不再修改。</p><h4><span id="12-centos-8-安装配置-mysql-57">1.2 CentOS 8 安装配置 MySQL 5.7</span></h4><h5><span id="121-添加mysql存储库">1.2.1 添加MySQL存储库</span></h5><p>禁用MySQL默认的存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf remove @mysql</span><br><span class="line">dnf module reset mysql &amp;&amp;  dnf module disable mysql</span><br></pre></td></tr></table></figure><p>CentOS 8没有MySQL5.7存储库，创建一个新的存储库文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo</span><br></pre></td></tr></table></figure><p>将以下数据粘贴到文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysql57-community]</span><br><span class="line">name&#x3D;MySQL 5.7 Community Server</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-5.7-community&#x2F;el&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br><span class="line">[mysql-connectors-community]</span><br><span class="line">name&#x3D;MySQL Connectors Community</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-connectors-community&#x2F;el&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br><span class="line">[mysql-tools-community]</span><br><span class="line">name&#x3D;MySQL Tools Community</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-tools-community&#x2F;el&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br></pre></td></tr></table></figure><h5><span id="122-在centos-8-上安装mysql-57">1.2.2 在CentOS 8 上安装MySQL 5.7</span></h5><p>禁用MySQL 8 存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf config-manager --disable mysql80-community</span><br></pre></td></tr></table></figure><p>然后启用MySQL 5.7存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf config-manager --enable mysql57-community</span><br></pre></td></tr></table></figure><p>然后在CentOS 8 上安装MySQL 5.7：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install mysql-community-server</span><br></pre></td></tr></table></figure><p>按y开始安装。</p><p>安装完成后检查软件包的转速详细信息，以确认它是5.7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi mysql-community-server </span><br></pre></td></tr></table></figure><h5><span id="123-在centos-8-rhel-8上配置mysql-57">1.2.3 在CentOS 8 / RHEL 8上配置MySQL 5.7</span></h5><p>安装后，启动mysqld服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now mysqld.service</span><br></pre></td></tr></table></figure><p>2.2 –复制为root用户生成的随机密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;A temporary password&#39;  &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p>若没有生成临时密码，执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">systemctl restart mysqld</span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line">2020-12-11T09:41:41.459519Z 1 [Note] A temporary password is generated for root@localhost: #4q0R3/#qmC0</span><br></pre></td></tr></table></figure><p>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码，<br>可以参考【**<em>1.1.3 添加密码及安全设置**</em>】及之后的操作。</p><h3><span id="2-centos-8-安装配置-nginx">2. CentOS 8 安装配置 Nginx</span></h3><h4><span id="21-下载安装">2.1 下载安装</span></h4><p>官网下载：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>或者直接在linux执行命令：<code>wget http://nginx.org/download/nginx-1.18.0.tar.gz</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line">cd nginx-1.18.0/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行配置【没有SSL证书】</span></span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="bash">  执行配置【有SSL证书】</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装(默认安装在/usr/<span class="built_in">local</span>/nginx)</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>防火墙配置，nginx默认监听80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4><span id="22-nginx验证与配置">2.2 Nginx验证与配置</span></h4><ul><li>测试配置文件：<code>/usr/local/nginx/sbin/nginx -t</code></li><li>nginx主配置文件：<code>/usr/local/nginx/conf/nginx.conf</code></li><li>nginx日志文件：<code>/usr/local/nginx/logs/access.log</code></li><li>启动Nginx：<code>/usr/local/nginx/sbin/nginx</code></li></ul><p>加入环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>最尾输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$JAVA_HOME/bin:/usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>使用<code>source /etc/profile</code>命令使配置文件生效。</p><h4><span id="23-centos-8-配置nginx开机自启动">2.3 Centos 8 配置Nginx开机自启动</span></h4><ol><li>进入到/lib/systemd/system/目录，编辑nginx.service</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line">[root@localhost system]# vim nginx.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</span><br><span class="line">PrivateTmp&#x3D;yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>[Unit]</code>:服务的说明：<pre><code> - Description:描述服务 - After:描述服务类别</code></pre></li><li><code>[Service]</code>服务运行参数的设置：<pre><code> - Type=forking是后台运行的形式 - ExecStart为服务的具体运行命令 - ExecReload为重启命令 - ExecStop为停止命令 - PrivateTmp=True表示给服务分配独立的临时空间 - 注意：`[Service]`的启动、重启、停止命令全部要求使用绝对路径</code></pre></li><li><code>[Install]</code>运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</li></ul></blockquote><ol start="2"><li>加入开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure><ol start="3"><li>常用命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx服务</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动服务</span></span><br><span class="line">systemctl restart nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有已启动的服务</span></span><br><span class="line">systemctl list-units --type=service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务当前状态</span></span><br><span class="line">systemctl status nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启动</span></span><br><span class="line">systemctl enable nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止开机自启动</span></span><br><span class="line">systemctl disable nginx.service</span><br></pre></td></tr></table></figure></li></ol><h3><span id="3-centos-8-安装配置-svn">3. CentOS 8 安装配置 SVN</span></h3><ol><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装SVN</span></span><br><span class="line">[root@localhost ~]# yum -y install subversion</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">[root@localhost ~]# mkdir -p /var/svn/svnrepos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建版本库(codes为自定义仓库目录)</span></span><br><span class="line">[root@localhost ~]# svnadmin create /var/svn/svnrepos/codes</span><br></pre></td></tr></table></figure></li><li>配置<ul><li>authz：负责账号权限的管理，控制账号是否读写权限</li><li>passwd：负责账号和密码的用户名单管理</li><li>svnserve.conf：svn服务器配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /var/svn/svnrepos/codes/conf</span><br><span class="line">[root@localhost conf]# ls</span><br><span class="line">authz  passwd  svnserve.conf</span><br></pre></td></tr></table></figure>添加账户，并赋予读写权限，在authz末尾加入：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim authz</span><br><span class="line">[/]</span><br><span class="line">admin=rw</span><br><span class="line">test1=rw</span><br><span class="line">test2=rw</span><br></pre></td></tr></table></figure>设置账户密码：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim passwd</span><br><span class="line">[users]</span><br><span class="line"><span class="meta">#</span><span class="bash"> harry = harryssecret</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sally = sallyssecret</span></span><br><span class="line">admin = 123456</span><br><span class="line">test1 = 123456</span><br><span class="line">test2 = 123456</span><br></pre></td></tr></table></figure>设置svn服务器配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim svnserve.conf</span><br><span class="line">[general]</span><br><span class="line">anon-access = read</span><br><span class="line">auth-access = write</span><br><span class="line"></span><br><span class="line">password-db = passwd</span><br><span class="line"></span><br><span class="line">authz-db = authz</span><br><span class="line"></span><br><span class="line">realm = My First Repository</span><br></pre></td></tr></table></figure></li></ul></li><li>设置开机自启<br>修改/etc/sysconfig/svnserve 将OPTIONS修改为自己的库版本保存目录（保留引号和-r）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;svnserve</span><br><span class="line">OPTIONS&#x3D;&quot;-r &#x2F;var&#x2F;svn&#x2F;svnrepos&quot;</span><br></pre></td></tr></table></figure>开机自启<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable svnserve.service</span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /var/svn/svnrepos</span><br></pre></td></tr></table></figure>默认端口是3690<br>需要修改监听端口或者监听IP可以通过修改–listen-port和 –listen-host来进行修改</li></ol><p>可以通过svn协议进行访问：<code>svn://[ip]:[port]/codes</code></p><h1><span id="5-centos-8-安装和配置-redis">5. CentOS 8 安装和配置 Redis</span></h1><ol><li>Redis版本5.0.x包含在默认的CentOS 8存储库中，查询可用的redis安装包：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dnf list redis</span><br><span class="line">上次元数据过期检查：3:04:47 前，执行于 2020年12月21日 星期一 23时03分10秒。</span><br><span class="line">可安装的软件包</span><br><span class="line">redis.x86_64      5.0.3-2.module_el8.2.0+318+3d7e67ea     AppStream</span><br></pre></td></tr></table></figure><ol start="2"><li>执行安装：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dnf install redis</span><br></pre></td></tr></table></figure><ol start="3"><li>安装完成后，启用并启动Redis服务：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl enable --now redis</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/redis.service → /usr/lib/systemd/system/redis.service.</span><br></pre></td></tr></table></figure><ol start="4"><li>检查Redis服务器是否正在运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status redis</span><br></pre></td></tr></table></figure></li><li>配置Redis远程访问</li></ol><p>修改Redis配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] vim /etc/redis.conf</span><br><span class="line"><span class="comment"># 查找 /bind 找到：bind 127.0.0.1并注释，使其它ip地址也可访问</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 查找 /requirepass 去掉注释#，并把foobared 替换为密码，例如：qwe123</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line">requirepass qwe123</span><br></pre></td></tr></table></figure><p>防火墙配置，Redis默认监听6379端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent &amp;&amp; firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>重新启动Redis服务以使更改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] systemctl restart redis</span><br></pre></td></tr></table></figure><ol start="6"><li>其他服务器远程访问测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.2.100 -p 6379 -a qwe123</span><br><span class="line">192.168.2.100:6379&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-CentOS-8-安装（MySQL8-0-MySQL5-7&quot;&gt;&lt;a href=&quot;#1-CentOS-8-安装（MySQL8-0-MySQL5-7&quot; class=&quot;headerlink&quot; title=&quot;1. CentOS 8 安装（MySQL8.0/MySQL5.7)&quot;&gt;&lt;/a&gt;1. CentOS 8 安装（MySQL8.0/MySQL5.7)&lt;/h3&gt;&lt;h4 id=&quot;1-1-安装-MySQL-8-0&quot;&gt;&lt;a href=&quot;#1-1-安装-MySQL-8-0&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装 MySQL 8.0&quot;&gt;&lt;/a&gt;1.1 安装 MySQL 8.0&lt;/h4&gt;&lt;h5 id=&quot;1-1-1-使用最新的包管理器安装MySQL&quot;&gt;&lt;a href=&quot;#1-1-1-使用最新的包管理器安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 使用最新的包管理器安装MySQL&quot;&gt;&lt;/a&gt;1.1.1 使用最新的包管理器安装MySQL&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dnf install @mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="MySQL" scheme="http://chaooo.github.io/tags/MySQL/"/>
    
    <category term="Nginx" scheme="http://chaooo.github.io/tags/Nginx/"/>
    
    <category term="SVN" scheme="http://chaooo.github.io/tags/SVN/"/>
    
    <category term="Redis" scheme="http://chaooo.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins入门（二）声明式流水线Jenkins Pipeline</title>
    <link href="http://chaooo.github.io/article/20201205.html"/>
    <id>http://chaooo.github.io/article/20201205.html</id>
    <published>2020-12-05T03:50:56.000Z</published>
    <updated>2021-02-03T13:50:32.272Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-jenkins-pipeline-基本概念">1. Jenkins Pipeline 基本概念</span></h3><p>流水线是用户定义的一个CD流水线模型 。流水线的代码定义了整个的构建过程, 他通常包括构建, 测试和交付应用程序的阶段 。<br><code>Jenkins Pipeline</code>（或简称为”Pipeline”）是一套插件，将持续交付的实现和实施集成到Jenkins中。<br>持续交付<code>Pipeline</code>自动化的表达了这样一种流程：将基于版本控制管理的软件持续的交付。<br>Jenkins Pipeline 的定义通常被写入到一个<code>Jenkinsfile</code>文本文件中，该文件可以被放入项目的源代码控制库中。</p><a id="more"></a><h3><span id="2jenkinsfile-基础语法">2.Jenkinsfile 基础语法</span></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;                // 特定语法，pipeline 块定义了整个流水线中完成的所有的工作</span><br><span class="line">    agent any             // agent为整个流水线分配一个执行器 (在节点上)和工作区</span><br><span class="line">    stages &#123;              // 所有流程（状态）的外层块，仅有一个</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;  // 每个stage为一流程，定义名称</span><br><span class="line">            steps &#123;       // 步骤块，内部包含具体操作</span><br><span class="line">                sh &#x27;make&#x27; // sh操作，其引号间的文字会当成shell直接执行</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Test&#x27;)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;make check&#x27;</span><br><span class="line">                junit &#x27;reports/**/*.xml&#x27;  //junit使用匹配的定义测试xml进行单元测试</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Deploy&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;make publish&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3创建-hello-world-流水线">3.创建 Hello World 流水线</span></h3><ol><li>登录<code>Jenkins</code>，新建任务(New Item)，选择<code>流水线</code>，输入工程名称<code>Hello Pipeline</code>，确定。</li><li>填写描述，勾选<code>参数化构建过程(This project is parameterized)</code>。</li><li>添加参数，选择<code>字符参数(String parameter)</code>，并设置这个字符串参数(名称,默认值,描述)，这样我们在Jenkinsfile中就可以取到这个值了。</li><li>向下滑动到<code>流水线</code>，定义选择<code>Pipeline script</code>，脚本输入如下内容，然后保存。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;                //环境变量</span><br><span class="line">        GREETING=&quot;Hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(&#x27;打招呼&#x27;) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sh &#x27;echo &quot;$GREETING $TITLE&quot;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   post &#123;                        //构建完成后置操作</span><br><span class="line">        aborted &#123;                //如果构建中断，则执行</span><br><span class="line">            echo &#x27;构建被中止!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;                //构建成功执行</span><br><span class="line">            echo &#x27;构建成功!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">       failure &#123;                 //构建失败执行</span><br><span class="line">           echo &#x27;构建失败!&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击<code>Build with Parameters(参数化构建)</code>，然后<code>开始构建</code>。</li><li>构建完成输出界面：<br><img src="https://oscimg.oschina.net/oscnet/up-e49f9a3240d011242cd6093b055cf6709c7.JPEG" alt="构建完成输出界面" title="构建完成输出界面"></li></ol><ol start="7"><li>把鼠标放在打招呼下边的绿色框上，点出现的<code>logs</code>，可以看到输出了预期的值。</li><li>找到左下角的<code>Build History(构建历史)</code>的构建版本号，如当前是<code>#1</code>，点进去，选择<code>Console Output</code>查看详细的执行日志。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 成功Console Output</span></span><br><span class="line">Started by user charles</span><br><span class="line">Running in Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">[Pipeline] node</span><br><span class="line">Running on Jenkins in /home/jenkins/root/workspace/Hello Pipeline</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] withEnv</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (打招呼)</span><br><span class="line">[Pipeline] sh</span><br><span class="line">+ echo &#x27;Hello Jenkins Pipeline&#x27;</span><br><span class="line">Hello Jenkins Pipeline</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] stage</span><br><span class="line">[Pipeline] &#123; (Declarative: Post Actions)</span><br><span class="line">[Pipeline] echo</span><br><span class="line">构建成功!</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // stage</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // withEnv</span><br><span class="line">[Pipeline] &#125;</span><br><span class="line">[Pipeline] // node</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Jenkins-Pipeline-基本概念&quot;&gt;&lt;a href=&quot;#1-Jenkins-Pipeline-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. Jenkins Pipeline 基本概念&quot;&gt;&lt;/a&gt;1. Jenkins Pipeline 基本概念&lt;/h3&gt;&lt;p&gt;流水线是用户定义的一个CD流水线模型 。流水线的代码定义了整个的构建过程, 他通常包括构建, 测试和交付应用程序的阶段 。&lt;br&gt;&lt;code&gt;Jenkins Pipeline&lt;/code&gt;（或简称为”Pipeline”）是一套插件，将持续交付的实现和实施集成到Jenkins中。&lt;br&gt;持续交付&lt;code&gt;Pipeline&lt;/code&gt;自动化的表达了这样一种流程：将基于版本控制管理的软件持续的交付。&lt;br&gt;Jenkins Pipeline 的定义通常被写入到一个&lt;code&gt;Jenkinsfile&lt;/code&gt;文本文件中，该文件可以被放入项目的源代码控制库中。&lt;/p&gt;</summary>
    
    
    
    <category term="Jenkins入门" scheme="http://chaooo.github.io/categories/jenkins-learn/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Jenkins" scheme="http://chaooo.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Centos8安装部署Node+MongDB+YApi(接口管理)</title>
    <link href="http://chaooo.github.io/article/20201121.html"/>
    <id>http://chaooo.github.io/article/20201121.html</id>
    <published>2020-11-21T04:30:56.000Z</published>
    <updated>2021-02-03T13:51:11.199Z</updated>
    
    <content type="html"><![CDATA[<p>YApi:权限管理、Mock服务、可视化接口管理、数据导入（支持postman），其依赖NodeJS+MongDB。</p><a id="more"></a><h3><span id="1-安装nodejs">1. 安装NodeJS</span></h3><ol><li>下载NodeJS稳定版14.15.1</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /local/node-server</span><br><span class="line">[root@localhost ~]# cd /local/node-server</span><br><span class="line">[root@localhost node-server]# wget https://nodejs.org/dist/v14.15.1/node-v14.15.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><ol start="2"><li>解压下载好的node包到安装目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost node-server]# tar xvf node-v14.15.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><ol start="3"><li><code>node -v</code>查看版本号</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost node-server]# node -v</span><br><span class="line">bash: node: 未找到命令...</span><br><span class="line">[root@localhost node-server]# /local/node-server/node-v14.15.1-linux-x64/bin/node -v</span><br><span class="line">v14.15.1</span><br></pre></td></tr></table></figure><ol start="4"><li>创建软链接，就可以全局使用node和npm命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost node-server]# ln -s /local/node-server/node-v14.15.1-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">[root@localhost node-server]# ln -s /local/node-server/node-v14.15.1-linux-x64/bin/npm /usr/local/bin/npm</span><br><span class="line">[root@localhost node-server]# node -v</span><br><span class="line">v14.15.1</span><br><span class="line">[root@localhost node-server]# npm -v</span><br><span class="line">6.14.8</span><br></pre></td></tr></table></figure><h3><span id="2-安装mongdb">2. 安装MongDB</span></h3><ol><li>创建yum源文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/mongodb-org-4.2.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入如下内容</span></span><br><span class="line">[mongodb-org-4.2]  </span><br><span class="line">name=MongoDB Repository  </span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=1  </span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span><br></pre></td></tr></table></figure><ol start="2"><li>安装mongodb</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install mongodb-org</span><br></pre></td></tr></table></figure><ol start="3"><li>查看安装目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# whereis mongod</span><br><span class="line">mongod: /usr/bin/mongod /etc/mongod.conf /usr/share/man/man1/mongod.1</span><br></pre></td></tr></table></figure><ol start="4"><li>编辑配置文件<code>/etc/mongod.conf</code>(根据自己需要进行修改bindip地址，可监听127.0.0.1或内网地址。如果需要绑定多个ip )</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/mongod.conf</span><br><span class="line">bindIp: 127.0.0.1,192.168.2.101</span><br></pre></td></tr></table></figure><ol start="4"><li>启动Mongodb</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动mongodb</span></span><br><span class="line">systemctl start mongod.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止mongodb</span></span><br><span class="line">systemctl stop mongod.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询 mongodb 状态：</span></span><br><span class="line">systemctl status mongod.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为开机启动</span></span><br><span class="line">systemctl enable mongod.service</span><br></pre></td></tr></table></figure><p>如果在不同服务器下访问或者修改端口需要配置防火墙或者阿里云服务器安全组件 默认为27017 如修改可在/etc/mongod.conf下修改端口，<br>到此安装完成。</p><ol start="5"><li>启动 mongo shell</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mongo</span><br><span class="line">MongoDB shell version v4.2.11</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他信息省略...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line">bye</span><br></pre></td></tr></table></figure><h3><span id="3-安装yapi">3. 安装YApi</span></h3><ol><li>开始安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir yapi &amp;&amp; cd yapi</span><br><span class="line">wget http://registry.npm.taobao.org/yapi-vendor/download/yapi-vendor-1.9.2.tgz</span><br><span class="line">tar -zxvf yapi-vendor-1.9.2.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>拷贝依赖package至vendors</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yapi]# ll</span><br><span class="line">drwxr-xr-x. 9 root root    4096 11月 20 16:18 package</span><br><span class="line">-rw-r--r--. 1 root root 9403779 5月  29 14:14 yapi-vendor-1.9.2.tgz</span><br><span class="line">[root@localhost yapi]# mv package vendors</span><br><span class="line">[root@localhost yapi]# ll</span><br><span class="line">drwxr-xr-x. 9 root root    4096 11月 20 16:18 vendors</span><br><span class="line">-rw-r--r--. 1 root root 9403779 5月  29 14:14 yapi-vendor-1.9.2.tgz</span><br></pre></td></tr></table></figure><ol start="3"><li>安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yapi]# cd vendors/</span><br><span class="line">[root@localhost vendors]# npm install --production --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="4"><li>拷贝配置并修改(MongoDB地址、端口、用户)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vendors]# cd ../</span><br><span class="line">[root@localhost yapi]# cp vendors/config_example.json ./config.json</span><br><span class="line">[root@localhost yapi]# vim config.json</span><br></pre></td></tr></table></figure><ol start="5"><li>安装服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yapi]# cd vendors/</span><br><span class="line">[root@localhost vendors]# npm run install-server</span><br><span class="line">初始化管理员账号成功,账号名：&quot;admin@admin.com&quot;，密码：&quot;ymfe.org&quot;</span><br></pre></td></tr></table></figure><ol start="6"><li>启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vendors]# node server/app.js</span><br><span class="line">log: -------------------------------------swaggerSyncUtils constructor-----------------------------------------------</span><br><span class="line">log: 服务已启动，请打开下面链接访问: </span><br><span class="line">http://127.0.0.1:3000/</span><br></pre></td></tr></table></figure><ol start="7"><li>安装pm管理服务启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vendors]# npm install pm2 -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置服务启动项</span></span><br><span class="line">[root@localhost vendors]# pm2 start &quot;/local/yapi/vendors/server/app.js&quot; --name yapi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务信息</span></span><br><span class="line">[root@localhost vendors]# pm2 info yapi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">[root@localhost vendors]# pm2 stop yapi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">[root@localhost vendors]# pm2 restart yapi</span><br></pre></td></tr></table></figure><blockquote><p>若找不到pm2命令，可先把node安装路径/bin添加到环境变量。</p></blockquote><ol start="8"><li>设置开机启动</li></ol><p>运行 pm2 startup，即在/etc/init.d/目录下生成pm2-root的启动脚本，且自动将pm2-root设为服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 startup</span><br></pre></td></tr></table></figure><p>运行 pm2 save，会将当前pm2所运行的应用保存在/root/.pm2/dump.pm2下，当开机重启时，运行pm2-root服务脚本，并且到/root/.pm2/dump.pm2下读取应用并启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 save</span><br></pre></td></tr></table></figure><ol start="9"><li>还可以配合IDEA插件<code>Api Generator</code>使用<ul><li>Preferences → Plugins → Marketplace → 搜索“Api Generator” → 安装该插件 → 重启IDE</li><li><a href="http://forgus.vicp.io/2019/10/28/Api_Generator_introduction/">Api Generator使用教程</a></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;YApi:权限管理、Mock服务、可视化接口管理、数据导入（支持postman），其依赖NodeJS+MongDB。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="YApi" scheme="http://chaooo.github.io/tags/YApi/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins入门（四）自动部署Jar到远程服务器</title>
    <link href="http://chaooo.github.io/article/20201120.html"/>
    <id>http://chaooo.github.io/article/20201120.html</id>
    <published>2020-11-20T10:56:55.000Z</published>
    <updated>2021-02-03T13:50:16.322Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-配置远程服务器ssh免密登录">1. 配置远程服务器SSH免密登录</span></h3><ol><li>本地客户端生成公私钥（一路回车默认即可），会在用户目录.ssh文件夹下创建公私钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[localuser@localhost .ssh]$ ssh-keygen</span><br><span class="line">[localuser@localhost .ssh]$ ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>上传公钥到服务器，这里远程服务器地址为：192.168.2.200，用户为：testuser</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub testuser@192.168.2.200</span><br></pre></td></tr></table></figure><p>上面这条命令会在远程服务器的<code>~/.ssh</code>目录生成<code>authorized_keys</code>，里面是id_rsa.pub(公钥)内容。</p><blockquote><p>若目标服务器已经存在了<code>authorized_keys</code>，则可拷贝公钥内容追加到<code>authorized_keys</code>内容的末尾。</p></blockquote><ol start="3"><li>测试免密登录，本地客户端通过ssh连接远程服务器，就可以免密登录了。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[localuser@localhost ~]$ ssh testuser@192.168.2.200</span><br><span class="line">Last login: Tue Nov 17 20:57:25 2020 from 192.168.2.202</span><br><span class="line">[testuser@caimeidev1 ~]$ exit</span><br><span class="line">logout</span><br><span class="line">Connection to 192.168.2.200 closed.</span><br></pre></td></tr></table></figure><h3><span id="2-登录jenkins客户端并配置">2. 登录Jenkins客户端并配置</span></h3><p>先安装插件：<code>Git Paramater</code>，这里只演示部署，因为已在本地打好包推送到了git服务器。</p><ol><li>新建Item， 输入任务名称：<code>MavenTest</code>(自己定义)，选择自由项目，点击<code>确定</code>。</li><li>勾选<code>This project is parameterized</code>(参数化构建)<ul><li>选择<code>Choice Parameter</code>,添加打包环境参数(名称：buildEnv，选项：beta和prod)；</li><li>选择<code>Git Parameter</code>,定义参数名称:<code>gitBranch</code>，参数类型选择<code>分支</code>；</li><li><img src="https://oscimg.oschina.net/oscnet/up-60e4e7fe99f99698de5e5488e94b969eccb.JPEG"></li></ul></li><li>源码管理，选择Git，填写仓库地址(<code>Repository URL</code>)和选择凭据(<code>Credentials</code>)。<ul><li><img src="https://oscimg.oschina.net/oscnet/up-499a162af32384b469b4b80cc0632f54f73.JPEG"></li></ul></li><li>构建环境，勾选<code>Add timestamps to the Console Output</code>，加上时间戳。</li><li>Post Steps，选择执行shell脚本Execute shell，输入：<ul><li><img src="https://oscimg.oschina.net/oscnet/up-3551b07c426b8380a725353feb341453c0b.JPEG"></li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/jenkins/shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应两个构建参数<span class="variable">$buildEnv</span>，<span class="variable">$gitBranch</span></span></span><br><span class="line">./demo-deploy-$buildEnv.sh demo-0.0.1-SNAPSHOT.jar  $&#123;gitBranch&#125;</span><br></pre></td></tr></table></figure><h3><span id="3-编写部署脚本">3. 编写部署脚本</span></h3><p>可参考<a href="https://my.oschina.net/chaoo/blog/4721418">shell脚本部署Java应用</a></p><ol><li> 本地客户端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[localuser@localhost ~]$ cd /home/jenkins/shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送不同服务器用不同shell脚本，beta:demo-deploy-beta.sh，product:demo-deploy-prod.sh，对应<span class="variable">$buildEnv</span>参数</span></span><br><span class="line">[localuser@localhost ~]$ vim demo-deploy-beta.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">fileName=$1</span><br><span class="line">gitBranch=$2</span><br><span class="line">if [ -z &quot;$fileName&quot; ]; then</span><br><span class="line">    echo &quot;文件名不能为空&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">echo &quot;准备发布【$gitBranch】分支，到【Beta：192.168.2.200】&quot;</span><br><span class="line">echo &quot;开始拷贝jar文件【$fileName】到远程服务器&quot;</span><br><span class="line">scp /home/jenkins/root/workspace/MavenTest/target/$fileName testuser@192.168.2.200:/usr/local/test/$fileName.prev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 捕获上一条命令的输出$? (<span class="keyword">if</span> 0 正常 <span class="keyword">else</span> 错误)</span></span><br><span class="line">if [ &quot;$?&quot; == &quot;0&quot; ]; then</span><br><span class="line">    echo &quot;文件传输结束，准备启动远程服务器的部署脚本&quot;</span><br><span class="line">    ssh testuser@192.168.2.200 /usr/local/test/demo-deploy.sh  $fileName</span><br><span class="line">else</span><br><span class="line">   echo &quot;拷贝文件错误&quot;</span><br><span class="line">   exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加执行权限</span></span><br><span class="line">[localuser@localhost ~]$ chmod +x demo-deploy-beta.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>远程服务器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[localuser@localhost ~]$ cd /usr/local/test</span><br><span class="line">[localuser@localhost ~]$ vim demo-deploy.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/env bash</span></span><br><span class="line">echo &quot;服务器开始部署服务&quot;</span><br><span class="line">projectname=&quot;demo-0.0.1-SNAPSHOT&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开文件所属的目录，不然远程执行会找不到当前目录</span></span><br><span class="line">cd /usr/local/test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新的jar包会当成参数传过来</span></span><br><span class="line">newJar=$1</span><br><span class="line">echo &quot;新的jar为：$newJar&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果新的jar包为空则退出</span></span><br><span class="line">if [ -z &quot;$newJar&quot; ]; then</span><br><span class="line">    echo &quot;新的jar不能为空&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取旧的jar包名称，当然可能是空的，也可能跟当前名称一致</span></span><br><span class="line">oldJar=$(ps -ef | grep $&#123;projectname&#125;|grep -v &#x27;demo-deploy.sh&#x27;|grep -v grep|awk &#x27;&#123;print $10&#125;&#x27;|cut -d &#x27;/&#x27; -f 2)</span><br><span class="line">echo &quot;当前运行的旧的jar包为：$oldJar&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash">如果新的jar包为空则退出</span></span><br><span class="line">if [ -z &quot;$oldJar&quot; ]; then</span><br><span class="line">    echo &quot;没有启动的demo服务&quot;</span><br><span class="line">else</span><br><span class="line">    # 如果旧的进程还在就将旧的进程杀掉</span><br><span class="line">    oldId=`ps -ef|grep $&#123;projectname&#125;|grep -v &quot;$0&quot;|grep -v &quot;grep&quot;|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    echo &quot;$oldId&quot;</span><br><span class="line">    echo &quot;kill old process start ...&quot;</span><br><span class="line">    for id in $oldId</span><br><span class="line">    do</span><br><span class="line">        kill -9 $id</span><br><span class="line">        echo &quot;killed $id&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;kill old process end&quot;</span><br><span class="line">    # 获取当前时间</span><br><span class="line">    suffix=&quot;.bak-&quot;`date &#x27;+%s%3N&#x27;`;</span><br><span class="line">    echo $suffix;</span><br><span class="line">    # 将旧的jar包进行备份</span><br><span class="line">    mv $oldJar $&#123;oldJar&#125;$&#123;suffix&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始启动新的进程</span></span><br><span class="line">mv $&#123;1&#125;.prev $&#123;1&#125;</span><br><span class="line">nohup java -jar $&#123;1&#125; &gt; run.txt 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;服务启动查看进程:&quot;</span><br><span class="line">echo `ps -ef | grep $&#123;projectname&#125;|grep -v &#x27;demo-deploy.sh&#x27;|grep -v grep`</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加执行权限</span></span><br><span class="line">[localuser@localhost ~]$ chmod +x demo-deploy.sh</span><br></pre></td></tr></table></figure></li></ol><h3><span id="4-部署测试">4. 部署测试</span></h3><p><code>Build with Parameters</code> -&gt; 选择要部署的<code>git分支$&#123;gitBranch&#125;</code>和<code>环境参数$&#123;buildEnv&#125;</code></p><p><img src="https://oscimg.oschina.net/oscnet/up-66c8b64a303730fb9c192fd57f769efdd5d.JPEG"></p><p>构建完成后点击<code>Build History</code>(构建历史)里的构建版本号，点击<code>控制台输出</code>查看日志</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b4db51b047564d03e104526cc387f2a883.JPEG"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-配置远程服务器SSH免密登录&quot;&gt;&lt;a href=&quot;#1-配置远程服务器SSH免密登录&quot; class=&quot;headerlink&quot; title=&quot;1. 配置远程服务器SSH免密登录&quot;&gt;&lt;/a&gt;1. 配置远程服务器SSH免密登录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;本地客户端生成公私钥（一路回车默认即可），会在用户目录.ssh文件夹下创建公私钥&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[localuser@localhost .ssh]$ ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[localuser@localhost .ssh]$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id_rsa  id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Jenkins入门" scheme="http://chaooo.github.io/categories/jenkins-learn/"/>
    
    
    <category term="Jenkins" scheme="http://chaooo.github.io/tags/Jenkins/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>shell编程入门（五）shell脚本部署Java应用</title>
    <link href="http://chaooo.github.io/article/20201119.html"/>
    <id>http://chaooo.github.io/article/20201119.html</id>
    <published>2020-11-19T07:28:30.000Z</published>
    <updated>2021-02-03T13:49:04.013Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3><span id="1-根据pid获取进程信息">1. 根据PID获取进程信息</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Function: 根据用户输入的PID，过滤出该PID所有的信息</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="bash"><span class="built_in">read</span> -p <span class="string">&quot;请输入要查询的PID: &quot;</span> P</span></span><br><span class="line">n=`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $11&#125;&#x27;|wc -l`</span><br><span class="line">if [ $n -eq 0 ];then</span><br><span class="line"> echo &quot;该PID不存在！&quot;</span><br><span class="line"> exit</span><br><span class="line">fi</span><br><span class="line">echo &quot;--------------------------------&quot;</span><br><span class="line">echo &quot;进程PID: $P&quot;</span><br><span class="line">echo &quot;进程命令：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $11&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;进程所属用户: `ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $1&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;CPU占用率：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $3&#125;&#x27;`%&quot;</span><br><span class="line">echo &quot;内存占用率：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $4&#125;&#x27;`%&quot;</span><br><span class="line">echo &quot;进程开始运行的时刻：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $9&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;进程运行的时间：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $10&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;进程状态：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $8&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;进程虚拟内存：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $5&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;进程共享内存：`ps -aux| awk &#x27;$2~/^&#x27;$P&#x27;$/&#123;print $6&#125;&#x27;`&quot;</span><br><span class="line">echo &quot;--------------------------------&quot;</span><br></pre></td></tr></table></figure><blockquote><p>若执行出现权限不够，为shell文件增加执行权限:<code>chmod +x test.sh</code></p></blockquote><h3><span id="2-使用shell脚本部署jar包">2. 使用Shell脚本部署Jar包</span></h3><p>将跳板机上(或本地服务器)的jar包文件拷贝到发布服务器，然后通过发布服务器上的脚本实现旧jar包的备份，新jar包的启动。</p><ul><li>实现部署的操作：拷贝jar包到服务器 -&gt; 备份旧服务jar包 -&gt; 启动新服务jar包</li><li>使用命令：<code>./begin.sh demo-0.0.1-SNAPSHOT.jar</code></li></ul><ol start="2"><li>跳板机(本地服务器)的脚本begin.sh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">fileName=$1</span><br><span class="line">if [ -z &quot;$fileName&quot; ]; then</span><br><span class="line">    echo &quot;文件名不能为空&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">echo &quot;开始拷贝jar文件【$fileName】到192.168.2.100&quot;</span><br><span class="line">scp $fileName cmuser@192.168.2.100:/usr/local/test/$fileName.prev</span><br><span class="line">echo &quot;文件传输结束，准备启动192.168.2.100的部署脚本&quot;</span><br><span class="line">ssh cmuser@192.168.2.100 /usr/local/test/demo-deploy.sh $fileName</span><br></pre></td></tr></table></figure><p>通过上面的跳板机上的代码，我们知道跳板机最终会调用发布服务器上<code>/usr/local/test/demo-deploy.sh</code>这个shell脚本命令。</p><ol start="3"><li>发布服务器脚本demo-deploy.sh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line">echo &quot;服务器开始部署服务&quot;</span><br><span class="line">projectname=&quot;demo&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开文件所属的目录，不然远程执行会找不到当前目录</span></span><br><span class="line">cd /usr/local/test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新的jar包会当成参数传过来</span></span><br><span class="line">newJar=$1</span><br><span class="line">echo &quot;新的jar为：$newJar&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果新的jar包为空则退出</span></span><br><span class="line">if [ -z &quot;$newJar&quot; ]; then</span><br><span class="line">    echo &quot;新的jar不能为空&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取旧的jar包名称，当然可能是空的，也可能跟当前名称一致</span></span><br><span class="line">oldJar=$(ps -ef | grep $&#123;projectname&#125;|grep -v &#x27;demo-deploy.sh&#x27;|grep -v grep|awk &#x27;&#123;print $10&#125;&#x27;|cut -d &#x27;/&#x27; -f 2)</span><br><span class="line">echo &quot;当前运行的旧的jar包为：$oldJar&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash">如果新的jar包为空则退出</span></span><br><span class="line">if [ -z &quot;$oldJar&quot; ]; then</span><br><span class="line">    echo &quot;没有启动的demo服务&quot;</span><br><span class="line">else</span><br><span class="line">    # 如果旧的进程还在就将旧的进程杀掉</span><br><span class="line">    oldId=`ps -ef|grep $&#123;projectname&#125;|grep -v &quot;$0&quot;|grep -v &quot;grep&quot;|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    echo &quot;$oldId&quot;</span><br><span class="line">    echo &quot;kill old process start ...&quot;</span><br><span class="line">    for id in $oldId</span><br><span class="line">    do</span><br><span class="line">        kill -9 $id</span><br><span class="line">        echo &quot;killed $id&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;kill old process end&quot;</span><br><span class="line">    # 获取当前时间戳</span><br><span class="line">    suffix=&quot;.bak-&quot;`date &#x27;+%s%3N&#x27;`;</span><br><span class="line">    echo $suffix;</span><br><span class="line">    # 将旧的jar包进行备份</span><br><span class="line">    mv $oldJar $&#123;oldJar&#125;$&#123;suffix&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始启动新的进程</span></span><br><span class="line">mv $&#123;1&#125;.prev $&#123;1&#125;</span><br><span class="line">nohup java -jar $&#123;1&#125; &gt; run.txt 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;服务启动查看进程:&quot;</span><br><span class="line">echo `ps -ef | grep $&#123;projectname&#125;|grep -v &#x27;demo-deploy.sh&#x27;|grep -v grep`</span><br></pre></td></tr></table></figure><ol start="4"><li>演示<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 跳板机</span></span><br><span class="line">[cmuser@localhost test]$ ./begin.sh demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">开始拷贝jar文件【demo-0.0.1-SNAPSHOT.jar】到192.168.2.100</span><br><span class="line">cmuser@192.168.2.100&#x27;s password: </span><br><span class="line">demo-0.0.1-SNAPSHOT.jar                                                                                                                                                                                 100%   20MB  11.2MB/s   00:01    </span><br><span class="line">文件传输结束，准备启动192.168.2.100的部署脚本</span><br><span class="line">cmuser@192.168.2.100&#x27;s password: </span><br><span class="line">服务器开始部署服务</span><br><span class="line">新的jar为：demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">当前运行的旧的jar包为：demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">2581</span><br><span class="line">kill old process start ...</span><br><span class="line">killed 2581</span><br><span class="line">kill old process end</span><br><span class="line">.bak-20201117</span><br><span class="line">服务启动查看进程:</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发布服务器(部署前pid:2581)</span></span><br><span class="line">[cmuser@192.168.2.100 test]$ ps -ef | grep demo</span><br><span class="line">cmuser    2581     1 16 17:03 ?        00:00:06 java -jar demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">[cmuser@192.168.2.100 test]$ ll</span><br><span class="line">total 40260</span><br><span class="line">-rw-rw-r--. 1 cmuser  cmuser  20606107 Nov 18 15:45 demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">-rw-rw-r--. 1 cmuser  cmuser  20606111 Nov 18 15:06 demo-0.0.1-SNAPSHOT.jar.bak-1605685530423</span><br><span class="line">-rwxrwxr-x. 1 jenkins jenkins     1356 Nov 17 17:56 demo-deploy.sh</span><br><span class="line">-rwxrwxrwx. 1 jenkins jenkins     1207 Nov 18 15:45 run.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发布服务器(部署后:2653)</span></span><br><span class="line">[cmuser@192.168.2.100 test]$ ps -ef | grep demo</span><br><span class="line">cmuser    2653     1 59 17:04 ?        00:00:07 java -jar demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3&gt;&lt;span id=&quot;1-根据pid获取进程信息&quot;&gt;1. 根据PID获取进程信息&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="shell编程" scheme="http://chaooo.github.io/categories/shell/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>shell编程入门（四）文本处理</title>
    <link href="http://chaooo.github.io/article/20201118.html"/>
    <id>http://chaooo.github.io/article/20201118.html</id>
    <published>2020-11-18T02:22:01.000Z</published>
    <updated>2021-02-03T13:49:14.722Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-文件查找命令">1. 文件查找命令</span></h3><h4><span id="11-find命令">1.1 find命令</span></h4><p>语法格式：<code>find 搜索路径 [选项] 搜索内容</code></p><a id="more"></a><table><thead><tr><th>选项</th><th>解析</th></tr></thead><tbody><tr><td>-name</td><td>按照文件名搜索</td></tr><tr><td>-iname</td><td>按照文件名搜索，不区分文件名大小</td></tr><tr><td>-inum</td><td>按照 inode 号搜索</td></tr><tr><td>-type</td><td>根据文件类型(f:文件,d:目录,c:字符设备文件,b:块设备文件,l:链接文件,p:管道文件)搜索</td></tr><tr><td>-size</td><td>根据文件大小(单位:ckMGTP)搜索，<code>-</code>小于，<code>+</code>大于，例如查找/etc目录下大于1M的文件：find /etc -size +1M</td></tr><tr><td>-mtime</td><td>根据修改时间(单位:smhdw)搜索</td></tr><tr><td>-ctime</td><td>根据创建时间(单位:smhdw)搜索</td></tr><tr><td>-atime</td><td>根据被访问时的时间间隔(单位:smhdw)搜索</td></tr><tr><td>-mmin</td><td>n分钟以(-n:内，+n:外)内修改的文件</td></tr><tr><td>-mindepth</td><td>从n级子目录开始搜索,最多搜索到n-1级子目录</td></tr><tr><td>-depth</td><td>检索深度为 n 的文件，即位于指定目录以下 n 层的文件</td></tr><tr><td>-empty</td><td>检索空文件或空目录</td></tr><tr><td>-perm</td><td>根据文件权限搜索</td></tr><tr><td>-ls</td><td>打印搜索到的文件的详细信息</td></tr><tr><td>-delete</td><td>删除检索到的文件</td></tr><tr><td>-exec</td><td>对搜索的文件常用操作(“-exec”和”-ok”相似，对文件执行特定的操作，”-ok”得到确认命令后，才会执行；-print打印输出)</td></tr></tbody></table><h4><span id="12-locate命令">1.2 locate命令</span></h4><ol start="2"><li><code>locate</code>命令，不同于find命令是在整块磁盘中搜索，locate命令是在数据库文件中查找<ul><li>find是默认全局匹配，locate则是默认部分匹配</li><li>文件更新后，用updatedb命令把文件更新到数据库(默认是第二天系统才会自动更新到数据库)，否则locate查找不到</li></ul></li></ol><h4><span id="13-whereis命令">1.3 whereis命令</span></h4><ol start="3"><li><code>whereis</code>命令，只能用于程序名的搜索<ul><li>命令参数：二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</li></ul></li></ol><h4><span id="14-which命令">1.4 which命令</span></h4><ol start="4"><li><code>which</code>命令，仅查找二进制程序文件</li></ol><h3><span id="2-linux文本处理三剑客">2. Linux文本处理三剑客</span></h3><p>文本处理三剑客工具<code>grep</code>，<code>sed</code>和<code>awk</code>都是基于行处理的，它们会一行行读入数据，处理完一行之后再处理下一行。</p><h4><span id="21-文件处理三剑客之grep">2.1 文件处理三剑客之grep</span></h4><p><code>grep</code>命令，用于查找文件里符合条件的字符串。</p><ul><li>语法格式：<ul><li>语法1：<code>grep [option] [ pattern] [file1, file2..]</code></li><li>语法2：<code>command | grep [option] [pattern]</code></li></ul></li></ul><table><thead><tr><th>选项(option)</th><th>解析</th></tr></thead><tbody><tr><td>-v</td><td>不显示匹配行信息</td></tr><tr><td>-i</td><td>搜索时忽略大小写</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-r</td><td>递归搜索</td></tr><tr><td>-E</td><td>支持扩展正则表达式</td></tr><tr><td>-F</td><td>不按正则表达式匹配，按照字符串字面意思匹配</td></tr><tr><td>-c</td><td>只显示匹配行总数</td></tr><tr><td>-w</td><td>匹配整词</td></tr><tr><td>-x</td><td>匹配整行</td></tr><tr><td>-l</td><td>只显示文件名，不显示内容</td></tr><tr><td>-s</td><td>不显示错误信息</td></tr></tbody></table><ul><li><code>grep</code>和<code>egrep</code><ul><li><code>grep</code>默认不支持扩展正则表达式，只支持基础正则表达式</li><li>使用<code>grep-E</code>可以支持扩展正则表达式使用</li><li><code>egrep</code>可以支持扩展正则表达式，与<code>grep-E</code>等价</li></ul></li></ul><h4><span id="22-文件处理三剑客之sed">2.2 文件处理三剑客之sed</span></h4><p><code>sed</code>（Stream Editor），流编辑器。对标准输出或文件逐行进行处理</p><ul><li>语法格式：<ul><li>语法1：<code>stdout |sed [option] &quot;pattern command&quot;</code></li><li>语法2：<code>sed [option] &quot;pattern command&quot; file</code></li></ul></li></ul><h5><span id="221-sed选项">2.2.1 sed选项</span></h5><table><thead><tr><th>选项(option)</th><th>解析</th></tr></thead><tbody><tr><td>-n</td><td>只打印模式匹配行</td></tr><tr><td>-e</td><td>直接在命令行进行sed编辑，默认选项</td></tr><tr><td>-f</td><td>编辑动作保存在文件中，指定文件执行</td></tr><tr><td>-r</td><td>支持扩展正则表达式</td></tr><tr><td>-i</td><td>直接修改文件内容</td></tr></tbody></table><h5><span id="222-sed匹配模式">2.2.2 sed匹配模式</span></h5><table><thead><tr><th>匹配模式(pattern)</th><th>解析</th></tr></thead><tbody><tr><td>10command</td><td>匹配到第10行</td></tr><tr><td>10,20command</td><td>匹配从第10行开始，到第20行结束10，</td></tr><tr><td>10,+5command</td><td>匹配从第10行开始，到第16行结束</td></tr><tr><td>/pattern1/command</td><td>匹配到pattern1的行</td></tr><tr><td>/pattern1/,/pattern2/command</td><td>匹配到pattern1的行开始，到匹配到patern2的行结束</td></tr><tr><td>10,/pattern1/command</td><td>匹配从第10行开始，到匹配到pettern1的行结束</td></tr><tr><td>/pattern1/,10command</td><td>匹配到pattern1的行开始，到第10行匹配结束</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件的第17行</span></span><br><span class="line">sed -n &quot;17p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印文件的10到20行</span></span><br><span class="line">sed -n &quot;10,20p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件中从第10行开始，往后面加5行</span></span><br><span class="line">sed -n &quot;10,+5p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件中以root开头的行</span></span><br><span class="line">sed -n &quot;/^root/p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件中第一个匹配到以ftp开头的行，到mail开头的行结束</span></span><br><span class="line">sed -n &quot;/^ftp/,/^mail/p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件中从第4行开始匹配，直到以hdfs开头的行结束</span></span><br><span class="line">sed -n &quot;4,/^hdfs/p&quot; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印test.txt文件中匹配root的行，直到第10行结束</span></span><br><span class="line">sed -n &quot;/root/,10p&quot;test.txt</span><br></pre></td></tr></table></figure><h5><span id="223-sed中的编辑命令">2.2.3 sed中的编辑命令</span></h5><table><thead><tr><th>编辑命令</th><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>p</td><td>查询</td><td>打印</td></tr><tr><td>=</td><td>查询</td><td>只显示行号</td></tr><tr><td>a</td><td>增加</td><td>行后追加</td></tr><tr><td>i</td><td>增加</td><td>行前追加</td></tr><tr><td>r</td><td>增加</td><td>外部文件读入，行后追加</td></tr><tr><td>w</td><td>增加</td><td>匹配行写入外部文件</td></tr><tr><td>d</td><td>删除</td><td>删除</td></tr><tr><td>s/old/new</td><td>修改</td><td>将行内第一个old替换为new</td></tr><tr><td>s/old/new/g</td><td>修改</td><td>将行内全部的old替换为new</td></tr><tr><td>s/old/new/2g</td><td>修改</td><td>将行内从第2个old开始到剩下所有的old替换为new</td></tr><tr><td>s/old/new/ig</td><td>修改</td><td>将行内全部的old替换为new，忽略大小写</td></tr></tbody></table><p><strong>反向引用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ cat abc.txt</span><br><span class="line">First Line</span><br><span class="line">Second haha</span><br><span class="line">[cmuser@localhost test]$ sed -i &#x27;s/Sec..d/&amp;s/g&#x27; abc.txt</span><br><span class="line">[cmuser@localhost test]$ cat abc.txt</span><br><span class="line">First Line</span><br><span class="line">Seconds haha</span><br><span class="line">[cmuser@localhost test]$ sed -i &#x27;s/\(Sec..ds\)/\10/g&#x27; abc.txt</span><br><span class="line">[cmuser@localhost test]$ cat abc.txt</span><br><span class="line">First Line</span><br><span class="line">Seconds0 haha</span><br><span class="line">[cmuser@localhost test]$ sed -i &#x27;s/\(Sec\)...../\1FFFFFFFFFF/g&#x27; abc.txt</span><br><span class="line">[cmuser@localhost test]$ cat abc.txt</span><br><span class="line">First Line</span><br><span class="line">SecFFFFFFFFFF haha</span><br></pre></td></tr></table></figure><ul><li><p><code>&amp;</code>和<code>\1</code>引用模式匹配到的整个串</p><ul><li>两者区别在于只能表示匹配到的完整字符串，只能引用整个字符串；而<code>\1</code>可以使用<code>()</code>匹配到的字符</li></ul></li><li><p>sed中引用变量时注意事项：</p><ol><li>匹配模式中存在变量，则建议使用双引号</li><li>sed中需要引入自定义变量时，如果外面使用单引号，则自定义变量也必须使用单引号</li></ol></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ old_str=First</span><br><span class="line">[cmuser@localhost test]$ new_str=One</span><br><span class="line">[cmuser@localhost test]$ sed -i &quot;s/$old_str&quot;/&quot;$new_str/g&quot; abc.txt</span><br><span class="line">[cmuser@localhost test]$ cat abc.txt</span><br><span class="line">One Line</span><br><span class="line">SecFFFFFFFFFF haha</span><br></pre></td></tr></table></figure><h5><span id="224-sed实例">2.2.4 sed实例</span></h5><ol><li>sed查找文件内容（处理一个MySQL配置文件my.cnf的文本，示例如下；编写脚本实现以下功能：输出文件有几个段，并且针对每个段可以统计配置参数总个数）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@caimeidev1 test]$ vim test1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FILE_NAME=/etc/my.cnf</span><br><span class="line"></span><br><span class="line">function get_all_segments &#123;</span><br><span class="line">    echo &quot;`sed -n &#x27;/\[.*\]/p&#x27; $FILE_NAME |sed -e &#x27;s/\[//g&#x27; -e &#x27;s/\]//g&#x27;`&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function count_items_in_segment &#123;</span><br><span class="line">    echo &quot;`sed -n &#x27;/\[&#x27;$1&#x27;\]/,/\[.*\]/p&#x27; $FILE_NAME  | grep -v ^# |grep -v ^$ |grep -v &quot;\[.*\]&quot; |wc -l `&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num=0</span><br><span class="line">for seg in `get_all_segments`</span><br><span class="line">do</span><br><span class="line">    num=`expr $num + 1`</span><br><span class="line">    items_count=`count_items_in_segment $seg`</span><br><span class="line">    echo &quot;$num:$seg  $items_count&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>输出结果：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@caimeidev1 test]$ ./test1.sh</span><br><span class="line">1:mysqld  9</span><br><span class="line">2:mysqld_safe  2</span><br><span class="line">3:mysql  1</span><br><span class="line">4:client  1</span><br></pre></td></tr></table></figure></li><li>sed删除和修改文件内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除文件中的所有注释行和空行</span></span><br><span class="line">sed -i &#x27;/[:blank:]*#/d;/^$/d&#x27; nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在配置文件中所有不以<span class="comment">#开头的行前面添加*符号，注意：以#开头的行不添加</span></span></span><br><span class="line">sed -i &#x27;s/^[^#]/\*&amp;/g&#x27; nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中第1行中第1个root为ROOT</span></span><br><span class="line">sed -i &#x27;1s/root/ROOT/&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中第5行到第10行中所有的/sbin/nologin为/bin/bash</span></span><br><span class="line">sed -i &#x27;5,10s/\/sbin\/nologin/\/bin\/bash/g&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中匹配到/sbin/nologin的行，将匹配到行中的login改为大写的LOGIN</span></span><br><span class="line">sed -i &#x27;/\/sbin\/nologin/s/login/LOGIN/g&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中从匹配到以root开头的行，到匹配到行中包含mail的所有行。修改内为将这些所有匹配到的行中的bin改为HADOOP</span></span><br><span class="line">sed -i &#x27;/^root/,/mail/s/bin/HADOOP/g&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中从匹配到以root开头的行，到第15行中的所有行，修改内容为将这些行中的nologin修改为SPARK</span></span><br><span class="line">sed -i &#x27;/^root/,15s/nologin/SPARK/g&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改/etc/passwd中从第15行开始，到匹配到以yarn开头的所有行，修改内容为将这些行中的bin换位BIN</span></span><br><span class="line">sed -i &#x27;15,/^yarn/s/bin/BIN/g&#x27; passwd </span><br></pre></td></tr></table></figure><ol start="3"><li>sed追加文件内容（a:在匹配行后面追加，i:在匹配行前面追加，r:将文件内容追加到匹配行后面，w:将匹配行写入指定文件）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> a:在匹配行后面追加</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (1)、passwd文件第10行后面追加<span class="string">&quot;Add Line Behind&quot;</span></span></span><br><span class="line">sed -i &#x27;10a Add Line Begind&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (2)、passwd文件第10行到第20行，每一行后面都追加<span class="string">&quot;Test Line Behind&quot;</span></span></span><br><span class="line">sed -i &#x27;10,20a Test Line Behind&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (3)、passwd文件匹配到/bin/bash的行后面追加<span class="string">&quot;Insert Line For /bin/bash Behind&quot;</span></span></span><br><span class="line">sed -i &#x27;/\/bin\/bash/a Insert Line For /bin/bash Behind&#x27; passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> i:在匹配行前面追加</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (1)、passwd文件匹配到以yarn开头的行，在匹配行前面追加<span class="string">&quot;Add Line Before&quot;</span></span></span><br><span class="line">sed -i &#x27;/^yarn/i Add Line Before&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (2)、passwd文件每一行前面都追加<span class="string">&quot;Insert Line Before Every Line&quot;</span></span></span><br><span class="line">sed -i &#x27;i Insert Line Before Every Line&#x27; passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> r:将文件内容追加到匹配行后面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (1)、将/etc/fstab文件的内容追加到passwd文件的第20行后面</span></span><br><span class="line">sed -i &#x27;20r /etc/fstab&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (2)、将/etc/inittab文件内容追加到passwd文件匹配/bin/bash行的后面</span></span><br><span class="line">sed -i &#x27;/\/bin\/bash/r /etc/inittab&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (3)、将/etc/vconsole.conf文件内容追加到passwd文件中特定行后面，匹配以ftp开头的行，到第18行的所有行</span></span><br><span class="line">sed -i &#x27;//,18r /etc/vconsole.conf&#x27; passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> w:将匹配行写入指定文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (1)、将passwd文件匹配到/bin/bash的行追加到/tmp/sed.txt文件中</span></span><br><span class="line">sed -i &#x27;/\/bin\/bash/w /tmp/sed.txt&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> (2)、将passwd文件从第10行开始，到匹配到hdfs开头的所有行内容追加到/tmp/sed-1.txt</span></span><br><span class="line">sed -i &#x27;10,/^hdfs/w /tmp/sed-1.txt&#x27; passwd</span><br></pre></td></tr></table></figure><h4><span id="23-文件处理三剑客之awk">2.3 文件处理三剑客之awk</span></h4><p><code>awk</code>是一个文本处理工具，通常用于处理数据并生成结果报告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;&#125; pattern&#123;commands&#125;END&#123;&#125;&#x27; file_name</span><br><span class="line">standard output | awk &#x27;BEGIN&#123;&#125;pattern&#123;commands&#125;END&#123;&#125;&#x27;</span><br></pre></td></tr></table></figure><table><thead><tr><th>语法格式</th><th>解析</th></tr></thead><tbody><tr><td>BEGIN{}</td><td>正式处理数据之前执行</td></tr><tr><td>pattern</td><td>匹配模式</td></tr><tr><td>{commands}</td><td>处理命令，可能多行</td></tr><tr><td>END{}</td><td>处理完所有匹配数据后执行</td></tr></tbody></table><h5><span id="231-awk内置变量">2.3.1 awk内置变量</span></h5><table><thead><tr><th>内置变量</th><th>解析</th></tr></thead><tbody><tr><td>$0</td><td>打印行所有信息</td></tr><tr><td>$1~$n</td><td>打印行的第1到n个字段的信息</td></tr><tr><td>NF</td><td>Number Field 处理行的字段个数</td></tr><tr><td>NR</td><td>Number Row 处理行的行号，从1开始计数</td></tr><tr><td>FNR</td><td>File Number Row 多文件处理时，每个文件单独记录行号，都是从0康凯斯</td></tr><tr><td>FS</td><td>Field Separator 字段分割符，不指定时默认以空格或tab键分割</td></tr><tr><td>RS</td><td>Row Separator 行分隔符，不指定时以回车分割\n</td></tr><tr><td>OFS</td><td>Output Filed Separator 输出字段分隔符。</td></tr><tr><td>ORS</td><td>Output Row Separator 输出行分隔符</td></tr><tr><td>FILENAME</td><td>处理文件的文件名</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ awk &#x27;&#123;print $0&#125;&#x27; abc.txt</span><br><span class="line">One Line</span><br><span class="line">SecFFFFFFFFFF haha</span><br><span class="line">[cmuser@localhost test]$ awk &#x27;&#123;print $1&#125;&#x27; abc.txt</span><br><span class="line">One</span><br><span class="line">SecFFFFFFFFFF</span><br><span class="line">[cmuser@localhost test]$ awk &#x27;&#123;print NR&#125;&#x27; abc.txt</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5><span id="232-awk格式化输出之printf">2.3.2 awk格式化输出之printf</span></h5><table><thead><tr><th>格式符</th><th>解析</th></tr></thead><tbody><tr><td>%s</td><td>打印字符串</td></tr><tr><td>%d</td><td>打印10进制数</td></tr><tr><td>%f</td><td>打印浮点数</td></tr><tr><td>%x</td><td>打印16进制数</td></tr><tr><td>%o</td><td>打印8进制数</td></tr><tr><td>%e</td><td>打印数字的科学计数法格式</td></tr><tr><td>%c</td><td>打印单个字符的ASCII码</td></tr></tbody></table><table><thead><tr><th>修饰符</th><th>解析</th></tr></thead><tbody><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>右对齐</td></tr><tr><td>#</td><td>显示8进制在前面加o，显示16进制在前面加0x</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、以字符串格式打印/etc/passwd中的第7个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%s\n&quot;,$7&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、以10进制格式打印/etc/passwd中的第3个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%d\n&quot;,$3&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、以浮点数格式打印/etc/passwd中的第3个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%0.3f\n&quot;,$3&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、以16进制数格式打印/etc/passwd中的第3个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%#x\n&quot;,$3&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、以8进制数格式打印/etc/passwd中的第3个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%#o\n&quot;,$3&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、以科学计数法格式打印/etc/passwd中的第3个字段，以<span class="string">&quot;:&quot;</span>作为分隔符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;printf &quot;%e\n&quot;,$3&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><h5><span id="233-awk模式匹配的两种用法">2.3.3 awk模式匹配的两种用法</span></h5><ul><li><code>awk</code>模式匹配：<ol><li><code>RegExp</code>：按正则表达式匹配</li><li><code>关系运算匹配</code>：按关系运算匹配</li></ol></li></ul><ol><li>RegExp(正则表达式匹配)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匹配/etc/passwd文件行中含有root字符串的所有行</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;/root/&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匹配/etc/passwd文件行中以yarn开头的所有行</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;/^yarn/&#123;print $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><ol start="2"><li>运算符匹配(<code>&lt;</code>:小于，<code>&gt;</code>:大于，<code>&lt;=</code>:小于等于，<code>&gt;=</code>:大于等于，<code>==</code>:等于，<code>!=</code>:不等于，<code>~</code>:匹配正则表达式，<code>!~</code>:不匹配正则表达式)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中第3个字段小于50的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$3&lt;50&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中第3个字段大于50的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$3&gt;50&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中第7个字段为/bin/bash的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$7==&quot;/bin/bash&quot;&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中第7个字段不为/bin/bash的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$7!=&quot;/bin/bash&quot;&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd中第3个字段包含3个以上数字的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$3~/[0-9]&#123;3,&#125;/&#123;print $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><ol start="3"><li>布尔运算符匹配(<code>||</code>:或，<code>&amp;&amp;</code>:与，<code>!</code>:非)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中包含hdfs或yarn的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$1==&quot;hdfs&quot; || $1==&quot;yarn&quot; &#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，匹配/etc/passwd文件中第3个字段小于50并且第4个字段大于50的所有行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;$3&lt;50 &amp;&amp; $4&gt;50 &#123;print $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><h5><span id="234-awk表达式用法">2.3.4 awk表达式用法</span></h5><table><thead><tr><th>运算符</th><th>解析</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>%</code></td><td>模</td></tr><tr><td><code>^</code>或<code>**</code></td><td>乘方</td></tr><tr><td><code>++x</code></td><td>在返回x变量之前，×变量加1</td></tr><tr><td><code>X++</code></td><td>在返回x变量之后，×变量加1</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用awk计算/etc/services中的空白行数量</span></span><br><span class="line">awk &#x27;/^$/&#123;sum++&#125;END&#123;print sum&#125;&#x27; /etc/services</span><br></pre></td></tr></table></figure><h5><span id="235-awk动作中的条件及循环语句">2.3.5 awk动作中的条件及循环语句</span></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以:为分隔符，只打印/etc/passwd中第3个字段的数值在50-100范围内的行信息</span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;&#123;</span><br><span class="line">    if($3&lt;50)&#123; </span><br><span class="line">        printf &quot;%-20s%-20s%-5d\n&quot;,&quot;小于50的UID&quot;,$1,$3</span><br><span class="line">    &#125; else if($3&gt;100) &#123;</span><br><span class="line">        printf &quot;%-20s%-20s%-5d\n&quot;,&quot;大 于100的UID&quot;,$1,$3</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        printf &quot;%-20s%-20s%-5d\n&quot;,&quot;大于50 小于100的UID&quot;,$1,$3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><h5><span id="236-awk中的字符串函数">2.3.6 awk中的字符串函数</span></h5><table><thead><tr><th>函数名</th><th>解析</th></tr></thead><tbody><tr><td>length(str)</td><td>计算长度</td></tr><tr><td>index(str1,str2)</td><td>返回在str1中查询到的str2的位置</td></tr><tr><td>tolower(str)</td><td>小写转换</td></tr><tr><td>toupper(str)</td><td>大写转换</td></tr><tr><td>split(str,arr,fs)</td><td>分隔字符串，并保存到数组中</td></tr><tr><td>match(str,RE)</td><td>返回正则表达式匹配到的子串的位置</td></tr><tr><td>substr(str,m,n)</td><td>截取子串，从m个字符开始，截取n位。n若不指定，则默认截取到字符串尾</td></tr><tr><td>sub(RE,RepStr,str)</td><td>替换查找到的第一个子串</td></tr><tr><td>gsub(RE,RepStr,str)</td><td>替换查找到的所有子串</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索字符串<span class="string">&quot;I have a dream&quot;</span>中出现<span class="string">&quot;ea&quot;</span>子串的位置</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;I hava a dream&quot;;location=index(str,&quot;ea&quot;);print location&#125;</span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;I hava a dream&quot;;location=match(str,&quot;ea&quot;);print location&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将字符串<span class="string">&quot;Hadoop is a bigdata Framawork&quot;</span>全部转换为小写</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Hadoop is a bigdata Framework&quot;;print tolower(str)&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将字符串<span class="string">&quot;Hadoop is a bigdata Framawork&quot;</span>全部转换为大写</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Hadoop is a bigdata Framework&quot;;print toupper(str)&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将字符串<span class="string">&quot;Hadoop Kafka Spark Storm HDFS YARN Zookeeper&quot;</span>，按照空格为分隔符，分隔每部分保存到数组array中</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Hadoop Kafka Spark Storm HDFS YARN Zookeeper&quot;;split(str,arr,&quot; &quot;);for(a in arr) print arr[a]&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索字符串<span class="string">&quot;Tranction 2345 Start:Select * from master&quot;</span>第一个数字出现的位置</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Tranction 2345 Start:Select * from master&quot;;location=match(str,/[0-9]/);print location&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取字符串<span class="string">&quot;transaction start&quot;</span>的子串，截取条件从第4个字符开始，截取5位</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;transaction start&quot;;print substr(str,4,5)&#125;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换字符串<span class="string">&quot;Tranction 243 Start,Event ID:9002&quot;</span>中第一个匹配到的数字串为$符号</span></span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Tranction 243 Start,Event ID:9002&quot;;count=sub(/[0-9]+/,&quot;$&quot;,str);print count,str&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;str=&quot;Tranction 243 Start,Event ID:9002&quot;;count=gsub(/[0-9]+/,&quot;$&quot;,str);print count,str&#125;&#x27;</span><br></pre></td></tr></table></figure><h5><span id="237-awk的常用选项">2.3.7 awk的常用选项</span></h5><table><thead><tr><th>选项</th><th>解析</th></tr></thead><tbody><tr><td>-v</td><td>参数传递</td></tr><tr><td>-f</td><td>指定脚本文件</td></tr><tr><td>-F</td><td>指定分隔符</td></tr><tr><td>-V</td><td>查看awk的版本号</td></tr></tbody></table><h5><span id="238-awk中数组的用法">2.3.8 awk中数组的用法</span></h5><p>在awk中，使用数组时，不仅可以使用1.2…n作为数组下标，也可以使用字符串作为数组下标。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印元素：</span></span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印元素个数：</span></span><br><span class="line">echo $&#123;#array[@]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印元素长度：</span></span><br><span class="line">echo $&#123;#array[3]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给元素赋值：</span></span><br><span class="line">array[3]=&quot;Li&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除元素：</span></span><br><span class="line">unset array[2];unset array</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分片访问：</span></span><br><span class="line">echo $&#123;array[@]:1:3&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 元素内容替换：</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array[@]/e/E&#125;只替换第一个e；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">tarray[@]//e/E&#125;替换所有的e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组的遍历：</span></span><br><span class="line">for a in array </span><br><span class="line">do</span><br><span class="line">echo $a </span><br><span class="line">done </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用字符串作为数组下标</span></span><br><span class="line">array[&quot;var1&quot;]=&quot;Jin&quot;</span><br><span class="line">array[&quot;var2&quot;]=&quot;Hao&quot;</span><br><span class="line">array[&quot;var3&quot;]=&quot;Fang&quot;</span><br><span class="line">for(a in array)</span><br><span class="line">print array[a]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 统计主机上所有的TCP连接状态数，按照每个TCP状态分类</span></span><br><span class="line">netstat -an | grep tcp | awk &#x27;&#123;array[$6]++&#125; END&#123;for(a in array) print a,array[a]&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-文件查找命令&quot;&gt;&lt;a href=&quot;#1-文件查找命令&quot; class=&quot;headerlink&quot; title=&quot;1. 文件查找命令&quot;&gt;&lt;/a&gt;1. 文件查找命令&lt;/h3&gt;&lt;h4 id=&quot;1-1-find命令&quot;&gt;&lt;a href=&quot;#1-1-find命令&quot; class=&quot;headerlink&quot; title=&quot;1.1 find命令&quot;&gt;&lt;/a&gt;1.1 find命令&lt;/h4&gt;&lt;p&gt;语法格式：&lt;code&gt;find 搜索路径 [选项] 搜索内容&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="shell编程" scheme="http://chaooo.github.io/categories/shell/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>shell编程入门（三）函数的用法</title>
    <link href="http://chaooo.github.io/article/20201117.html"/>
    <id>http://chaooo.github.io/article/20201117.html</id>
    <published>2020-11-17T04:22:01.000Z</published>
    <updated>2021-02-03T13:49:26.252Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-shell-函数定义">1. Shell 函数定义</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function name() &#123;</span><br><span class="line">    # 函数要执行的代码</span><br><span class="line">    [return value]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的简化写法可以省略<code>function</code>或<code>()</code>之一，不过还是推荐标准写法，才能做到做到“见名知意”。</p><a id="more"></a><h3><span id="2-shell函数调用">2. Shell函数调用</span></h3><p>调用 Shell 函数时可以给它传递参数，也可以不传递。如果不传递参数，直接给出函数名字即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name</span><br></pre></td></tr></table></figure><p>如果传递参数，那么多个参数之间以空格分隔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name param1 param2 param3</span><br></pre></td></tr></table></figure><ul><li>不管是哪种形式，函数名字后面都不需要带括号。</li><li>和其它编程语言不同的是，Shell 函数在定义时不能指明参数，但是在调用时却可以传递参数，并且给它传递什么参数它就接收什么参数。</li><li>Shell 也不限制定义和调用的顺序，你可以将定义放在调用的前面，也可以反过来，将定义放在调用的后面。</li></ul><p>定义一个函数，计算所有参数的和：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost ~]$ #!/bin/bash</span><br><span class="line">[cmuser@localhost ~]$ function getsum()&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">local</span> sum=0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         ((sum+=n))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">return</span> <span class="variable">$sum</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;</span></span><br><span class="line">[cmuser@localhost ~]$ getsum 10 20 55 15</span><br><span class="line">[cmuser@localhost ~]$ echo $?</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h3><span id="3-shell函数参数">3. Shell函数参数</span></h3><p>函数参数是 Shell 位置参数的一种，在函数内部可以使用<code>$n</code>来接收，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数，依次类推。</p><p>除了<code>$n</code>，还有另外三个比较重要的变量：</p><ul><li><code>$#</code>可以获取传递的参数的个数；</li><li><code>$@</code>或者<code>$*</code>可以一次性获取所有的参数。</li></ul><p>使用 $n 来接收函数参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost ~]$ #!/bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义函数</span></span><br><span class="line">[cmuser@localhost ~]$ function show()&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="string">&quot;Tutorial: <span class="variable">$1</span>&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="string">&quot;URL: <span class="variable">$2</span>&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="string">&quot;Author: &quot;</span><span class="variable">$3</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="string">&quot;Total <span class="variable">$#</span> parameters&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">[cmuser@localhost ~]$ show test www.test.com Tom</span><br><span class="line">Tutorial: test</span><br><span class="line">URL: www.test.com</span><br><span class="line">Author: Tom</span><br><span class="line">Total 3 parameters</span><br></pre></td></tr></table></figure><p>使用 $@ 来遍历函数参数，计算所有参数的和：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost ~]$ #!/bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义函数</span></span><br><span class="line">[cmuser@localhost ~]$ function getsum()&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">local</span> sum=0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         ((sum+=n))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="variable">$sum</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">return</span> 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">[cmuser@localhost ~]$ echo $(getsum 10 20 55 15)</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h3><span id="4-shell函数返回值">4. Shell函数返回值</span></h3><p>Shell中的<code>return</code>返回值表示的是函数的退出状态：返回值为<code>0</code>表示函数执行成功了，返回值为<code>非 0 </code>表示函数执行失败（出错）了。if、while、for 等语句都是根据函数的退出状态来判断条件是否成立。</p><p>Shell 函数的返回值只能是一个介于<code>0~255</code>之间的整数，其中只有<code>0</code>表示成功，其它值都表示失败。</p><p>如果函数体中没有return语句，那么使用默认的退出状态，也就是最后一条命令的退出状态。更加严谨的写法为：<code>return $?</code>。<br>$?是一个特殊变量，用来获取上一个命令的退出状态，或者上一个函数的返回值。</p><ul><li>如何得到函数的处理结果？<ol><li>借助全局变量，将得到的结果赋值给全局变量；</li><li>在函数内部使用 <code>echo</code>、<code>printf</code> 命令将结果输出，在函数外部使用<code>$()</code>或者<code>`</code>捕获结果。</li></ol></li></ul><p>具体来定义一个函数 getsum，计算从 m 加到 n 的和，并使用以上两种解决方案。</p><ol><li>【实例1】将函数处理结果赋值给一个全局变量。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost ~]$ #!/bin/bash</span><br><span class="line">[cmuser@localhost ~]$ sum=0                # 全局变量</span><br><span class="line">[cmuser@localhost ~]$ function getsum()&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">for</span>((i=<span class="variable">$1</span>; i&lt;=<span class="variable">$2</span>; i++)); <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         ((sum+=i))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">return</span> $?                            <span class="comment"># 返回上一条命令的退出状态</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;</span></span><br><span class="line">[cmuser@localhost ~]$ getsum 1 100</span><br><span class="line">[cmuser@localhost ~]$ echo &quot;The sum is $sum&quot; # 输出全局变量</span><br><span class="line">The sum is 5050</span><br></pre></td></tr></table></figure><ol start="2"><li>【实例2】在函数内部使用 echo 输出结果。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost ~]$ function getsum()&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">local</span> sum=0                         <span class="comment"># 局部变量</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">for</span>((i=<span class="variable">$1</span>; i&lt;=<span class="variable">$2</span>; i++)); <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         ((sum+=i))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">echo</span> <span class="variable">$sum</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">return</span> $?</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;</span></span><br><span class="line">[cmuser@localhost ~]$ echo &quot;The sum is &quot;$(getsum 1 100)</span><br><span class="line">The sum is 5050</span><br></pre></td></tr></table></figure>代码中总共执行了两次 <code>echo</code> 命令，但是却只输出一次，这是因为<code>$()</code>捕获了第一个 <code>echo</code> 的输出结果，它并没有真正输出到终端上。除了<code>$()</code>，你也可以使用<code>`</code>来捕获 <code>echo</code> 的输出结果。</li></ol><h3><span id="5-shell函数库的使用">5. Shell函数库的使用</span></h3><p>shell函数库实质为一个脚本，脚本内包含了多个函数（函数具有普遍适用性），经常使用的重复代码封装成库函数文件。</p><p>库函数一般不直接执行，而是由其他脚本调用，库函数文件名的后缀是任意的，但一般使用<code>.lib</code>，库文件通常没有可执行权限。</p><p>第一行一般使用#!/bin/echo，输出警告信息，避免用户执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ vim base.lib </span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/<span class="built_in">echo</span></span></span><br><span class="line"></span><br><span class="line">add()&#123;</span><br><span class="line">    echo &quot;$(expr $1 + $2)&quot;</span><br><span class="line">&#125;</span><br><span class="line">reduce()&#123;</span><br><span class="line">    echo &quot;$(expr $1 - $2)&quot;</span><br><span class="line">&#125;</span><br><span class="line">multiple()&#123;</span><br><span class="line">    echo &quot;$(expr $1 \* $2)&quot;</span><br><span class="line">&#125;</span><br><span class="line">divide()&#123;</span><br><span class="line">    echo &quot;$(expr $1 / $2)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ vim calculate.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载函数库文件</span></span><br><span class="line">source ./base</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数，传入参数</span></span><br><span class="line">add $1 $2</span><br><span class="line">reduce $1 $2</span><br><span class="line">multiple $1 $2</span><br><span class="line">divide $1 $2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[cmuser@localhost test]$ sh calculate.sh 40 5</span><br><span class="line">45</span><br><span class="line">35</span><br><span class="line">200</span><br><span class="line">8</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Shell-函数定义&quot;&gt;&lt;a href=&quot;#1-Shell-函数定义&quot; class=&quot;headerlink&quot; title=&quot;1. Shell 函数定义&quot;&gt;&lt;/a&gt;1. Shell 函数定义&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function name() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 函数要执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [return value]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数的简化写法可以省略&lt;code&gt;function&lt;/code&gt;或&lt;code&gt;()&lt;/code&gt;之一，不过还是推荐标准写法，才能做到做到“见名知意”。&lt;/p&gt;</summary>
    
    
    
    <category term="shell编程" scheme="http://chaooo.github.io/categories/shell/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>shell编程入门（二）变量的用法与数学运算</title>
    <link href="http://chaooo.github.io/article/20201116.html"/>
    <id>http://chaooo.github.io/article/20201116.html</id>
    <published>2020-11-16T02:32:01.000Z</published>
    <updated>2021-02-03T13:49:45.229Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-变量替换">1. 变量替换</span></h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;变量#匹配规则&#125;</code></td><td>从变量<strong>开头</strong>进行规则匹配，将符合<strong>最短</strong>的数据删除</td></tr><tr><td><code>$&#123;变量##匹配规则&#125;</code></td><td>从变量<strong>开头</strong>进行规则匹配，将符合<strong>最长</strong>的数据删除【贪婪模式】</td></tr><tr><td><code>$&#123;变量%匹配规则&#125;</code></td><td>从变量<strong>尾部</strong>进行规则匹配，将符合<strong>最短</strong>的数据删除</td></tr><tr><td><code>$&#123;变量%%匹配规则&#125;</code></td><td>从变量<strong>尾部</strong>进行规则匹配，将符合<strong>最长</strong>的数据删除【贪婪模式】</td></tr><tr><td><code>$&#123;变量/旧字符串/新字符串&#125;</code></td><td>变量内容符合旧字符串，则<strong>第一个</strong>旧字符串会被新字符串取代</td></tr><tr><td><code>$&#123;变量//旧字符串/新字符串&#125;</code></td><td>变量内容符合旧字符串，则<strong>全部的</strong>旧字符串会被新字符串取代</td></tr></tbody></table><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ var1=&quot;I love you, Do you love me&quot;</span><br><span class="line">[chao@localhost ~]$ echo $var1</span><br><span class="line">I love you, Do you love me</span><br><span class="line"><span class="meta">#</span><span class="bash"> 头部匹配删除</span></span><br><span class="line">[chao@localhost ~]$ var2=$&#123;var1#*ov&#125;</span><br><span class="line">[chao@localhost ~]$ echo $var2</span><br><span class="line">e you, Do you love me</span><br><span class="line">[chao@localhost ~]$ var3=$&#123;var1##*ov&#125;  # 贪婪模式</span><br><span class="line">[chao@localhost ~]$ echo $var3</span><br><span class="line">e me</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尾部匹配删除</span></span><br><span class="line">[chao@localhost ~]$ var4=$&#123;var1%ov*&#125;</span><br><span class="line">[chao@localhost ~]$ echo $var4</span><br><span class="line">I love you, Do you l</span><br><span class="line">[chao@localhost ~]$ var5=$&#123;var1%%ov*&#125;  # 贪婪模式</span><br><span class="line">[chao@localhost ~]$ echo $var5</span><br><span class="line">I l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换</span></span><br><span class="line">[chao@localhost ~]$ var6=$&#123;var1/love/hate&#125;</span><br><span class="line">[chao@localhost ~]$ echo $var6</span><br><span class="line">I hate you, Do you love me</span><br><span class="line">[chao@localhost ~]$ var7=$&#123;var1//love/hate&#125;</span><br><span class="line">[chao@localhost ~]$ echo $var7</span><br><span class="line">I hate you, Do you hate me</span><br></pre></td></tr></table></figure><h3><span id="2-字符串相关操作">2. 字符串相关操作</span></h3><ol><li>计算字符串的长度</li></ol><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;#变量&#125;</code></td><td>-</td></tr><tr><td><code>expr length &quot;$变量&quot;</code></td><td>若字符串变量有空格，则必须加双引号</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ echo $&#123;#var1&#125;</span><br><span class="line">21</span><br><span class="line">[chao@localhost ~]$ echo `expr length &quot;$var1&quot;`</span><br><span class="line">21</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串其他操作</li></ol><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>expr index $变量 $子串(变量或值)</code></td><td>获取字符索引的位置，从字串的第一个字符开始匹配，只要有一个字符匹配到了就返回对应的坐标</td></tr><tr><td><code>expr match $变量 $子串</code></td><td>计算子串长度，从头开始匹配，若从头匹配不上，从中间任何一个位置匹配返回都是0，也就是未匹配到</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ echo `expr index &quot;$var1&quot; love`</span><br><span class="line">3</span><br><span class="line">[chao@localhost ~]$ echo `expr match &quot;$var1&quot; &quot;I love&quot;`</span><br><span class="line">6</span><br></pre></td></tr></table></figure><ol start="3"><li>抽取子串</li></ol><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;变量:下标&#125;</code></td><td>从变量中的指定下标开始</td></tr><tr><td><code>$&#123;变量:下标:length&#125;</code></td><td>从指定下标开始，匹配长度为length</td></tr><tr><td><code>$&#123;变量: -下标&#125;</code></td><td>从右边指定下标开始匹配 注意冒号和负号中间有空格</td></tr><tr><td><code>$&#123;变量:(下标)&#125;</code></td><td>从右边指定下标开始匹配</td></tr><tr><td><code>expr substr $变量 $下标 $length</code></td><td>从指定下标开始，匹配长度为length</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ echo $&#123;var1:10&#125;</span><br><span class="line">you love me</span><br><span class="line">[chao@localhost ~]$ echo $&#123;var1:10:5&#125;</span><br><span class="line">you l</span><br><span class="line">[chao@localhost ~]$ echo $&#123;var1: -4&#125;</span><br><span class="line">e me</span><br><span class="line">[chao@localhost ~]$ echo $&#123;var1:(-4)&#125;</span><br><span class="line">e me</span><br><span class="line">[chao@localhost ~]$ echo $&#123;var1:(-4):2&#125;</span><br><span class="line">e</span><br><span class="line">[chao@localhost ~]$ echo `expr substr &quot;$var1&quot; 10 5`</span><br><span class="line">you</span><br></pre></td></tr></table></figure><h3><span id="3-命令替换">3. 命令替换</span></h3><p>Shell命令替换是指将命令的输出结果赋值给某个变量，有两种方式：一种是反引号<code>`</code>，一种是$()。</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>变量=`命令`</code></td><td>可以只有一个命令，也可以有多个命令，多个命令之间以分号;分隔</td></tr><tr><td><code>变量=$(命令)</code></td><td>同上</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据系统时间计算今年或明年</span></span><br><span class="line">[chao@localhost ~]$ echo &quot;This is $(date +%Y) year&quot;</span><br><span class="line">This is 2020 year</span><br><span class="line">[chao@localhost ~]$ echo &quot;This is $(($(date +%Y) + 1)) year&quot;</span><br><span class="line">This is 2021 year</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：$()表示命令替换，仅有()表示计算 加减乘除</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 判定nginx进程是否存在，若不存在则自动拉起该进程</span></span><br><span class="line">ps -ef | grep nginx | grep -v grep | wc -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应脚本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> !/bin/bash</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">nginx_process_num=$(ps -ef | grep nginx | grep -v grep | wc -l)</span></span><br><span class="line">if [$nginx_process_num -eq 0 ];then</span><br><span class="line">systemctl start nginx</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3><span id="4-设置变量类型">4. 设置变量类型</span></h3><p>declare 和 typeset 都是 Shell 内建命令，它们的用法相同，都用来设置变量的属性。不过 typeset 已经被弃用了，建议使用 declare 代替。<br>declare 命令的用法：<code>declare [+/-] [选项] [变量名=变量值]</code>，其中，<code>-</code>表示设置属性，<code>+</code>表示取消属性，其具体含义如下表：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f [name]</td><td>列出之前由用户在脚本中定义的函数名称和函数体。</td></tr><tr><td>-F [name]</td><td>仅列出自定义函数名称。</td></tr><tr><td>-g name</td><td>在 Shell 函数内部创建全局变量。</td></tr><tr><td>-p [name]</td><td>显示指定变量的属性和值。</td></tr><tr><td>-a name</td><td>声明变量为普通数组。</td></tr><tr><td>-A name</td><td>声明变量为关联数组（支持索引下标为字符串）。</td></tr><tr><td>-i name</td><td>将变量定义为整数型。</td></tr><tr><td>-r name[=value]</td><td>将变量定义为只读（不可修改和删除），等价于 readonly name。</td></tr><tr><td>-x name[=value]</td><td>将变量设置为环境变量，等价于 export name[=value]。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">declare</span> -r 将变量设为只读，再赋值就会报错</span></span><br><span class="line">[chao@localhost ~]$ declare -r var=&quot;hello shell&quot;</span><br><span class="line">[chao@localhost ~]$ var=&quot;hello world&quot;</span><br><span class="line">-bash: var: 只读变量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">declare</span> -a 将变量定义为数组</span></span><br><span class="line">[chao@localhost ~]$ declare -a array</span><br><span class="line">[chao@localhost ~]$ array=(&quot;mike&quot; &quot;lilei&quot; &quot;hanmeimei&quot;)</span><br><span class="line">[chao@localhost ~]$ echo $&#123;array[0]&#125;</span><br><span class="line">mike</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分片访问</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从下标为 0 的位置开始，向后取 2个元素，忽略中间的空元素，直到取够 2个元素。如果元素不足2个，则输出后面的所有元素即可。</span></span><br><span class="line">[chao@localhost ~]$ echo $&#123;array[@]:0:2&#125;</span><br><span class="line">mike lilei</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容替换</span></span><br><span class="line">[chao@localhost ~]$ array1=$&#123;array[@]/ke/KE&#125;</span><br><span class="line">[chao@localhost ~]$ echo $array1</span><br><span class="line">miKE lilei hanmeimei</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组遍历</span></span><br><span class="line">[chao@localhost ~]$ </span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">for</span> arr <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$arr</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">done</span></span></span><br><span class="line">mike</span><br><span class="line">lilei</span><br><span class="line">hanmeimei</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给数组某个下标赋值</span></span><br><span class="line">[chao@localhost ~]$ array[2]=&quot;zhangsan&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除元素</span></span><br><span class="line">[chao@localhost ~]$ unset array[1]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空整个数组</span></span><br><span class="line">[chao@localhost ~]$ unset array</span><br></pre></td></tr></table></figure><h3><span id="5-数学运算">5. 数学运算</span></h3><table><thead><tr><th>算术运算符</th><th>说明/含义</th></tr></thead><tbody><tr><td>+、-</td><td>加法（或正号）、减法（或负号）</td></tr><tr><td>*、/、%</td><td>乘法、除法、取余（取模）</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>++、–</td><td>自增和自减，可以放在变量的前面也可以放在变量的后</td></tr><tr><td>!、&amp;&amp;、&#124;&#124;</td><td>逻辑非（取反）、逻辑与（and）、逻辑或（or）</td></tr><tr><td>&lt;、&lt;=、&gt;、&gt;=</td><td>比较符号（小于、小于等于、大于、大于等于）</td></tr><tr><td>==、!=、=</td><td>比较符号（相等、不相等；对于字符串，= 也可以表示相当于）</td></tr><tr><td>&lt;&lt;、&gt;&gt;</td><td>向左移位、向右移位</td></tr><tr><td>~、&#124;、 &amp;、^</td><td>按位取反、按位或、按位与、按位异或</td></tr><tr><td>=、+=、-=、*=、/=、%=</td><td>赋值运算符，例如 a+=1 相当于 a=a+1，a-=1 相当于 a=a-1</td></tr></tbody></table><p>在Shell中，如果不特别指明，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ echo 2+8</span><br><span class="line">2+8</span><br><span class="line">[chao@localhost ~]$ a=23</span><br><span class="line">[chao@localhost ~]$ echo $a + 55</span><br><span class="line">23 + 55</span><br></pre></td></tr></table></figure><h4><span id="51-数学运算命令">5.1 数学运算命令</span></h4><p>Shell中常用的六种数学计算方式:</p><table><thead><tr><th>运算操作符/运算命令</th><th>说明</th></tr></thead><tbody><tr><td><code>(( ))</code></td><td>用于整数运算，效率很高，推荐使用。</td></tr><tr><td><code>let</code></td><td>用于整数运算，和 (()) 类似。</td></tr><tr><td><code>$[]</code></td><td>用于整数运算，不如 (()) 灵活。</td></tr><tr><td><code>expr</code></td><td>可用于整数运算，也可以处理字符串。</td></tr><tr><td><code>bc</code></td><td>Linux下的一个计算器程序，可以处理整数和小数。Shell 本身只支持整数运算，想计算小数就得使用 bc 这个外部的计算器。</td></tr><tr><td><code>declare -i</code></td><td>将变量定义为整数，然后再进行数学运算时就不会被当做字符串了。功能有限，仅支持最基本的数学运算（加减乘除和取余），不支持逻辑运算、自增自减等，所以在实际开发中很少使用。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> expr 计算，注意&gt;,*等运算需要转义</span></span><br><span class="line">[chao@localhost ~]$ num1=305</span><br><span class="line">[chao@localhost ~]$ num2=50</span><br><span class="line">[chao@localhost ~]$ expr $num1 + $num2</span><br><span class="line">355</span><br><span class="line">[chao@localhost ~]$ expr $num1 \* $num2</span><br><span class="line">15250</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断一个变量是一个整数</span></span><br><span class="line">[chao@localhost ~]$ expr $num1 + 1</span><br><span class="line">306</span><br><span class="line">[chao@localhost ~]$ expr $num3 + 1</span><br><span class="line">expr: 非整数参数</span><br></pre></td></tr></table></figure><ul><li><code>bc</code>是bash内建的运算器，支持浮点数运算，内建变量scale可以设置精确度(默认为0)，操作符<code>^</code>用于指数运算。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ echo &quot;3*8&quot;|bc</span><br><span class="line">24</span><br><span class="line">[c.biancheng.net]$ echo &quot;scale=4;3*8/7&quot;|bc</span><br><span class="line">3.4285</span><br><span class="line"><span class="meta">#</span><span class="bash">十六进制转十进制</span></span><br><span class="line">[chao@localhost ~]$ m=1E</span><br><span class="line">[chao@localhost ~]$ n=$(echo &quot;obase=10;ibase=16;$m&quot;|bc)</span><br><span class="line">[chao@localhost ~]$ echo $n</span><br><span class="line">30</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-变量替换&quot;&gt;&lt;a href=&quot;#1-变量替换&quot; class=&quot;headerlink&quot; title=&quot;1. 变量替换&quot;&gt;&lt;/a&gt;1. 变量替换&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量#匹配规则&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从变量&lt;strong&gt;开头&lt;/strong&gt;进行规则匹配，将符合&lt;strong&gt;最短&lt;/strong&gt;的数据删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量##匹配规则&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从变量&lt;strong&gt;开头&lt;/strong&gt;进行规则匹配，将符合&lt;strong&gt;最长&lt;/strong&gt;的数据删除【贪婪模式】&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量%匹配规则&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从变量&lt;strong&gt;尾部&lt;/strong&gt;进行规则匹配，将符合&lt;strong&gt;最短&lt;/strong&gt;的数据删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量%%匹配规则&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从变量&lt;strong&gt;尾部&lt;/strong&gt;进行规则匹配，将符合&lt;strong&gt;最长&lt;/strong&gt;的数据删除【贪婪模式】&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量/旧字符串/新字符串&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;变量内容符合旧字符串，则&lt;strong&gt;第一个&lt;/strong&gt;旧字符串会被新字符串取代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&amp;#123;变量//旧字符串/新字符串&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;变量内容符合旧字符串，则&lt;strong&gt;全部的&lt;/strong&gt;旧字符串会被新字符串取代&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="shell编程" scheme="http://chaooo.github.io/categories/shell/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>shell编程入门（一）初识Shell编程</title>
    <link href="http://chaooo.github.io/article/20201115.html"/>
    <id>http://chaooo.github.io/article/20201115.html</id>
    <published>2020-11-15T01:16:56.000Z</published>
    <updated>2021-02-03T13:48:35.915Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-shell概述">1. Shell概述</span></h3><ol><li>Shell简介<ul><li>shell是操作系统提供给我们用户来访问系统资源的一个<strong>接口</strong>。</li><li>shell同时还是一个Linux下的<strong>命令行解释器</strong>，类似Windows下的cmd。</li><li>shell 同时还是解释型的脚本语言：运行时翻译，执行一条语句翻译一条，每次执行程序都需要进行解释。</li></ul></li><li>Shell的发展<ul><li>shell有多个版本：Bourne Shell，C Shell，Korn Shell，Bash Shell。现在广泛使用的是 Bash Shell，也就是Linux中默认内嵌的Shell。</li></ul></li><li>Shell脚本<ul><li><code>Shell脚本</code>(shell script)，是一种为Shell编写的脚本程序。<a id="more"></a></li></ul></li></ol><h3><span id="2-shell变量基础">2. Shell变量基础</span></h3><h4><span id="21-shell变量的分类">2.1 Shell变量的分类</span></h4><ol><li>用户自定义变量：由用户自己定义，修改和使用的变量</li><li>Shell环境变量：用于<strong>设置shell的运行环境</strong>，只要少数的环境变量可以修改其值。环境变量也是可以自定义的。</li><li>位置参数变量：通过命令行给脚本传递参数，<strong>变量名已经固定</strong>，不能自定义。</li><li>内部参数变量：是<strong>bash中已经定义好的变量</strong>，变量名不能自定义，变量作用也是固定的。</li></ol><h4><span id="22-变量赋值与设置">2.2 变量赋值与设置</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 赋值有两种格式</span></span><br><span class="line">var1=value</span><br><span class="line">var2=`command`      # 注意：command是可以执行的命令</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除变量 与 设置只读</span></span><br><span class="line">unset var1          # 清除var1变量</span><br><span class="line">readonly var2       # 设置var2变量为只读</span><br><span class="line"><span class="meta">#</span><span class="bash"> 变量的引用有两种方式（使用时加美元符号）</span></span><br><span class="line"><span class="meta">$</span><span class="bash">var1               <span class="comment"># $变量名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var1&#125;             <span class="comment"># $&#123;变量名&#125;</span></span></span><br></pre></td></tr></table></figure><h4><span id="23-位置参数变量">2.3 位置参数变量</span></h4><p>位置参数变量是一种特殊的shell变量，用于从命令行向脚本中传递参数。<br>$0表示脚本的名称，$1表示第一个参数，$2表示第二个参数，依次下去代表第几个参数，<br>但是从第十个参数位开始表示方法有所改变，需要加大括号，例如：${10}，${11}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ ls anaconda-ks.cfg install.log install.log.syslog</span><br></pre></td></tr></table></figure><blockquote><p><code>$0</code>的值就是<code>ls</code>命令本身，<code>$1</code>的值就是<code>anaconda-ks.cfg</code>这个文件，<code>$2</code>是<code>install.log</code>文件，<code>$3</code>是<code>install.log.syslog</code>文件</p></blockquote><table><thead><tr><th>位置参数变量</th><th>作 用</th></tr></thead><tbody><tr><td>$n</td><td>n 为数字，$0 代表命令本身，$1〜$9 代表第 1〜9 个参数，10 以上的参数需要用大括号包含， 如${10}</td></tr><tr><td>$*</td><td>这个变量代表命令行中所有的参数，把所有的参数看成一个整体</td></tr><tr><td>$@</td><td>这个变量也代表命令行中所有的参数，不过 $@ 把每个参数区别对待</td></tr><tr><td>$#</td><td>这个变量代表命令行中所有参数的个数</td></tr></tbody></table><p>位置参数变量要用于向命令或程序脚本中传递信息，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ vi count.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">num1=$1</span><br><span class="line">num2=$2</span><br><span class="line">sum=$(($num1 + $num2))</span><br><span class="line">echo $sum</span><br><span class="line"></span><br><span class="line">[chao@localhost ~]$ ./count.sh 11 22</span><br><span class="line">33</span><br></pre></td></tr></table></figure><h4><span id="24-shell环境变量">2.4 Shell环境变量</span></h4><ul><li>Shell 变量的作用域可以分为三种：<ul><li>有的变量只能在函数内部使用，这叫做局部变量（local variable）；</li><li>有的变量可以在当前 Shell 进程中使用，这叫做全局变量（global variable），在 Shell 中定义的变量，默认就是全局变量；</li><li>而有的变量还可以在子进程中使用，这叫做环境变量（environment variable）。<br>全局变量只在当前 Shell 进程中有效，对其它 Shell 进程和子进程都无效。如果使用export命令将全局变量导出，那么它就在所有的子进程中也有效了，这称为“环境变量”。</li></ul></li></ul><h4><span id="25-内置参数变量">2.5 内置参数变量</span></h4><p>内部参数分为两类：命令行参数，与进程相关的内部参数</p><ol><li>命令行参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">@   <span class="comment"># 表示传递给脚本或函数的所有参数。被双引号引用时，与$*有所不同。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">*   <span class="comment"># 表示传递给脚本或函数的所有参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">0   <span class="comment"># 表示命令行输入的脚本名称</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#   # 表示命令行上的参数个数</span></span></span><br></pre></td></tr></table></figure><blockquote><p> 注意： $@和$*不加引号时,二者都是返回传入的参数,但加了引号后$*把参数作为一个字符串整体(单字符串)返回, $@把每个参数作为一个一个字符串返回</p></blockquote></li></ol><ol start="2"><li>与进程相关的内部参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">?   <span class="comment"># 表示上一个命令执行的返回结果</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">$   <span class="comment"># 表示当前程序运行的 PID</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash">!   <span class="comment"># 表示获取上一个在后台工作进程的PID</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">_   <span class="comment"># 表示获取在此之前执行命令或脚本的最后一个参数</span></span></span><br></pre></td></tr></table></figure></li></ol><h3><span id="3-退出状态码">3. 退出状态码</span></h3><p><code>exit</code>是一个Shell内置命令，用来退出当前Shell进程，并返回一个退出状态；使用$?可以接收这个退出状态。<br><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。<br><code>exit</code>退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败，可以根据退出状态来判断具体出现了什么错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[chao@localhost ~]$ vi test.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;befor exit&quot;</span><br><span class="line">exit 8</span><br><span class="line">echo &quot;after exit&quot;</span><br><span class="line"></span><br><span class="line">[chao@localhost ~]$ bash ./test.sh</span><br><span class="line">befor exit</span><br><span class="line">[chao@localhost ~]$ echo $?</span><br><span class="line">8</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Shell概述&quot;&gt;&lt;a href=&quot;#1-Shell概述&quot; class=&quot;headerlink&quot; title=&quot;1. Shell概述&quot;&gt;&lt;/a&gt;1. Shell概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Shell简介&lt;ul&gt;
&lt;li&gt;shell是操作系统提供给我们用户来访问系统资源的一个&lt;strong&gt;接口&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;shell同时还是一个Linux下的&lt;strong&gt;命令行解释器&lt;/strong&gt;，类似Windows下的cmd。&lt;/li&gt;
&lt;li&gt;shell 同时还是解释型的脚本语言：运行时翻译，执行一条语句翻译一条，每次执行程序都需要进行解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell的发展&lt;ul&gt;
&lt;li&gt;shell有多个版本：Bourne Shell，C Shell，Korn Shell，Bash Shell。现在广泛使用的是 Bash Shell，也就是Linux中默认内嵌的Shell。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell脚本&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell脚本&lt;/code&gt;(shell script)，是一种为Shell编写的脚本程序。</summary>
    
    
    
    <category term="shell编程" scheme="http://chaooo.github.io/categories/shell/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理</title>
    <link href="http://chaooo.github.io/article/20201114.html"/>
    <id>http://chaooo.github.io/article/20201114.html</id>
    <published>2020-11-14T03:16:56.000Z</published>
    <updated>2021-02-03T13:50:16.253Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-常用基础命令">1. 常用基础命令</span></h3><ol><li><p>文件管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls          # 显示指定工作目录下的内容及属性信息</span><br><span class="line">cp          # 复制文件或目录</span><br><span class="line">mkdir       # 创建目录</span><br><span class="line">mv          # 移动或改名文件</span><br><span class="line">pwd         # 显示当前路径</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>文档编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat         # 在终端设备上显示文件内容</span><br><span class="line">echo        # 输出字符串或提取Shell变量的值</span><br><span class="line">rm          # 移除文件或目录</span><br><span class="line">tail        # 查看文件尾部内容</span><br><span class="line">rmdir       # 删除空目录</span><br></pre></td></tr></table></figure></li><li><p>系统管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">startx      # 初始化X-windows</span><br><span class="line">rpm         # RPM软件包管理器</span><br><span class="line">find        # 查找和搜索文件</span><br><span class="line">vmstat      # 显示虚拟内存状态</span><br><span class="line">uname       # 显示系统信息</span><br></pre></td></tr></table></figure></li><li><p>磁盘管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df          # 显示磁盘空间使用情况</span><br><span class="line">fdisk       # 磁盘分区</span><br><span class="line">hdparm      # 显示与设定硬盘参数</span><br><span class="line">lsblk       # 查看系统的磁盘</span><br><span class="line">vgextend    # 扩展卷组</span><br></pre></td></tr></table></figure></li><li><p>文件传输</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tftp        # 上传及下载文件</span><br><span class="line">curl        # 文件传输工具</span><br><span class="line">fsck        # 检查并修复Linux文件系统</span><br><span class="line">ftpwho      # 显示ftp会话信息</span><br><span class="line">lprm        # 删除打印队列中的打印任务</span><br></pre></td></tr></table></figure></li><li><p>网络通讯</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh         # 安全连接客户端</span><br><span class="line">netstat     # 显示网络状态</span><br><span class="line">ping        # 测试主机间网络连通性</span><br><span class="line">ifconfig    # 显示或设置网络设备</span><br><span class="line">dhclient    # 动态获取或释放IP地址</span><br></pre></td></tr></table></figure></li><li><p>设备管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount       # 文件系统挂载</span><br><span class="line">MAKEDEV     # 建立设备</span><br><span class="line">setleds     # 设定键盘上方三个 LED 的状态</span><br><span class="line">lspci       # 显示当前设备所有PCI总线信息</span><br><span class="line">sensors     # 检测服务器内部温度及电压</span><br></pre></td></tr></table></figure></li><li><p>备份压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zipinfo     # 查看压缩文件信息</span><br><span class="line">gzip        # 压缩和解压文件</span><br><span class="line">zip         # 压缩文件</span><br><span class="line">unarj       # 解压.arj文件</span><br><span class="line">unzip       # 解压缩zip文件</span><br></pre></td></tr></table></figure></li><li><p>其他命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">chsh        # 查看和修改当前登录的Shell</span><br><span class="line">export      # 查看和设置Shell环境变量</span><br><span class="line">read        # 读取从键盘或文件输入的数据</span><br><span class="line">expr        # 四则远算和字符串运算</span><br><span class="line">tmux        # 一个窗口操作多个会话</span><br><span class="line">alias       # 给命令定义别名</span><br><span class="line">history     # 显示与操纵历史命令</span><br><span class="line">xargs       # 一个给其他命令传递参数的过滤器</span><br><span class="line">time        # 测量命令的执行时间或者系统资源的使用情况</span><br><span class="line">sleep       # 让程序暂停或休眠一段时间</span><br><span class="line">file        # 查看文件信息或类型</span><br><span class="line">ln          # 创建文件链接</span><br><span class="line">du          # 查看文件夹和文件的磁盘占用情况</span><br><span class="line">bzip2       # 压缩和解压文件（.bz2文件）</span><br><span class="line">dd          # 复制（拷贝）文件，并对原文件进行转换</span><br><span class="line">grep        # 文本搜索工具（可使用正则表达式）</span><br><span class="line">cut         # 剪切文件中的数据</span><br><span class="line">wc          # 计算单个文件中的字数、单词数和字节数</span><br><span class="line">split       # 切割（拆分）文件</span><br><span class="line">paste       # 合并（拼接）文件</span><br><span class="line">Vim         # 替换文本内容</span><br><span class="line">sed         # 替换、删除、更新文件中的内容</span><br><span class="line">hash        # 显示与清除命令运行时查询的哈希表</span><br><span class="line">wait        # 等待指令</span><br><span class="line">bc          # 浮点运算</span><br><span class="line">rmmod       # 删除模块</span><br></pre></td></tr></table></figure></li></ol><h3><span id="2-命令实例">2. 命令实例</span></h3><ol><li><p>系统信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arch                    # 显示机器的处理器架构(1) </span><br><span class="line">uname -m                # 显示机器的处理器架构(2) </span><br><span class="line">uname -r                # 显示正在使用的内核版本 </span><br><span class="line">dmidecode -q            # 显示硬件系统部件 - (SMBIOS / DMI) </span><br><span class="line">hdparm -i /dev/hda      # 罗列一个磁盘的架构特性 </span><br><span class="line">hdparm -tT /dev/sda     # 在磁盘上执行测试性读取操作 </span><br><span class="line">cat /proc/cpuinfo       # 显示CPU info的信息 </span><br><span class="line">cat /proc/interrupts    # 显示中断 </span><br><span class="line">cat /proc/meminfo       # 校验内存使用 </span><br><span class="line">cat /proc/swaps         # 显示哪些swap被使用 </span><br><span class="line">cat /proc/version       # 显示内核的版本 </span><br><span class="line">cat /proc/net/dev       # 显示网络适配器及统计 </span><br><span class="line">cat /proc/mounts        # 显示已加载的文件系统 </span><br><span class="line">lspci -tv               # 罗列 PCI 设备 </span><br><span class="line">lsusb -tv               # 显示 USB 设备 </span><br><span class="line">date                    # 显示系统日期 </span><br><span class="line">cal 2007                # 显示2007年的日历表 </span><br><span class="line">date 041217002007.00    # 设置日期和时间 - 月日时分年.秒 </span><br><span class="line">clock -w                # 将时间修改保存到 BIOS </span><br></pre></td></tr></table></figure></li><li><p>关机 (系统的关机、重启以及登出)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now               # 关闭系统(1) </span><br><span class="line">init 0                        # 关闭系统(2) </span><br><span class="line">telinit 0                     # 关闭系统(3) </span><br><span class="line">shutdown -h hours:minutes &amp;   # 按预定时间关闭系统 </span><br><span class="line">shutdown -c                   # 取消按预定时间关闭系统 </span><br><span class="line">shutdown -r now               # 重启(1) </span><br><span class="line">reboot                        # 重启(2) </span><br><span class="line">logout                        # 注销 </span><br></pre></td></tr></table></figure></li><li><p>文件和目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cd /home                # 进入 &#x27;/ home&#x27; 目录&#x27; </span><br><span class="line">cd ..                   # 返回上一级目录 </span><br><span class="line">cd ../..                # 返回上两级目录 </span><br><span class="line">cd                      # 进入个人的主目录 </span><br><span class="line">cd ~user1               # 进入个人的主目录 </span><br><span class="line">cd -                    # 返回上次所在的目录 </span><br><span class="line">pwd                     # 显示工作路径 </span><br><span class="line">ls                      # 查看目录中的文件 </span><br><span class="line">ls -F                   # 查看目录中的文件 </span><br><span class="line">ls -l                   # 显示文件和目录的详细资料 </span><br><span class="line">ls -a                   # 显示隐藏文件 </span><br><span class="line">ls *[0-9]*              # 显示包含数字的文件名和目录名 </span><br><span class="line">tree                    # 显示文件和目录由根目录开始的树形结构(1) </span><br><span class="line">lstree                  # 显示文件和目录由根目录开始的树形结构(2) </span><br><span class="line">mkdir dir1              # 创建一个叫做 &#x27;dir1&#x27; 的目录&#x27; </span><br><span class="line">mkdir dir1 dir2         # 同时创建两个目录 </span><br><span class="line">mkdir -p /tmp/dir1/dir2 # 创建一个目录树 </span><br><span class="line">rm -f file1             # 删除一个叫做 &#x27;file1&#x27; 的文件&#x27; </span><br><span class="line">rmdir dir1              # 删除一个叫做 &#x27;dir1&#x27; 的目录&#x27; </span><br><span class="line">rm -rf dir1             # 删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容 </span><br><span class="line">rm -rf dir1 dir2        # 同时删除两个目录及它们的内容 </span><br><span class="line">mv dir1 new_dir         # 重命名/移动 一个目录 </span><br><span class="line">cp file1 file2          # 复制一个文件 </span><br><span class="line">cp dir/* .              # 复制一个目录下的所有文件到当前工作目录 </span><br><span class="line">cp -a /tmp/dir1 .       # 复制一个目录到当前工作目录 </span><br><span class="line">cp -a dir1 dir2         # 复制一个目录 </span><br><span class="line">ln -s file1 lnk1        # 创建一个指向文件或目录的软链接 </span><br><span class="line">ln file1 lnk1           # 创建一个指向文件或目录的物理链接 </span><br><span class="line">touch -t 0712250000 file1   # 修改一个文件或目录的时间戳 - (YYMMDDhhmm) </span><br></pre></td></tr></table></figure></li><li><p>文件搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find / -name file1                           # 从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录 </span><br><span class="line">find / -user user1                           # 搜索属于用户 &#x27;user1&#x27; 的文件和目录 </span><br><span class="line">find /home/user1 -name \*.bin                # 在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件 </span><br><span class="line">find /usr/bin -type f -atime +100            # 搜索在过去100天内未被使用过的执行文件 </span><br><span class="line">find /usr/bin -type f -mtime -10             # 搜索在10天内被创建或者修改过的文件 </span><br><span class="line">find / -name \*.rpm -exec chmod 755 &#x27;&#123;&#125;&#x27; \;  # 搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限 </span><br><span class="line">find / -xdev -name \*.rpm                    # 搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱、捷盘等可移动设备 </span><br><span class="line">locate \*.ps                                 # 寻找以 &#x27;.ps&#x27; 结尾的文件 - 先运行 &#x27;updatedb&#x27; 命令 </span><br><span class="line">whereis halt                                 # 显示一个二进制文件、源码或man的位置 </span><br><span class="line">which halt                                   # 显示一个二进制文件或可执行文件的完整路径 </span><br></pre></td></tr></table></figure></li><li><p>挂载一个文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/hda2 /mnt/hda2             # 挂载一个叫做hda2的盘 - 确定目录 &#x27;/ mnt/hda2&#x27; 已经存在 </span><br><span class="line">umount /dev/hda2                      # 卸载一个叫做hda2的盘 - 先从挂载点 &#x27;/ mnt/hda2&#x27; 退出 </span><br><span class="line">fuser -km /mnt/hda2                   # 当设备繁忙时强制卸载 </span><br><span class="line">umount -n /mnt/hda2                   # 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 </span><br><span class="line">mount /dev/fd0 /mnt/floppy            # 挂载一个软盘 </span><br><span class="line">mount /dev/cdrom /mnt/cdrom           # 挂载一个cdrom或dvdrom </span><br><span class="line">mount /dev/hdc /mnt/cdrecorder        # 挂载一个cdrw或dvdrom </span><br><span class="line">mount /dev/hdb /mnt/cdrecorder        # 挂载一个cdrw或dvdrom </span><br><span class="line">mount -o loop file.iso /mnt/cdrom     # 挂载一个文件或ISO镜像文件 </span><br><span class="line">mount -t vfat /dev/hda5 /mnt/hda5     # 挂载一个Windows FAT32文件系统 </span><br><span class="line">mount /dev/sda1 /mnt/usbdisk          # 挂载一个usb 捷盘或闪存设备 </span><br><span class="line">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share  # 挂载一个windows网络共享 </span><br></pre></td></tr></table></figure></li><li><p>磁盘空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df -h                   # 显示已经挂载的分区列表 </span><br><span class="line">ls -lSr |more           # 以尺寸大小排列文件和目录 </span><br><span class="line">du -sh dir1             # 估算目录 &#x27;dir1&#x27; 已经使用的磁盘空间&#x27; </span><br><span class="line">du -sk * | sort -rn     # 以容量大小为依据依次显示文件和目录的大小 </span><br><span class="line">rpm -q -a --qf &#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27; | sort -k1,1n                  # 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) </span><br><span class="line">dpkg-query -W -f=&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27; | sort -k1,1n  # 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) </span><br></pre></td></tr></table></figure></li><li><p>用户和群组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">groupadd group_name                        # 创建一个新用户组 </span><br><span class="line">groupdel group_name                        # 删除一个用户组 </span><br><span class="line">groupmod -n new_group_name old_group_name  # 重命名一个用户组 </span><br><span class="line">useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1  # 创建一个属于 &quot;admin&quot; 用户组的用户 </span><br><span class="line">useradd user1                              # 创建一个新用户 </span><br><span class="line">userdel -r user1                           # 删除一个用户 ( &#x27;-r&#x27; 排除主目录) </span><br><span class="line">usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1    # 修改用户属性 </span><br><span class="line">passwd                                     # 修改口令 </span><br><span class="line">passwd user1                               # 修改一个用户的口令 (只允许root执行) </span><br><span class="line">chage -E 2005-12-31 user1                  # 设置用户口令的失效期限 </span><br><span class="line">pwck                                       # 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户 </span><br><span class="line">grpck                                      # 检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组 </span><br><span class="line">newgrp group_name                          #登陆进一个新的群组以改变新创建文件的预设群组 </span><br></pre></td></tr></table></figure></li><li><p>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ls -lh                      # 显示权限 </span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS # 将终端划分成5栏显示 </span><br><span class="line">chmod ugo+rwx directory1    # 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 </span><br><span class="line">chmod go-rwx directory1     # 删除群组(g)与其他人(o)对目录的读写执行权限 </span><br><span class="line">chown user1 file1           # 改变一个文件的所有人属性 </span><br><span class="line">chown -R user1 directory1   # 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 </span><br><span class="line">chgrp group1 file1          # 改变文件的群组 </span><br><span class="line">chown user1:group1 file1    # 改变一个文件的所有人和群组属性 </span><br><span class="line">find / -perm -u+s           # 罗列一个系统中所有使用了SUID控制的文件 </span><br><span class="line">chmod u+s /bin/file1        # 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 </span><br><span class="line">chmod u-s /bin/file1        # 禁用一个二进制文件的 SUID位 </span><br><span class="line">chmod g+s /home/public      # 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 </span><br><span class="line">chmod g-s /home/public      # 禁用一个目录的 SGID 位 </span><br><span class="line">chmod o+t /home/public      # 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 </span><br><span class="line">chmod o-t /home/public      # 禁用一个目录的 STIKY 位 </span><br></pre></td></tr></table></figure></li><li><p>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chattr +a file1         # 只允许以追加方式读写文件 </span><br><span class="line">chattr +c file1         # 允许这个文件能被内核自动压缩/解压 </span><br><span class="line">chattr +d file1         # 在进行文件系统备份时，dump程序将忽略这个文件 </span><br><span class="line">chattr +i file1         # 设置成不可变的文件，不能被删除、修改、重命名或者链接 </span><br><span class="line">chattr +s file1         # 允许一个文件被安全地删除 </span><br><span class="line">chattr +S file1         # 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 </span><br><span class="line">chattr +u file1         # 若文件被删除，系统会允许你在以后恢复这个被删除的文件 </span><br><span class="line">lsattr                  # 显示特殊的属性 </span><br></pre></td></tr></table></figure></li><li><p>打包和压缩文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 file1.bz2                       # 解压一个叫做 &#x27;file1.bz2&#x27;的文件 </span><br><span class="line">bzip2 file1                             # 压缩一个叫做 &#x27;file1&#x27; 的文件 </span><br><span class="line">gunzip file1.gz                         # 解压一个叫做 &#x27;file1.gz&#x27;的文件 </span><br><span class="line">gzip file1                              # 压缩一个叫做 &#x27;file1&#x27;的文件 </span><br><span class="line">gzip -9 file1                           # 最大程度压缩 </span><br><span class="line">rar a file1.rar test_file               # 创建一个叫做 &#x27;file1.rar&#x27; 的包 </span><br><span class="line">rar a file1.rar file1 file2 dir1        # 同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27; </span><br><span class="line">rar x file1.rar                         # 解压rar包 </span><br><span class="line">unrar x file1.rar                       # 解压rar包 </span><br><span class="line">tar -cvf archive.tar file1              # 创建一个非压缩的 tarball </span><br><span class="line">tar -cvf archive.tar file1 file2 dir1   # 创建一个包含了 &#x27;file1&#x27;, &#x27;file2&#x27; 以及 &#x27;dir1&#x27;的档案文件 </span><br><span class="line">tar -tf archive.tar                     # 显示一个包中的内容 </span><br><span class="line">tar -xvf archive.tar                    # 释放一个包 </span><br><span class="line">tar -xvf archive.tar -C /tmp            # 将压缩包释放到 /tmp目录下 </span><br><span class="line">tar -cvfj archive.tar.bz2 dir1          # 创建一个bzip2格式的压缩包 </span><br><span class="line">tar -xvfj archive.tar.bz2               # 解压一个bzip2格式的压缩包 </span><br><span class="line">tar -cvfz archive.tar.gz dir1           # 创建一个gzip格式的压缩包 </span><br><span class="line">tar -xvfz archive.tar.gz                # 解压一个gzip格式的压缩包 </span><br><span class="line">zip file1.zip file1                     # 创建一个zip格式的压缩包 </span><br><span class="line">zip -r file1.zip file1 file2 dir1       # 将几个文件和目录同时压缩成一个zip格式的压缩包 </span><br><span class="line">unzip file1.zip                         # 解压一个zip格式压缩包 </span><br></pre></td></tr></table></figure></li><li><p>RPM 包 - （Fedora, Redhat及类似系统）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh package.rpm                    # 安装一个rpm包 </span><br><span class="line">rpm -ivh --nodeeps package.rpm          # 安装一个rpm包而忽略依赖关系警告 </span><br><span class="line">rpm -U package.rpm                      # 更新一个rpm包但不改变其配置文件 </span><br><span class="line">rpm -F package.rpm                      # 更新一个确定已经安装的rpm包 </span><br><span class="line">rpm -e package_name.rpm                 # 删除一个rpm包 </span><br><span class="line">rpm -qa                                 # 显示系统中所有已经安装的rpm包 </span><br><span class="line">rpm -qa | grep httpd                    # 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包 </span><br><span class="line">rpm -qi package_name                    # 获取一个已安装包的特殊信息 </span><br><span class="line">rpm -qg &quot;System Environment/Daemons&quot;    # 显示一个组件的rpm包 </span><br><span class="line">rpm -ql package_name                    # 显示一个已经安装的rpm包提供的文件列表 </span><br><span class="line">rpm -qc package_name                    # 显示一个已经安装的rpm包提供的配置文件列表 </span><br><span class="line">rpm -q package_name --whatrequires      # 显示与一个rpm包存在依赖关系的列表 </span><br><span class="line">rpm -q package_name --whatprovides      # 显示一个rpm包所占的体积 </span><br><span class="line">rpm -q package_name --scripts           # 显示在安装/删除期间所执行的脚本l </span><br><span class="line">rpm -q package_name --changelog         # 显示一个rpm包的修改历史 </span><br><span class="line">rpm -qf /etc/httpd/conf/httpd.conf      # 确认所给的文件由哪个rpm包所提供 </span><br><span class="line">rpm -qp package.rpm -l                  # 显示由一个尚未安装的rpm包提供的文件列表 </span><br><span class="line">rpm --import /media/cdrom/RPM-GPG-KEY   # 导入公钥数字证书 </span><br><span class="line">rpm --checksig package.rpm              # 确认一个rpm包的完整性 </span><br><span class="line">rpm -qa gpg-pubkey                      # 确认已安装的所有rpm包的完整性 </span><br><span class="line">rpm -V package_name                     # 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 </span><br><span class="line">rpm -Va                                 # 检查系统中所有已安装的rpm包- 小心使用 </span><br><span class="line">rpm -Vp package.rpm                     # 确认一个rpm包还未安装 </span><br><span class="line">rpm2cpio package.rpm | cpio --extract --make-directories *bin*  # 从一个rpm包运行可执行文件 </span><br><span class="line">rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm    # 从一个rpm源码安装一个构建好的包 </span><br><span class="line">rpmbuild --rebuild package_name.src.rpm # 从一个rpm源码构建一个 rpm 包 </span><br></pre></td></tr></table></figure></li><li><p>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install package_name            # 下载并安装一个rpm包 </span><br><span class="line">yum localinstall package_name.rpm   # 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 </span><br><span class="line">yum update package_name.rpm         # 更新当前系统中所有安装的rpm包 </span><br><span class="line">yum update package_name             # 更新一个rpm包 </span><br><span class="line">yum remove package_name             # 删除一个rpm包 </span><br><span class="line">yum list                            # 列出当前系统中安装的所有包 </span><br><span class="line">yum search package_name             # 在rpm仓库中搜寻软件包 </span><br><span class="line">yum clean packages                  # 清理rpm缓存删除下载的包 </span><br><span class="line">yum clean headers                   # 删除所有头文件 </span><br><span class="line">yum clean all                       # 删除所有缓存的包和头文件 </span><br></pre></td></tr></table></figure></li><li><p>DEB 包 (Debian, Ubuntu 以及类似系统)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i package.deb         # 安装/更新一个 deb 包 </span><br><span class="line">dpkg -r package_name        # 从系统删除一个 deb 包 </span><br><span class="line">dpkg -l                     # 显示系统中所有已经安装的 deb 包 </span><br><span class="line">dpkg -l | grep httpd        # 显示所有名称中包含 &quot;httpd&quot; 字样的deb包 </span><br><span class="line">dpkg -s package_name        # 获得已经安装在系统中一个特殊包的信息 </span><br><span class="line">dpkg -L package_name        # 显示系统中已经安装的一个deb包所提供的文件列表 </span><br><span class="line">dpkg --contents package.deb # 显示尚未安装的一个包所提供的文件列表 </span><br><span class="line">dpkg -S /bin/ping           # 确认所给的文件由哪个deb包提供 </span><br></pre></td></tr></table></figure></li><li><p>APT 软件工具 (Debian, Ubuntu 以及类似系统) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install package_name        # 安装/更新一个 deb 包 </span><br><span class="line">apt-cdrom install package_name      # 从光盘安装/更新一个 deb 包 </span><br><span class="line">apt-get update                      # 升级列表中的软件包 </span><br><span class="line">apt-get upgrade                     # 升级所有已安装的软件 </span><br><span class="line">apt-get remove package_name         # 从系统删除一个deb包 </span><br><span class="line">apt-get check                       # 确认依赖的软件仓库正确 </span><br><span class="line">apt-get clean                       # 从下载的软件包中清理缓存 </span><br><span class="line">apt-cache search searched-package   # 返回包含所要搜索字符串的软件包名称 </span><br></pre></td></tr></table></figure></li><li><p>查看文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat file1                   # 从第一个字节开始正向查看文件的内容 </span><br><span class="line">tac file1                   # 从最后一行开始反向查看一个文件的内容 </span><br><span class="line">more file1                  # 查看一个长文件的内容 </span><br><span class="line">less file1                  # 类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作 </span><br><span class="line">head -2 file1               # 查看一个文件的前两行 </span><br><span class="line">tail -2 file1               # 查看一个文件的最后两行 </span><br><span class="line">tail -f /var/log/messages   # 实时查看被添加到一个文件中的内容 </span><br></pre></td></tr></table></figure></li><li><p>文本处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt  # 合并一个文件的详细说明文本，并将简介写入一个新文件中 </span><br><span class="line">cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt # 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 </span><br><span class="line">grep Aug /var/log/messages                  # 在文件 &#x27;/var/log/messages&#x27;中查找关键词&quot;Aug&quot; </span><br><span class="line">grep ^Aug /var/log/messages                 # 在文件 &#x27;/var/log/messages&#x27;中查找以&quot;Aug&quot;开始的词汇 </span><br><span class="line">grep [0-9] /var/log/messages                # 选择 &#x27;/var/log/messages&#x27; 文件中所有包含数字的行 </span><br><span class="line">grep Aug -R /var/log/*                      # 在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;Aug&quot; </span><br><span class="line">sed &#x27;s/stringa1/stringa2/g&#x27; example.txt     # 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot; </span><br><span class="line">sed &#x27;/^$/d&#x27; example.txt                     # 从example.txt文件中删除所有空白行 </span><br><span class="line">sed &#x27;/ *#/d; /^$/d&#x27; example.txt             # 从example.txt文件中删除所有注释和空白行 </span><br><span class="line">echo &#x27;esempio&#x27; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; # 合并上下单元格内容 </span><br><span class="line">sed -e &#x27;1d&#x27; result.txt                      # 从文件example.txt 中排除第一行 </span><br><span class="line">sed -n &#x27;/stringa1/p&#x27;                        # 查看只包含词汇 &quot;string1&quot;的行 </span><br><span class="line">sed -e &#x27;s/ *$//&#x27; example.txt                # 删除每一行最后的空白字符 </span><br><span class="line">sed -e &#x27;s/stringa1//g&#x27; example.txt          # 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部 </span><br><span class="line">sed -n &#x27;1,5p;5q&#x27; example.txt                # 查看从第一行到第5行内容 </span><br><span class="line">sed -n &#x27;5p;5q&#x27; example.txt                  # 查看第5行 </span><br><span class="line">sed -e &#x27;s/00*/0/g&#x27; example.txt              # 用单个零替换多个零 </span><br><span class="line">cat -n file1                                # 标示文件的行数 </span><br><span class="line">cat example.txt | awk &#x27;NR%2==1&#x27;             # 删除example.txt文件中的所有偶数行 </span><br><span class="line">echo a b c | awk &#x27;&#123;print $1&#125;&#x27;               # 查看一行第一栏 </span><br><span class="line">echo a b c | awk &#x27;&#123;print $1,$3&#125;&#x27;            # 查看一行的第一和第三栏 </span><br><span class="line">paste file1 file2                           # 合并两个文件或两栏的内容 </span><br><span class="line">paste -d &#x27;+&#x27; file1 file2                    # 合并两个文件或两栏的内容，中间用&quot;+&quot;区分 </span><br><span class="line">sort file1 file2                            # 排序两个文件的内容 </span><br><span class="line">sort file1 file2 | uniq                     # 取出两个文件的并集(重复的行只保留一份) </span><br><span class="line">sort file1 file2 | uniq -u                  # 删除交集，留下其他的行 </span><br><span class="line">sort file1 file2 | uniq -d                  # 取出两个文件的交集(只留下同时存在于两个文件中的文件) </span><br><span class="line">comm -1 file1 file2                         # 比较两个文件的内容只删除 &#x27;file1&#x27; 所包含的内容 </span><br><span class="line">comm -2 file1 file2                         # 比较两个文件的内容只删除 &#x27;file2&#x27; 所包含的内容 </span><br><span class="line">comm -3 file1 file2                         # 比较两个文件的内容只删除两个文件共有的部分 </span><br></pre></td></tr></table></figure></li><li><p>字符设置和文件格式转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dos2unix filedos.txt fileunix.txt       # 将一个文本文件的格式从MSDOS转换成UNIX </span><br><span class="line">unix2dos fileunix.txt filedos.txt       # 将一个文本文件的格式从UNIX转换成MSDOS </span><br><span class="line">recode ..HTML &lt; page.txt &gt; page.html    # 将一个文本文件转换成html </span><br><span class="line">recode -l | more                        # 显示所有允许的转换格式 </span><br></pre></td></tr></table></figure></li><li><p>文件系统分析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">badblocks -v /dev/hda1  # 检查磁盘hda1上的坏磁块 </span><br><span class="line">fsck /dev/hda1          # 修复/检查hda1磁盘上linux文件系统的完整性 </span><br><span class="line">fsck.ext2 /dev/hda1     # 修复/检查hda1磁盘上ext2文件系统的完整性 </span><br><span class="line">e2fsck /dev/hda1        # 修复/检查hda1磁盘上ext2文件系统的完整性 </span><br><span class="line">e2fsck -j /dev/hda1     # 修复/检查hda1磁盘上ext3文件系统的完整性 </span><br><span class="line">fsck.ext3 /dev/hda1     # 修复/检查hda1磁盘上ext3文件系统的完整性 </span><br><span class="line">fsck.vfat /dev/hda1     # 修复/检查hda1磁盘上fat文件系统的完整性           # </span><br><span class="line">fsck.msdos /dev/hda1    # 修复/检查hda1磁盘上dos文件系统的完整性 </span><br><span class="line">dosfsck /dev/hda1       # 修复/检查hda1磁盘上dos文件系统的完整性 </span><br></pre></td></tr></table></figure></li><li><p>初始化一个文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkfs /dev/hda1                  # 在hda1分区创建一个文件系统 </span><br><span class="line">mke2fs /dev/hda1                # 在hda1分区创建一个linux ext2的文件系统 </span><br><span class="line">mke2fs -j /dev/hda1             # 在hda1分区创建一个linux ext3(日志型)的文件系统 </span><br><span class="line">mkfs -t vfat 32 -F /dev/hda1    # 创建一个 FAT32 文件系统 </span><br><span class="line">fdformat -n /dev/fd0            # 格式化一个软盘 </span><br><span class="line">mkswap /dev/hda3                # 创建一个swap文件系统 </span><br></pre></td></tr></table></figure></li><li><p>SWAP文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/hda3            # 创建一个swap文件系统 </span><br><span class="line">swapon /dev/hda3            # 启用一个新的swap文件系统 </span><br><span class="line">swapon /dev/hda2 /dev/hdb3  # 启用两个swap分区 </span><br></pre></td></tr></table></figure></li><li><p>备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dump -0aj -f /tmp/home0.bak /home                               # 制作一个 &#x27;/home&#x27; 目录的完整备份 </span><br><span class="line">dump -1aj -f /tmp/home0.bak /home                               # 制作一个 &#x27;/home&#x27; 目录的交互式备份 </span><br><span class="line">restore -if /tmp/home0.bak                                      # 还原一个交互式备份 </span><br><span class="line">rsync -rogpav --delete /home /tmp                               # 同步两边的目录 </span><br><span class="line">rsync -rogpav -e ssh --delete /home ip_address:/tmp             # 通过SSH通道rsync </span><br><span class="line">rsync -az -e ssh --delete ip_addr:/home/public /home/local      # 通过ssh和压缩将一个远程目录同步到本地目录 </span><br><span class="line">rsync -az -e ssh --delete /home/local ip_addr:/home/public      # 通过ssh和压缩将本地目录同步到远程目录 </span><br><span class="line">dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#x27;dd of=hda.gz&#x27;   # 通过ssh在远程主机上执行一次备份本地磁盘的操作 </span><br><span class="line">dd if=/dev/sda of=/tmp/file1                                    # 备份磁盘内容到一个文件 </span><br><span class="line">tar -Puf backup.tar /home/user                                  # 执行一次对&#x27;/home/user&#x27;目录的交互式备份操作 </span><br><span class="line">( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#x27;cd /home/share/ &amp;&amp; tar x -p&#x27;           # 通过ssh在远程目录中复制一个目录内容 </span><br><span class="line">( tar c /home ) | ssh -C user@ip_addr &#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27;                    # 通过ssh在远程目录中复制一个本地目录 </span><br><span class="line">tar cf - . | (cd /tmp/backup ; tar xf - )                       # 本地将一个目录复制到另一个地方，保留原有权限及链接 </span><br><span class="line">find /home/user1 -name &#x27;*.txt&#x27; | xargs cp -av --target-directory=/home/backup/ --parents    # 从一个目录查找并复制所有以 &#x27;.txt&#x27; 结尾的文件到另一个目录 </span><br><span class="line">find /var/log -name &#x27;*.log&#x27; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2                   # 查找所有以&#x27;.log&#x27;结尾的文件并做成一个bzip包 </span><br><span class="line">dd if=/dev/hda of=/dev/fd0 bs=512 count=1                       # 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 </span><br><span class="line">dd if=/dev/fd0 of=/dev/hda bs=512 count=1                       # 从已经保存到软盘的备份中恢复MBR内容 </span><br></pre></td></tr></table></figure></li></ol><ol start="22"><li>网络 - （以太网和WIFI无线）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0           # 显示一个以太网卡的配置 </span><br><span class="line">ifup eth0               # 启用一个 &#x27;eth0&#x27; 网络设备 </span><br><span class="line">ifdown eth0             # 禁用一个 &#x27;eth0&#x27; 网络设备 </span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0   # 控制IP地址 </span><br><span class="line">ifconfig eth0 promisc   # 设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing) </span><br><span class="line">dhclient eth0           # 以dhcp模式启用 &#x27;eth0&#x27; </span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-常用基础命令&quot;&gt;&lt;a href=&quot;#1-常用基础命令&quot; class=&quot;headerlink&quot; title=&quot;1. 常用基础命令&quot;&gt;&lt;/a&gt;1. 常用基础命令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;文件管理&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls          # 显示指定工作目录下的内容及属性信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp          # 复制文件或目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir       # 创建目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv          # 移动或改名文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd         # 显示当前路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux入门" scheme="http://chaooo.github.io/categories/linux-learn/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="http://chaooo.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门（二）容器与镜像的使用</title>
    <link href="http://chaooo.github.io/article/20201113.html"/>
    <id>http://chaooo.github.io/article/20201113.html</id>
    <published>2020-11-13T09:30:56.000Z</published>
    <updated>2021-02-03T13:50:38.172Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-docker客户端">1. Docker客户端</span></h3><p>docker客户端非常简单，我们可以直接输入<code>docker</code>命令来查看到Docker客户端的所有命令选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker</span><br></pre></td></tr></table></figure><p>可以通过命令<code>docker &lt;command&gt; --help</code>更深入的了解指定的Docker命令使用方法。</p><a id="more"></a><p>例如我们要查看<code>docker stats</code>指令的具体使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker stats --help</span><br><span class="line">Usage:docker stats [OPTIONS] [CONTAINER...]</span><br><span class="line">Display a live stream of container(s) resource usage statistics</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-stream       Disable streaming stats and only pull the first result</span><br><span class="line">      --no-trunc        Do not truncate output</span><br></pre></td></tr></table></figure><h3><span id="2-docker镜像image使用">2. Docker镜像(Image)使用</span></h3><p>当运行容器时，使用的镜像如果在本地中不存在，docker就会自动从docker镜像仓库中下载，默认是从<a href="https://hub.docker.com/">Docker Hub</a>公共镜像源下载。</p><ol><li><p>查看现有的镜像(Image)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        10 months ago       13.3kB</span><br></pre></td></tr></table></figure><blockquote><ul><li>各个选项说明:<ul><li>REPOSTITORY：表示镜像的仓库源</li><li>TAG：镜像的标签(同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本)</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小</li></ul></li></ul></blockquote></li><li><p>获取一个新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker pull &lt;REPOSITORY:TAG&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 REPOSTITORY:TAG 来定义不同的镜像，如ubuntu仓库源15.10的版本：<code>ubuntu:15.10</code>。</p></blockquote></li></ol><h4><span id="21-查找镜像">2.1 查找镜像</span></h4><p>我们可以从<a href="https://hub.docker.com/">Docker Hub</a>网站来搜索镜像。<br>也可以使用<code>docker search</code>命令来搜索镜像。比如我们需要一个httpd的镜像来作为我们的web服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker search httpd</span><br><span class="line">NAME                                    DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">httpd                                   The Apache HTTP Server Project                  3248                [OK]                </span><br><span class="line">centos/httpd                                                                            33                                      [OK]</span><br></pre></td></tr></table></figure><blockquote><ul><li>NAME：镜像仓库源的名称</li><li>DESCRIPTION：镜像的描述</li><li>OFFICIAL：是否docker官方发布</li></ul></blockquote><h4><span id="22-创建镜像">2.2 创建镜像</span></h4><ul><li>当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。<ol><li>使用<code>Dockerfile</code>指令来创建一个新的镜像</li><li>从已经创建的容器中更新镜像，并且提交这个镜像</li></ol></li></ul><ol><li>需要创建一个Dockerfile文件，文件名必须是Dockerfile<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# vim Dockerfile</span><br><span class="line">FROM centos</span><br><span class="line">RUN yum -y install httpd</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install elinks</span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure></li><li>构建镜像，使用<code>docker build</code>进行镜像的构建，最后需要指定Dockerfile文件所在路径；<ul><li>看到最后输出两条Successfully则构建成功。</li><li>它会根据文件中写的内容，使用centos镜像实例化一个容器，进入容器中执行三个yum命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker build -t jenkins/centos-http-net /home/jenkins</span><br><span class="line">Successfully built 09266c896243</span><br><span class="line">Successfully tagged jenkins/centos-http-net:latest</span><br></pre></td></tr></table></figure></li></ul></li><li>查看已经构建好的镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        10 months ago       13.3kB</span><br><span class="line">jenkins/centos-http-net   latest    09266c896243   10 seconds ago   581MB</span><br></pre></td></tr></table></figure></li><li>镜像构建过程<br>在构建命令执行时输出的一大堆信息中，是执行Dockerfile中的每一行，最关键的几行信息如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Step 1/5 : FROM centos  # 调用centos</span><br><span class="line"> 5e35e350aded   # centos镜像id</span><br><span class="line">  </span><br><span class="line">Step 2/5 : RUN yum install httpd -y</span><br><span class="line"> Running in a16ddf07c140  # 运行一个临时容器来执行install httpd</span><br><span class="line">Removing intermediate container a16ddf07c140  # 完成后删除临时的容器id</span><br><span class="line"> b51207823459  # 生成一个镜像</span><br><span class="line">  </span><br><span class="line">Step 3/5 : RUN yum install net-tools -y</span><br><span class="line"> Running in 459c8823018a # 运行一个临时容器执行install net-tools</span><br><span class="line">Removing intermediate container 459c8823018a # 完成后删除临时容器id</span><br><span class="line"> 5b6c30a532d4  # 再生成一个镜像</span><br><span class="line"> </span><br><span class="line">Step 4/5 : RUN yum install elinks -y</span><br><span class="line"> Running in a2cb490f9b2f  # 运行一个临时容器执行install elinks</span><br><span class="line">Removing intermediate container a2cb490f9b2f # 完成后删除临时容器id</span><br><span class="line"> 24ba4735814b # 生成一个镜像</span><br><span class="line"> </span><br><span class="line">Step 5/5 : CMD [&quot;/bin/bash&quot;]</span><br><span class="line"> Running in 792333c88ba8  # 运行临时容器，执行/bin/bash</span><br><span class="line">Removing intermediate container 792333c88ba8  # 完成后删除临时容器id</span><br><span class="line"> 09266c896243  # 生成镜像</span><br><span class="line">Successfully built 09266c896243  # 最终成功后的镜像id就是最后生成的镜像id</span><br></pre></td></tr></table></figure>每一步生成一个镜像，都属于一个docker commit的执行结果<br>在这个过程中一共生成了三个镜像层，都会被存储在graph中，包括层与层之间的关系，查看docker images中生成的镜像id是否为最后生成的镜像id，FROM和CMD都不算做镜像层</li></ol><p>通过<code>docker history</code>也可以看到简单的构建过程，看到的是三个yum就是形成的三个镜像层</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker history chai/centos-http-net:latest </span><br><span class="line">IMAGE         CREATED          CREATED BY                                      SIZE    COMMENT</span><br><span class="line">09266c896243  17 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">24ba4735814b  17 minutes ago   /bin/sh -c yum install elinks -y                121MB               </span><br><span class="line">5b6c30a532d4  18 minutes ago   /bin/sh -c yum install net-tools -y             112MB               </span><br><span class="line">b51207823459  18 minutes ago   /bin/sh -c yum install httpd -y                 145MB               </span><br><span class="line">5e35e350aded  4 months ago     /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;     4 months ago     /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;     4 months ago     /bin/sh -c #(nop) ADD file:45a381049c52b5664…   203MB</span><br></pre></td></tr></table></figure><h3><span id="3-docker容器container">3. Docker容器(Container)</span></h3><p>镜像(Image)的概念更多偏向于一个环境包，这个环境包可以移动到任意的Docker平台中去运行；<br>而容器(Container)就是你运行环境包的实例，换句话说container是images的一种具体表现形式。</p><ul><li>容器相关命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker container ls，列出现在正在运行的容器</span><br><span class="line">docker container ls -a，列出所有的容器，包括没有在运行的</span><br><span class="line">docker ps -a，列出所有的容器，包括没有在运行的</span><br><span class="line">docker run -it centos，交互式运行容器的方法，这样的话运行之后contianer不会退出，但是这个对话关闭这个，contianer还是就会退出了</span><br><span class="line">docker container rm container_id，可以删除一个容器（注意，这里的id可以是完整的容器id，也可以是缩写，只要是可以和别的id区分开的就可以了）</span><br><span class="line">docker rm container_id，默认就是去删除container的，所以是和docker container rm id是一样的</span><br><span class="line">docker images，和docker image ls是一样的，显示本机的所有镜像</span><br><span class="line">docker image rm image_id，删除image，可以是image_id或者image_name</span><br><span class="line">docker rmi id，是和docker image rm id一样的，是简写</span><br><span class="line">docker container ls -aq，只会显示出容器的id，在批量删除容器的时候有用</span><br><span class="line">docker rm $(docker container ls -aq)，删除所有的容器</span><br><span class="line">docker rm $(docker ps -aq)，也是删除所有的容器</span><br><span class="line">docker rm $(docker container ls -f &quot;status=exited&quot; -q)，删除所有不在运行的容器</span><br></pre></td></tr></table></figure><h3><span id="4-dockerfile文件语法">4. Dockerfile文件语法</span></h3>常用构建镜像指令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM  # 指定base镜像</span><br><span class="line">MAINTAINER # 指定镜像作者，后面根任意字符串</span><br><span class="line">COPY # 把文件从host复制到镜像内</span><br><span class="line">  COPY src dest</span><br><span class="line">  COPY [&quot;src&quot;,&quot;dest&quot;]</span><br><span class="line">  src:只能是文件</span><br><span class="line">ADD # 用法和COPY一样，唯一不同时src可以是压缩包，表示解压缩到dest位置，src也可以是目录</span><br><span class="line">ENV # 设置环境变量可以被接下来的镜像层引用，并且会加入到镜像中</span><br><span class="line">  ENV MY_VERSION 1.3</span><br><span class="line">  RUN yum -y install http-$MY_VERSION</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 当进入该镜像的容器中<span class="built_in">echo</span> <span class="variable">$MY_VERSION</span>会输出1.3</span></span><br><span class="line">EXPOSE # 指定容器中的进程监听的端口（接口），会在docker ps -a中的ports中显示</span><br><span class="line">  EXPOSE 80</span><br><span class="line">VOLUME # 容器卷，后面会讲到，把host的路径mount到容器中</span><br><span class="line">  VOLUME /root/htdocs /usr/local/apahce2/htdocs</span><br><span class="line">WORKDIR # 为后续的镜像层设置工作路径</span><br><span class="line">        # 如果不设置，Dockerfile文件中的每一条命令都会返回到初始状态</span><br><span class="line">        # 设置一次后，会一直在该路经执行之后的分层，需要WORKDIR /回到根目录</span><br><span class="line">CMD # 启动容器后默认运行的命令，使用构建完成的镜像实例化为容器时，进入后默认执行的命令</span><br><span class="line">    # 这个命令会被docker run启动命令替代</span><br><span class="line">    # 如：docker -it --rm centos echo &quot;hello&quot;</span><br><span class="line">    # echo &quot;hello&quot;会替代CMD运行的命令</span><br><span class="line">  CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off&quot;]  # 该镜像实例化后的容器，进入后运行nginx启动服务</span><br><span class="line">ENTRYPOINT # 容器启动时运行的命令，不会被docker run的启动命令替代</span><br></pre></td></tr></table></figure><h4><span id="41-runcmdentrypoint区别">4.1 RUN/CMD/ENTRYPOINT区别</span></h4></li></ul><ol><li><code>RUN</code>：执行命令并创建新的镜像层，主要用于安装软件包</li><li><code>ENTRYPOINT</code>和<code>CMD</code>都算作是启动指令，也就是必须启动容器才会去执行的指令，一般用来启动运行程序使用；当ENTRYPOINT和CMD同时存在时，ENTRYPOINT生效。</li><li><code>ENTRYPOINT</code>和<code>CMD</code>使用格式：<ul><li>shell格式： 会始终调用一个shell程序去执行命令，如<code>ENTRYPOINT echo &quot;hello $name&quot;</code></li><li>exec格式：<code>CMD [&quot;命令&quot;, &quot;选项&quot;, &quot;参数&quot;]</code>、<code>ENTRYPOINT [&quot;命令&quot;, &quot;选项&quot;, &quot;参数&quot;]</code><ul><li>exec格式下无法去调用ENV定义的变量，如果非要让exec格式去读取变量的话，它的命令的位置就要使用一个shell环境。因为变量的读取就是使用shell去读取的。如：ENTRYPOINT [“/bin/sh”, “-c”, “echo hello,$变量名”]</li><li>当使用exec格式时，ENTRYPOINT的第一个参数被识别为命令，CMD的参数按顺序变为ENTRYPOINT命令的参数</li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-Docker客户端&quot;&gt;&lt;a href=&quot;#1-Docker客户端&quot; class=&quot;headerlink&quot; title=&quot;1. Docker客户端&quot;&gt;&lt;/a&gt;1. Docker客户端&lt;/h3&gt;&lt;p&gt;docker客户端非常简单，我们可以直接输入&lt;code&gt;docker&lt;/code&gt;命令来查看到Docker客户端的所有命令选项。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost jenkins]# docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过命令&lt;code&gt;docker &amp;lt;command&amp;gt; --help&lt;/code&gt;更深入的了解指定的Docker命令使用方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker入门" scheme="http://chaooo.github.io/categories/docker-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://chaooo.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门（一）Docker简介与安装（Linux环境centos）</title>
    <link href="http://chaooo.github.io/article/20201112.html"/>
    <id>http://chaooo.github.io/article/20201112.html</id>
    <published>2020-11-12T08:30:56.000Z</published>
    <updated>2021-02-03T13:50:32.299Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似于app）,更重要的是容器性能开销极低。</p><a id="more"></a><h3><span id="1-docker解决的问题">1. Docker解决的问题</span></h3><ul><li>解决运行环境和配置问题，方便发布，方便做持续集成。<ul><li>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</li><li><code>Docker</code>主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。</li><li>使用<code>Docker</code>可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。</li></ul></li><li>使用<code>Docker</code>的好处：<ul><li>部署方便且安全，隔离性好，快速回滚，成本低</li></ul></li><li><code>Docker</code>的应用场景：<ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li></ul></li></ul><h3><span id="2-docker架构">2. Docker架构</span></h3><p>Docker使用客户端-服务器(C/S)架构模式，使用远程API来管理和创建Docker容器。<br>Docker容器通过Docker镜像(Images)来创建，容器与镜像的关系类似于面向对象编程中的对象与类。</p><ul><li>Docker镜像(Images)<ul><li>用于创建Docker容器(Container)的模板。</li></ul></li><li>Docker容器(Container)<ul><li>独立运行的一个或一组应用。</li></ul></li><li>Docker客户端(Client)<ul><li>通过命令行或者其他工具使用<a href="https://docs.docker.com/reference/api/docker_remote_api">Docker API</a>与Docker的守护进程通信。</li></ul></li><li>Docker主机(Host)<ul><li>一个物理或者虚拟的机器用于执行Docker守护进程和容器。</li></ul></li><li>Docker仓库(Registry)<ul><li>用来保存镜像(Images)，可以理解为代码控制中的代码仓库，<a href="https://hub.docker.com/">Docker Hub</a>提供了庞大的镜像集合供使用。</li></ul></li><li>Docker Machine<ul><li>一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker。</li></ul></li></ul><h3><span id="3-centos下安装docker">3. CentOS下安装Docker</span></h3><p>要求CentOS 6.5或更高的版本，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。<br>这里演示环境CentOS 8.2。</p><ul><li>添加Docker存储库<ul><li>首先，必须添加一个外部存储库以获得Docker CE。这里使用官方的Docker CE CentOS存储库。</li></ul></li></ul><ol><li>下载docker-ce的repo<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1919  100  1919    0     0   3408      0 --:--:-- --:--:-- --:--:--  3402</span><br></pre></td></tr></table></figure></li><li>安装依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# yum install https://download.docker.com/linux/fedora/32/x86_64/stable/Packages/containerd.io-1.3.7-3.1.fc32.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li>安装docker-ce<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# yum install docker-ce</span><br></pre></td></tr></table></figure></li><li>启动docker<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# systemctl start docker</span><br></pre></td></tr></table></figure></li><li>检查docker服务是否正常运行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# systemctl status docker</span><br></pre></td></tr></table></figure></li><li>测试运行 hello-world<ul><li>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker run hello-world</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:8c5aeeb6a5f3ba4883347d3747a7249f491766ca1caa47e5da5dfcf6b9b717c0</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。&lt;br&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。&lt;br&gt;容器是完全使用沙箱机制，相互之间不会有任何接口（类似于app）,更重要的是容器性能开销极低。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker入门" scheme="http://chaooo.github.io/categories/docker-learn/"/>
    
    
    <category term="CentOS" scheme="http://chaooo.github.io/tags/CentOS/"/>
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://chaooo.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins入门（三）使用Maven构建Java应用程序</title>
    <link href="http://chaooo.github.io/article/20201110.html"/>
    <id>http://chaooo.github.io/article/20201110.html</id>
    <published>2020-11-10T10:56:55.000Z</published>
    <updated>2021-02-03T13:50:16.352Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-添加git凭据">1. 添加git凭据</span></h3><p>若安装Jenkins时安装的推荐插件，git已经默认安装了，我们添加git凭据：</p><ol><li><code>系统管理(Manage Jenkins)</code> -&gt; <code>Manage Credentials</code> -&gt; <code>全局</code> -&gt; <code>添加凭据</code>。<ul><li>类型选择<code>SSH Username with private key</code>，往下滑到<code>Private Key</code>，并勾选<code>Enter directly</code>，在<code>Enter directly</code>的key区域点击<code>Add</code>，粘贴本机<code>git私钥</code>，点击确定。</li><li>类型选择<code>Username with password</code>，填写git用户名和密码，点击确定。<a id="more"></a></li></ul></li></ol><blockquote><p>本机Git私钥获取：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat .ssh/id_rsa</span><br></pre></td></tr></table></figure><blockquote><p>git公钥私钥生成详细细节参考<a href="https://my.oschina.net/chaoo/blog/4709339">物理机安装CentOS 8.0</a>的安装配置Git。</p></blockquote><h3><span id="2-jenkins配置maven与publish-over-ssh插件">2. Jenkins配置<code>Maven</code>与<code>Publish Over SSH</code>插件</span></h3><ol><li>在插件管理搜索<code>Maven</code>，找到<code>Maven Integration</code>并勾选，然后点击<code>直接安装</code>。</li><li>接下来同样方法安装<code>Publish Over SSH</code>插件(用来通过<code>ssh命令</code>发送Maven的构建)。</li><li>配置全局变量，添加要部署的远程用户：<ul><li><code>系统管理(Manage Jenkins)</code> -&gt; 点击<code>Configure System</code> -&gt; 往下滑到<code>SSH Server</code>；</li><li>在<code>SSH Servers</code>这里点击<code>新增</code>，填写用户信息(Name:此配置名，HostNmae:要连接的SSH主机名或IP地址，UserName:远程用户名)；</li><li>点击<code>高级</code>配置密码，勾选<code>Use password authentication, or use a different key</code>，在<code>Passphrase / Password</code>输入远程用户密码；</li><li>点击<code>Test Configuration</code>测试能否连通，最后点击<code>保存</code>。</li></ul></li><li>配置mavne的jenkins本地仓库：<ul><li><code>系统管理(Manage Jenkins)</code> -&gt; 点击<code>Configure System</code> -&gt; 找到<code>Maven项目配置</code>；</li><li><code>Local Maven Repository</code> -&gt; 选择<code>Local to the workspace</code> -&gt; <code>保存</code>。</li></ul></li><li>全局工具配置：<ul><li><code>系统管理(Manage Jenkins)</code> -&gt; 点击<code>Global Tool Configuration</code>；</li><li><code>Maven配置</code> -&gt; <code>默认setting/全局setting</code>选择<code>Settings file in filesystem</code> -&gt; 填写本机安装Maven的setting路径，如<code>/usr/local/apache-maven-3.6.3/conf/settings.xml</code></li><li><code>JDK</code> -&gt; <code>JDK安装</code> -&gt; <code>新增JDK</code> -&gt; <code>JAVA_HOME</code>填写java安装目录，如<code>/usr/lib/jvm/java-openjdk</code></li><li><code>Git</code> -&gt; <code>Git installations</code> -&gt; <code>Path to Git executable</code>填写<code>/usr/bin/git</code>(可用which -a git查看)</li><li><code>Maven</code> -&gt; <code>Maven安装</code> -&gt; <code>新增Maven</code> -&gt; <code>MAVEN_HOME</code>填写Maven安装目录，如<code>/usr/local/apache-maven-3.6.3</code></li></ul></li></ol><h3><span id="3-使用maven构建java应用程序">3. 使用Maven构建Java应用程序</span></h3><ol><li>新建Item， 输入任务名称，选择Maven项目，点击“确定”</li><li>源码管理，选择Git，填写仓库地址(<code>Repository URL</code>)和选择凭据(<code>Credentials</code>)</li><li>构建环境，勾选<code>Add timestamps to the Console Output</code>，加上时间戳</li><li>Build，<code>Goals and options</code>根据自己情况自行修改：<code>clean package -pl demo -am -Dmaven.test.skip=true -P beta</code><ul><li>-pl 选项后可跟随{groupId}:{artifactId}或者所选模块的相对路径(多个模块以逗号分隔)，这里只想打包demo模块</li><li>-am 表示同时处理选定模块所依赖的模块</li><li>-P 打包的环境</li></ul></li><li>Post Steps，发布步骤，这里可以选择执行shell脚本Execute shell（发布到和Jenkins是同一台服务器），Send files or execute commands over SSH（不同服务器）。</li></ol><h3><span id="4-maven构建配置post-steps">4. Maven构建配置【Post Steps】</span></h3><ol><li>若发布到和Jenkins是同一台服务器，下拉框列表选择<code>Execute shell</code>，然后填写shell脚本；</li><li>若不在同一服务器，下拉框选择<code>Send files or execute commands over SSH</code>，配置<code>SSH Server</code><ul><li><code>Source files</code>填写Maven本地打包后Jar包路径，如：<code>target/demo-0.0.1-SNAPSHOT.jar</code></li><li><code>Remove prefix</code>去除前缀，如：<code>target/</code></li><li><code>Remote directory</code>拷贝到Linux服务器的路径，如：<code>/home/jenkins/test</code></li><li><code>Exec command</code>Jar包拷贝后，执行脚本运行Jar包。</li></ul></li><li>shell脚本详情(填写时去掉注释)：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台执行</span></span><br><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到项目</span></span><br><span class="line">cd /home/jenkins/test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到原进程,<span class="built_in">kill</span></span></span><br><span class="line">Project_name=test</span><br><span class="line">pid=$(ps -ef | grep java| grep $Project_name|awk -F &#x27;[ ]+&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">kill -9 $pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动jar</span></span><br><span class="line">nohup java -jar $Project_name.jar &gt; run.txt &amp;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-添加git凭据&quot;&gt;&lt;a href=&quot;#1-添加git凭据&quot; class=&quot;headerlink&quot; title=&quot;1. 添加git凭据&quot;&gt;&lt;/a&gt;1. 添加git凭据&lt;/h3&gt;&lt;p&gt;若安装Jenkins时安装的推荐插件，git已经默认安装了，我们添加git凭据：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;系统管理(Manage Jenkins)&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Credentials&lt;/code&gt; -&amp;gt; &lt;code&gt;全局&lt;/code&gt; -&amp;gt; &lt;code&gt;添加凭据&lt;/code&gt;。&lt;ul&gt;
&lt;li&gt;类型选择&lt;code&gt;SSH Username with private key&lt;/code&gt;，往下滑到&lt;code&gt;Private Key&lt;/code&gt;，并勾选&lt;code&gt;Enter directly&lt;/code&gt;，在&lt;code&gt;Enter directly&lt;/code&gt;的key区域点击&lt;code&gt;Add&lt;/code&gt;，粘贴本机&lt;code&gt;git私钥&lt;/code&gt;，点击确定。&lt;/li&gt;
&lt;li&gt;类型选择&lt;code&gt;Username with password&lt;/code&gt;，填写git用户名和密码，点击确定。</summary>
    
    
    
    <category term="Jenkins入门" scheme="http://chaooo.github.io/categories/jenkins-learn/"/>
    
    
    <category term="Linux" scheme="http://chaooo.github.io/tags/Linux/"/>
    
    <category term="Jenkins" scheme="http://chaooo.github.io/tags/Jenkins/"/>
    
  </entry>
  
</feed>
