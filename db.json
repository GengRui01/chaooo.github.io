{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1562469885966},{"_id":"themes/BlueLake/README.md","hash":"18a900a2987acb5d43086f141929627df38c179d","modified":1562469885969},{"_id":"themes/BlueLake/_config.yml","hash":"f69afe1f6b19faeb7ed4eb36fd3ffcfec9f39539","modified":1562498604567},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1562469886004},{"_id":"themes/BlueLake/README.en.md","hash":"76269fd9d9f7f6f457b242ae73d0e90f104de5fb","modified":1562469885967},{"_id":"source/_posts/BlueLake博客主题的详细配置.md","hash":"c89ebabd53c2e5cc4ed99905d1cd1feb3a652cf0","modified":1562468771428},{"_id":"source/_posts/Hexo3-2-github搭建静态博客.md","hash":"d6e8eac054081ce193035a1c3e43571af05353c6","modified":1562468771430},{"_id":"source/_posts/J2SE面向对象.md","hash":"dc7735f8b2f11e6d46f806c5bdee2b9640e47218","modified":1562498344689},{"_id":"source/_posts/MongoDB学习笔记.md","hash":"39011edebf356d56bf4f7173f6a4dab0323193bb","modified":1562481374618},{"_id":"source/_posts/Web包管理器-Bower.md","hash":"c217401b1a6d971c97c69b37a1fa0f9030bcefac","modified":1562468771447},{"_id":"source/_posts/Win10下配置Nginx-php7-mysql-5-6.md","hash":"2b8d194c452cb7c58839ab1f6c8abb8c30bc4acd","modified":1562468771448},{"_id":"source/_posts/hello-world.md","hash":"a571d5a7c330d8906075139a7f69c5cc4b3cf87f","modified":1562468771449},{"_id":"source/_posts/sublime-text3个人习惯配置-C.md","hash":"ca95911540531a7ed05987cd1fe85907a5ed1350","modified":1562468771449},{"_id":"source/_posts/自定义HEXO站内搜索Javascript-json.md","hash":"1e2403133c932229249893d8e083d3cb16ebca59","modified":1562468771450},{"_id":"source/_posts/J2SE语法基础.md","hash":"4d181c93ab2cc65fa2a52c889f42dc9ad78728e0","modified":1562494129756},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562469885882},{"_id":"themes/BlueLake/.git/config","hash":"7e25608fae05296ec4af5a16d8ecf5042faf30a3","modified":1562469885893},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562469873988},{"_id":"themes/BlueLake/.git/index","hash":"79b2516e716b33233c4adb15499edd12aac79faa","modified":1562491125764},{"_id":"themes/BlueLake/.git/packed-refs","hash":"6fb50c49066dc1d6109757f03a9a2ae69c6eb0d4","modified":1562469885873},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"85f06e2ea9a45bb55761b29cda4487f782557b2b","modified":1562469885971},{"_id":"themes/BlueLake/languages/en.yml","hash":"fe087d478a81ffc15f93f2295bc2b6f49a149c3d","modified":1562469885972},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"a57b9b768346adfe1c1553c4b727d5c113a52480","modified":1562469885973},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"fff49dfae21808bb1edd74dfe4f14c457b64c191","modified":1562469885974},{"_id":"themes/BlueLake/languages/ko.yml","hash":"bd3c4058a43a0f6e239f360261f3260c87c185f0","modified":1562469885975},{"_id":"themes/BlueLake/languages/tr.yml","hash":"47d1dfd33fb1f0acbb1dfd400854d265ae8ccd45","modified":1562469885976},{"_id":"source/about/index.md","hash":"083adf2e49d2a4b6d47af102abc5ebc11fa47ff8","modified":1562468771451},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"b388d0e44084026dedaf4ffdf7536e06bc8b37a8","modified":1562469885977},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"9a7ffb9f16af9fdca51d818e4fd2eb9f7e8ba9cf","modified":1562469885978},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1562469885997},{"_id":"themes/BlueLake/layout/base.jade","hash":"fd0d4e3878e48c5aa40bb1946703b9543fb5d3c7","modified":1562481829157},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1562469885999},{"_id":"themes/BlueLake/layout/index.jade","hash":"6406182f71d0f36757e91c5ec999f244c1f83c68","modified":1562469886000},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1562469886001},{"_id":"themes/BlueLake/layout/post.jade","hash":"2099b699b9d22ec60e9970f4877cfd091a8622bf","modified":1562485541543},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1562469886003},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1562469886005},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1562469886010},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562469873990},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562469873997},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562469873999},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562469874001},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1562469874002},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562469874003},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1562469874013},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1562469874015},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562469874017},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562469874019},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"7f013086f2e2750e6b4b6db9701607eb3ec6bb50","modified":1562469885888},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"0c80970e25b8532e3009220eaa100fc64520ee95","modified":1562485550493},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1562469885980},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"3fa65886665e8165640d22ede8dd3b06a0554583","modified":1562481831332},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"f95aa1d48752fe47046c0ba89199ad765351b510","modified":1562482109311},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"138e32ba7f01ced06558a8bbcf85423f697abb00","modified":1562485602196},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1562469885984},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1562469885985},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1562469885986},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1562469885987},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"44de0851108bca8404f5614d5101c7a7ee67754d","modified":1562482168921},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1562469885988},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1562469885989},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1562469885990},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1562469885991},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1562469885992},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1562469885993},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1562469885993},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1562469885994},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1562469885995},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"11dfe68ade914332c484a4dceaec215bf8b62ee7","modified":1562469886006},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1562469886007},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"e6d64c4c9d61a49d0c0682bc2d6a1e68c8c16c55","modified":1562497203848},{"_id":"themes/BlueLake/source/css/style.styl","hash":"ebb455ffaf3457736916406057b79be0962c7f51","modified":1562469886009},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1562469886012},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1562469886013},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1562469886014},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1562469886016},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1562469886021},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1562469886022},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1562469886023},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1562469886020},{"_id":"themes/BlueLake/.git/objects/pack/pack-a8648c582315762d09a3092df6c5cdc5460c3b90.idx","hash":"6c886117ec82a594e268a026b2ae258365b5f898","modified":1562469885599},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"c267bddbfc3cc43de3f7124c4449d3b343552f72","modified":1562469885886},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1562469886018},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"e1337f4029ddd37e8d9657d1b05023b5ea715acf","modified":1562469886025},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1562469886026},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1562469886027},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1562469886028},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1562469886029},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1562469886031},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1562469886032},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"7f013086f2e2750e6b4b6db9701607eb3ec6bb50","modified":1562469885887},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1562469885880},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"7f013086f2e2750e6b4b6db9701607eb3ec6bb50","modified":1562469885879},{"_id":"themes/BlueLake/.git/objects/pack/pack-a8648c582315762d09a3092df6c5cdc5460c3b90.pack","hash":"3b75145e7fa3a9bb5347db68bcf9e6ac5eef9d62","modified":1562469885722},{"_id":"public/baidusitemap.xml","hash":"553a0298ace5e0cd9d289d93493acef4cc909f73","modified":1562499210312},{"_id":"public/atom.xml","hash":"ef910fac3cded541f4ca8509ae5db607d4cd2abe","modified":1562499210312},{"_id":"public/content.json","hash":"8c3e961b97e6de20ca6f27981a3a30400efb018a","modified":1562499210329},{"_id":"public/search.xml","hash":"ffd6b63765f4173db030f26bf43b019c78b35138","modified":1562499210330},{"_id":"public/sitemap.xml","hash":"6984166060732bdc702ed646391fce6cc4cfd385","modified":1562499210330},{"_id":"public/about/index.html","hash":"78a57ffea88b15f15b1a432cd5e80835796ba166","modified":1562499210338},{"_id":"public/2015/12/31/hello-world.html","hash":"0e6e685c370b24867f8dd1f4dae93e359dd806df","modified":1562499210338},{"_id":"public/archives/index.html","hash":"2e5661846b1bf6ae8dcbc5afce3f15a299a5e24b","modified":1562499210338},{"_id":"public/archives/2015/index.html","hash":"11c5b309964b71156c39ba5658de84400b00dde0","modified":1562499210338},{"_id":"public/archives/2015/12/index.html","hash":"11c5b309964b71156c39ba5658de84400b00dde0","modified":1562499210338},{"_id":"public/archives/2016/index.html","hash":"53f1e99af950335ef5b0b98e7f5643119ea4b9b5","modified":1562499210338},{"_id":"public/archives/2016/05/index.html","hash":"e0743b5983fe8f818175e7885b37f2e480e70fdf","modified":1562499210339},{"_id":"public/archives/2016/06/index.html","hash":"836b725894d6293e183318dcc6d46cf57d9847d9","modified":1562499210339},{"_id":"public/archives/2016/07/index.html","hash":"a88e19d67023c049ef7374948dd53c97106df08c","modified":1562499210339},{"_id":"public/archives/2016/08/index.html","hash":"d947f6fb6bacdcbed7cfff319692df59b80d14aa","modified":1562499210339},{"_id":"public/archives/2016/11/index.html","hash":"da0ef3ce5390f1530c38c727d713f1bab1bbb847","modified":1562499210339},{"_id":"public/archives/2016/12/index.html","hash":"27b5d13a87351f63c3125c3d42997746e643f15b","modified":1562499210339},{"_id":"public/archives/2019/index.html","hash":"ae984246d641f87920a57adb61039204631efe8e","modified":1562499210339},{"_id":"public/archives/2019/02/index.html","hash":"2e0174a9839cf617a0d44d310a9a66ddc40478bd","modified":1562499210339},{"_id":"public/archives/2019/07/index.html","hash":"e964ce2951291a8158cd8fb70d3fcf34e98a5bba","modified":1562499210339},{"_id":"public/categories/hexo博客折腾/index.html","hash":"2465ebadd6c9bb52cf392631992449494be81c0d","modified":1562499210340},{"_id":"public/categories/前端工具/index.html","hash":"0b657c101319cc15a6886b639102dc80bd345119","modified":1562499210340},{"_id":"public/categories/javaSE知识梳理/index.html","hash":"2b0b139b8ca2c08d333cd32bacd01eab4e75f09f","modified":1562499210340},{"_id":"public/categories/数据库/index.html","hash":"a58faaadf719bf70db469a30610d92af5a32b442","modified":1562499210340},{"_id":"public/index.html","hash":"f5cbf46f679f229943f16b2b00e3d2793e07cbe2","modified":1562499210340},{"_id":"public/page/2/index.html","hash":"3b84f37cf13a5177057359ca5ad0414df977c9e3","modified":1562499210340},{"_id":"public/tags/hexo/index.html","hash":"b9a95f4faff8252bbec1bb5c3e63a56199350605","modified":1562499210340},{"_id":"public/tags/bower/index.html","hash":"d836d3d46ea8e73d5fe5e5d03e3aed0b113a2684","modified":1562499210340},{"_id":"public/tags/sublime/index.html","hash":"c92d62e2389aa50199a68209b07654b2135b75b6","modified":1562499210341},{"_id":"public/tags/javascript/index.html","hash":"8b8119b750543cf7affae10e24849b99a51980b6","modified":1562499210341},{"_id":"public/tags/javaSE/index.html","hash":"f0b5cd79e730c8e1c03e5d96d7ad7d707b93affc","modified":1562499210341},{"_id":"public/tags/后端开发/index.html","hash":"9217920609acf62af5088653522671fb260cd34e","modified":1562499210341},{"_id":"public/tags/BlueLake/index.html","hash":"f58d507fab911a56902b7d878794cead13bb3296","modified":1562499210341},{"_id":"public/tags/mongodb/index.html","hash":"2ae96067e01f658f042677f3a11471e01dd44938","modified":1562499210341},{"_id":"public/2019/07/07/J2SE面向对象.html","hash":"0206bde25304cab47e0771f6fb9f4b9d0d4ba5e9","modified":1562499210341},{"_id":"public/2019/07/07/J2SE语法基础.html","hash":"7f41bba3e9a322ea205ef5ef7414b3462a613ac5","modified":1562499210341},{"_id":"public/2019/02/22/Win10下配置Nginx-php7-mysql-5-6.html","hash":"f9325dbe0cc28f606accc2356c89059c49a8d26d","modified":1562499210341},{"_id":"public/2016/12/29/BlueLake博客主题的详细配置.html","hash":"99f46f5e2253e8214250deb0fb7be044777afd92","modified":1562499210341},{"_id":"public/2016/11/09/自定义HEXO站内搜索Javascript-json.html","hash":"60eac1de7f653f03fff1116cbcbeb88b58ae512e","modified":1562499210342},{"_id":"public/2016/08/12/Web包管理器-Bower.html","hash":"6d6cf28f4d7cdcacc7d3963fa2f20d43ac9951a2","modified":1562499210342},{"_id":"public/2016/07/30/MongoDB学习笔记.html","hash":"d27b5c22e187227c2964e35f3483b6698ec9ea1b","modified":1562499210342},{"_id":"public/2016/06/29/sublime-text3个人习惯配置-C.html","hash":"6165189ee44f6616692a7fd87ce9fad5cfceb9e1","modified":1562499210342},{"_id":"public/2016/05/23/Hexo3-2-github搭建静态博客.html","hash":"230e60679270a8a230fc4fef5238ac4991c1101a","modified":1562499210342},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1562499210357},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1562499210357},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1562499210357},{"_id":"public/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1562499210357},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1562499210357},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1562499210357},{"_id":"public/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1562499210358},{"_id":"public/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1562499210358},{"_id":"public/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1562499210358},{"_id":"public/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1562499210358},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1562499210850},{"_id":"public/css/highlight-dark.css","hash":"0fabf7a922ac0703492ba406608ce972f749bbb9","modified":1562499210857},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1562499210858},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1562499210858},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1562499210859},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1562499210859},{"_id":"public/share/css/share.css","hash":"31af1d5174b1f7d3d62813dda5339f911ce0e668","modified":1562499210859},{"_id":"public/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1562499210859},{"_id":"public/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1562499211315},{"_id":"public/css/style.css","hash":"a75205a59408168e5f936ccb3d23f22e643a4fb4","modified":1562499211321},{"_id":"public/css/style-dark.css","hash":"c509fbcca4fab08c5131cbc3bbfd47c500e60a83","modified":1562499211321},{"_id":"public/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1562499211338}],"Category":[{"name":"hexo博客折腾","_id":"cjxsvop1u0003jst33wki1w8u"},{"name":"前端工具","_id":"cjxsvop250008jst3x6s89r7j"},{"name":"javaSE知识梳理","_id":"cjxsvop2j000ljst3jpag2t25"},{"name":"数据库","_id":"cjxsvop5q0011jst33uwggoev"}],"Data":[],"Page":[{"title":"about","date":"2016-11-09T09:29:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-09 17:29:51\n---\n","updated":"2019-07-07T03:06:11.451Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxsvop1o0001jst3yftpz0ud","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo3.2+GitHub搭建静态博客","date":"2016-05-23T03:16:51.000Z","_content":"\n### 开始之前\n\n在安装[hexo](https://hexo.io/zh-cn/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n<!-- more --> \n#### 1.创建GitHub仓库\n注册[GitHub](https://github.com/)账号，创建一个以\"用户名.github.io\"命名的仓库，如我的用户名为chaooo,那我的仓库名为：[chaooo.github.io](https://github.com/chaooo/chaooo.github.io)，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n#### 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n#### 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH\n``` bash\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。\n输入以下指令后，一路回车就好：\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n然后键入以下指令：\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n如果出现这个错误:`Could not open a connection to your authentication agent`，则先执行如下命令即可：\n``` bash\n$ ssh-agent bash\n```\n再重新输入指令：\n``` bash\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n``` bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github上点击你的头像-->Your profile-->Edit profile-->SSH and GPG keys-->New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。\n最后还是测试一下吧，键入以下命令：\n``` bash\n$ ssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好。\n#### 4.初始化hexo文件夹\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。\n在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop <刚复制的地址>\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n### Hexo安装配置\n\n#### 1.Hexo初始化\n进入Hexo-admin文件夹\n``` bash\n$ cd Hexo-admin\n```\n接下来只需要使用 npm 即可完成 Hexo 的安装:\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:\n``` bash\n$ hexo init\n$ npm install\n```\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。\n``` bash\n$ hexo generate\n$ hexo server\n```\n输入Ctrl+C停止服务。\n#### 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: \n  repository:\n```\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n#### 3.完成部署\n最后一步，快要成功了，键入指令：\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n输入弹出框的用户名与密码(首次使用git会弹出)。\nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[chaooo.github.io/](http://chaooo.github.io/)\n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：\n``` bash\n    To https://github.com/chaooo/chaooo.github.io.git\n       7f3b50a..128a10d  HEAD -> master\n    INFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n### 日常操作\n\n#### 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source\\_posts\\文章标题.md 。 \n``` bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n然后用编辑器打开“文章标题.md”按照[Markdown语法](http://www.appinn.com/markdown/)书写文章。\n 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，\n 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md\n``` bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：\n``` bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用\"将其包围。\n`请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。`\n#### 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n``` bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n然后才执行hexo generate -d发布网站到master分支上。\n``` bash\n$ hexo generate -d\n```\n#### 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n##### 3.1拷贝仓库\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git \n```\n##### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:\n``` bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n##### 小Tips:hexo 命令\n``` bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","source":"_posts/Hexo3-2-github搭建静态博客.md","raw":"---\ntitle: Hexo3.2+GitHub搭建静态博客\ndate: 2016-05-23 11:16:51\ntags: hexo\ncategories: hexo博客折腾\n---\n\n### 开始之前\n\n在安装[hexo](https://hexo.io/zh-cn/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n<!-- more --> \n#### 1.创建GitHub仓库\n注册[GitHub](https://github.com/)账号，创建一个以\"用户名.github.io\"命名的仓库，如我的用户名为chaooo,那我的仓库名为：[chaooo.github.io](https://github.com/chaooo/chaooo.github.io)，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n#### 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n#### 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH\n``` bash\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。\n输入以下指令后，一路回车就好：\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n然后键入以下指令：\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n如果出现这个错误:`Could not open a connection to your authentication agent`，则先执行如下命令即可：\n``` bash\n$ ssh-agent bash\n```\n再重新输入指令：\n``` bash\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n``` bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github上点击你的头像-->Your profile-->Edit profile-->SSH and GPG keys-->New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。\n最后还是测试一下吧，键入以下命令：\n``` bash\n$ ssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好。\n#### 4.初始化hexo文件夹\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。\n在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop <刚复制的地址>\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n### Hexo安装配置\n\n#### 1.Hexo初始化\n进入Hexo-admin文件夹\n``` bash\n$ cd Hexo-admin\n```\n接下来只需要使用 npm 即可完成 Hexo 的安装:\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:\n``` bash\n$ hexo init\n$ npm install\n```\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。\n``` bash\n$ hexo generate\n$ hexo server\n```\n输入Ctrl+C停止服务。\n#### 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: \n  repository:\n```\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n#### 3.完成部署\n最后一步，快要成功了，键入指令：\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n输入弹出框的用户名与密码(首次使用git会弹出)。\nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[chaooo.github.io/](http://chaooo.github.io/)\n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：\n``` bash\n    To https://github.com/chaooo/chaooo.github.io.git\n       7f3b50a..128a10d  HEAD -> master\n    INFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n### 日常操作\n\n#### 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source\\_posts\\文章标题.md 。 \n``` bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n然后用编辑器打开“文章标题.md”按照[Markdown语法](http://www.appinn.com/markdown/)书写文章。\n 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，\n 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md\n``` bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：\n``` bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用\"将其包围。\n`请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。`\n#### 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n``` bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n然后才执行hexo generate -d发布网站到master分支上。\n``` bash\n$ hexo generate -d\n```\n#### 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n##### 3.1拷贝仓库\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git \n```\n##### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:\n``` bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n##### 小Tips:hexo 命令\n``` bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","slug":"Hexo3-2-github搭建静态博客","published":1,"updated":"2019-07-07T03:06:11.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop1c0000jst3i29u1kga","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>\n<a id=\"more\"></a> \n<h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h4><p>注册<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href=\"https://github.com/chaooo/chaooo.github.io\" target=\"_blank\" rel=\"noopener\">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h4 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>\n\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p>然后键入以下指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent bash</span><br></pre></td></tr></table></figure>\n\n<p>再重新输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h4 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">$ mkdir Hexo-admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h3><h4 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</span><br></pre></td></tr></table></figure>\n\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>输入Ctrl+C停止服务。</p>\n<h4 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: </span><br><span class=\"line\">  repository:</span><br></pre></td></tr></table></figure>\n\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://chaooo.github.io/\">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">   7f3b50a..128a10d  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<h3 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h3><h4 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></span><br></pre></td></tr></table></figure>\n\n<p>然后用编辑器打开“文章标题.md”按照<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p>\n<h4 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></span><br><span class=\"line\">$ git push origin develop</span><br></pre></td></tr></table></figure>\n\n<p>然后才执行hexo generate -d发布网站到master分支上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate -d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h5 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install hexo</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></span><br><span class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></span><br><span class=\"line\"><span class=\"comment\">#命令的简写</span></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>","more":"<h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h4><p>注册<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href=\"https://github.com/chaooo/chaooo.github.io\" target=\"_blank\" rel=\"noopener\">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h4 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>\n\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p>然后键入以下指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent -s</span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-agent bash</span><br></pre></td></tr></table></figure>\n\n<p>再重新输入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h4 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">$ mkdir Hexo-admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h3><h4 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</span><br></pre></td></tr></table></figure>\n\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>输入Ctrl+C停止服务。</p>\n<h4 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: </span><br><span class=\"line\">  repository:</span><br></pre></td></tr></table></figure>\n\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://chaooo.github.io/\">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</span><br><span class=\"line\">   7f3b50a..128a10d  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<h3 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h3><h4 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></span><br></pre></td></tr></table></figure>\n\n<p>然后用编辑器打开“文章标题.md”按照<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#123; &#123; title &#125; &#125;</span><br><span class=\"line\">date: &#123; &#123; date &#125; &#125;</span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p>\n<h4 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></span><br><span class=\"line\">$ git push origin develop</span><br></pre></td></tr></table></figure>\n\n<p>然后才执行hexo generate -d发布网站到master分支上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate -d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h5 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install hexo</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></span><br><span class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></span><br><span class=\"line\"><span class=\"comment\">#命令的简写</span></span><br><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>"},{"title":"好用的Web包管理器-Bower","date":"2016-08-12T07:32:41.000Z","_content":"\nBower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。\n<!-- more --> \n### 开始之前\n\n在安装[bower](https://bower.io/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n\n### 1.安装Bower\n使用npm，打开终端，键入：\n``` bash\nnpm install -g bower   #全局安装bower\n```\n移步[这里](https://github.com/bower/bower/wiki/Troubleshooting)查看不同平台上安装的问题。\n\n### 2.使用Bower\n使用help命令查看帮助。   \n``` bash\nbower help\n\nUsage:\n    bower <command> [<args>] [<options>]\nCommands:\n    cache                   Manage bower cache\n    help                    Display help information about Bower\n    home                    Opens a package homepage into your favorite browser\n    info                    Info of a particular package\n    init                    Interactively create a bower.json file\n    install                 Install a package locally\n    link                    Symlink a package folder\n    list                    List local packages - and possible updates\n    login                   Authenticate with GitHub and store credentials\n    lookup                  Look up a package URL by name\n    prune                   Removes local extraneous packages\n    register                Register a package\n    search                  Search for a package by name\n    update                  Update a local package\n    uninstall               Remove a local package\n    unregister              Remove a package from the registry\n    version                 Bump a package version\nOptions:\n    -f, --force             Makes various commands more forceful\n    -j, --json              Output consumable JSON\n    -l, --loglevel          What level of logs to report\n    -o, --offline           Do not hit the network\n    -q, --quiet             Only output important information\n    -s, --silent            Do not output anything, besides errors\n    -V, --verbose           Makes output more verbose\n    --allow-root            Allows running commands as root\n    -v, --version           Output Bower version\n    --no-color              Disable colors\nSee 'bower help <command>' for more information on a specific command.\n```\n### 3.安装包到本地\n通过命令bower install安装软件包默认到bower_components/目录。\n``` bash\nbower install <package>    #package为包名\n```\n想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.\n``` bash\nbower install  # 通过 bower.json 文件安装\nbower install jquery   # 通过在github上注册的包名安装\nbower install desandro/masonry   # GitHub短链接\nbower install git://github.com/user/package.git   # Github上的 .git\nbower install http://example.com/script.js   # URL\n```\n安装选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Save installed packages into the project’s bower.json dependencies\n    -D, --save-dev: Save installed packages into the project’s bower.json devDependencies\n    -E, --save-exact: Configure installed packages with an exact version rather than semver\n```\n\n### 4.用bower.json文件来管理依赖\n发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行`bower install`就可根据bower.json来安装依赖的包。\n在项目中执行\n``` bash\nbower init\n```\n会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.\n如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上`--save`即可。\n\n### 5.使用下载好的包\n对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：\n``` html\n<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\">\n<script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n```\n\n### 6.更新包\n若下载的包升级了，只需执行`update`命令即可更新，例如：\n``` bash \nbower update jquery\n```\n这样就可以自动升级到最新版的jquery了。\n更新选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Update dependencies in bower.json\n    -D, --save-dev: Update devDependencies in bower.json\n```\n\n### 7.搜索包\n``` bash\nbower search               #搜索所有包\nbower search <packageName> #搜索指定名称的包\n```\n或者可以在[这里:https://bower.io/search/](https://bower.io/search/)搜索喜欢的包.\n\n### 8.卸载包\n``` bash\nbower uninstall <name> [<name> ..] [<options>]\n```\n卸载选项\n``` bash\n    -S, --save: Remove uninstalled packages from the project’s bower.json dependencies\n    -D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies\n```\n","source":"_posts/Web包管理器-Bower.md","raw":"---\ntitle: 好用的Web包管理器-Bower\ndate: 2016-08-12 15:32:41\ntags: bower\ncategories: 前端工具\n---\n\nBower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。\n<!-- more --> \n### 开始之前\n\n在安装[bower](https://bower.io/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n\n### 1.安装Bower\n使用npm，打开终端，键入：\n``` bash\nnpm install -g bower   #全局安装bower\n```\n移步[这里](https://github.com/bower/bower/wiki/Troubleshooting)查看不同平台上安装的问题。\n\n### 2.使用Bower\n使用help命令查看帮助。   \n``` bash\nbower help\n\nUsage:\n    bower <command> [<args>] [<options>]\nCommands:\n    cache                   Manage bower cache\n    help                    Display help information about Bower\n    home                    Opens a package homepage into your favorite browser\n    info                    Info of a particular package\n    init                    Interactively create a bower.json file\n    install                 Install a package locally\n    link                    Symlink a package folder\n    list                    List local packages - and possible updates\n    login                   Authenticate with GitHub and store credentials\n    lookup                  Look up a package URL by name\n    prune                   Removes local extraneous packages\n    register                Register a package\n    search                  Search for a package by name\n    update                  Update a local package\n    uninstall               Remove a local package\n    unregister              Remove a package from the registry\n    version                 Bump a package version\nOptions:\n    -f, --force             Makes various commands more forceful\n    -j, --json              Output consumable JSON\n    -l, --loglevel          What level of logs to report\n    -o, --offline           Do not hit the network\n    -q, --quiet             Only output important information\n    -s, --silent            Do not output anything, besides errors\n    -V, --verbose           Makes output more verbose\n    --allow-root            Allows running commands as root\n    -v, --version           Output Bower version\n    --no-color              Disable colors\nSee 'bower help <command>' for more information on a specific command.\n```\n### 3.安装包到本地\n通过命令bower install安装软件包默认到bower_components/目录。\n``` bash\nbower install <package>    #package为包名\n```\n想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.\n``` bash\nbower install  # 通过 bower.json 文件安装\nbower install jquery   # 通过在github上注册的包名安装\nbower install desandro/masonry   # GitHub短链接\nbower install git://github.com/user/package.git   # Github上的 .git\nbower install http://example.com/script.js   # URL\n```\n安装选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Save installed packages into the project’s bower.json dependencies\n    -D, --save-dev: Save installed packages into the project’s bower.json devDependencies\n    -E, --save-exact: Configure installed packages with an exact version rather than semver\n```\n\n### 4.用bower.json文件来管理依赖\n发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行`bower install`就可根据bower.json来安装依赖的包。\n在项目中执行\n``` bash\nbower init\n```\n会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.\n如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上`--save`即可。\n\n### 5.使用下载好的包\n对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：\n``` html\n<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\">\n<script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n```\n\n### 6.更新包\n若下载的包升级了，只需执行`update`命令即可更新，例如：\n``` bash \nbower update jquery\n```\n这样就可以自动升级到最新版的jquery了。\n更新选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Update dependencies in bower.json\n    -D, --save-dev: Update devDependencies in bower.json\n```\n\n### 7.搜索包\n``` bash\nbower search               #搜索所有包\nbower search <packageName> #搜索指定名称的包\n```\n或者可以在[这里:https://bower.io/search/](https://bower.io/search/)搜索喜欢的包.\n\n### 8.卸载包\n``` bash\nbower uninstall <name> [<name> ..] [<options>]\n```\n卸载选项\n``` bash\n    -S, --save: Remove uninstalled packages from the project’s bower.json dependencies\n    -D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies\n```\n","slug":"Web包管理器-Bower","published":1,"updated":"2019-07-07T03:06:11.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop1r0002jst3iwh44vpx","content":"<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。</p>\n<a id=\"more\"></a> \n<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://bower.io/\" target=\"_blank\" rel=\"noopener\">bower</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>\n<h3 id=\"1-安装Bower\"><a href=\"#1-安装Bower\" class=\"headerlink\" title=\"1.安装Bower\"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g bower   <span class=\"comment\">#全局安装bower</span></span><br></pre></td></tr></table></figure>\n\n<p>移步<a href=\"https://github.com/bower/bower/wiki/Troubleshooting\" target=\"_blank\" rel=\"noopener\">这里</a>查看不同平台上安装的问题。</p>\n<h3 id=\"2-使用Bower\"><a href=\"#2-使用Bower\" class=\"headerlink\" title=\"2.使用Bower\"></a>2.使用Bower</h3><p>使用help命令查看帮助。   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">    bower &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class=\"line\">Commands:</span><br><span class=\"line\">    cache                   Manage bower cache</span><br><span class=\"line\">    <span class=\"built_in\">help</span>                    Display <span class=\"built_in\">help</span> information about Bower</span><br><span class=\"line\">    home                    Opens a package homepage into your favorite browser</span><br><span class=\"line\">    info                    Info of a particular package</span><br><span class=\"line\">    init                    Interactively create a bower.json file</span><br><span class=\"line\">    install                 Install a package locally</span><br><span class=\"line\">    link                    Symlink a package folder</span><br><span class=\"line\">    list                    List <span class=\"built_in\">local</span> packages - and possible updates</span><br><span class=\"line\">    login                   Authenticate with GitHub and store credentials</span><br><span class=\"line\">    lookup                  Look up a package URL by name</span><br><span class=\"line\">    prune                   Removes <span class=\"built_in\">local</span> extraneous packages</span><br><span class=\"line\">    register                Register a package</span><br><span class=\"line\">    search                  Search <span class=\"keyword\">for</span> a package by name</span><br><span class=\"line\">    update                  Update a <span class=\"built_in\">local</span> package</span><br><span class=\"line\">    uninstall               Remove a <span class=\"built_in\">local</span> package</span><br><span class=\"line\">    unregister              Remove a package from the registry</span><br><span class=\"line\">    version                 Bump a package version</span><br><span class=\"line\">Options:</span><br><span class=\"line\">    -f, --force             Makes various commands more forceful</span><br><span class=\"line\">    -j, --json              Output consumable JSON</span><br><span class=\"line\">    -l, --loglevel          What level of logs to report</span><br><span class=\"line\">    -o, --offline           Do not hit the network</span><br><span class=\"line\">    -q, --quiet             Only output important information</span><br><span class=\"line\">    -s, --silent            Do not output anything, besides errors</span><br><span class=\"line\">    -V, --verbose           Makes output more verbose</span><br><span class=\"line\">    --allow-root            Allows running commands as root</span><br><span class=\"line\">    -v, --version           Output Bower version</span><br><span class=\"line\">    --no-color              Disable colors</span><br><span class=\"line\">See <span class=\"string\">'bower help &lt;command&gt;'</span> <span class=\"keyword\">for</span> more information on a specific <span class=\"built_in\">command</span>.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装包到本地\"><a href=\"#3-安装包到本地\" class=\"headerlink\" title=\"3.安装包到本地\"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install &lt;package&gt;    <span class=\"comment\">#package为包名</span></span><br></pre></td></tr></table></figure>\n\n<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install  <span class=\"comment\"># 通过 bower.json 文件安装</span></span><br><span class=\"line\">bower install jquery   <span class=\"comment\"># 通过在github上注册的包名安装</span></span><br><span class=\"line\">bower install desandro/masonry   <span class=\"comment\"># GitHub短链接</span></span><br><span class=\"line\">bower install git://github.com/user/package.git   <span class=\"comment\"># Github上的 .git</span></span><br><span class=\"line\">bower install http://example.com/script.js   <span class=\"comment\"># URL</span></span><br></pre></td></tr></table></figure>\n\n<p>安装选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-F, --force-latest: Force latest version on conflict</span><br><span class=\"line\">-p, --production: Do not install project devDependencies</span><br><span class=\"line\">-S, --save: Save installed packages into the project’s bower.json dependencies</span><br><span class=\"line\">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</span><br><span class=\"line\">-E, --save-exact: Configure installed packages with an exact version rather than semver</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-用bower-json文件来管理依赖\"><a href=\"#4-用bower-json文件来管理依赖\" class=\"headerlink\" title=\"4.用bower.json文件来管理依赖\"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower init</span><br></pre></td></tr></table></figure>\n\n<p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p>\n<h3 id=\"5-使用下载好的包\"><a href=\"#5-使用下载好的包\" class=\"headerlink\" title=\"5.使用下载好的包\"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/jquery/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-更新包\"><a href=\"#6-更新包\" class=\"headerlink\" title=\"6.更新包\"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower update jquery</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以自动升级到最新版的jquery了。<br>更新选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-F, --force-latest: Force latest version on conflict</span><br><span class=\"line\">-p, --production: Do not install project devDependencies</span><br><span class=\"line\">-S, --save: Update dependencies <span class=\"keyword\">in</span> bower.json</span><br><span class=\"line\">-D, --save-dev: Update devDependencies <span class=\"keyword\">in</span> bower.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-搜索包\"><a href=\"#7-搜索包\" class=\"headerlink\" title=\"7.搜索包\"></a>7.搜索包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower search               <span class=\"comment\">#搜索所有包</span></span><br><span class=\"line\">bower search &lt;packageName&gt; <span class=\"comment\">#搜索指定名称的包</span></span><br></pre></td></tr></table></figure>\n\n<p>或者可以在<a href=\"https://bower.io/search/\" target=\"_blank\" rel=\"noopener\">这里:https://bower.io/search/</a>搜索喜欢的包.</p>\n<h3 id=\"8-卸载包\"><a href=\"#8-卸载包\" class=\"headerlink\" title=\"8.卸载包\"></a>8.卸载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure>\n\n<p>卸载选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</span><br><span class=\"line\">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。</p>","more":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://bower.io/\" target=\"_blank\" rel=\"noopener\">bower</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>。</p>\n<h3 id=\"1-安装Bower\"><a href=\"#1-安装Bower\" class=\"headerlink\" title=\"1.安装Bower\"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g bower   <span class=\"comment\">#全局安装bower</span></span><br></pre></td></tr></table></figure>\n\n<p>移步<a href=\"https://github.com/bower/bower/wiki/Troubleshooting\" target=\"_blank\" rel=\"noopener\">这里</a>查看不同平台上安装的问题。</p>\n<h3 id=\"2-使用Bower\"><a href=\"#2-使用Bower\" class=\"headerlink\" title=\"2.使用Bower\"></a>2.使用Bower</h3><p>使用help命令查看帮助。   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">    bower &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class=\"line\">Commands:</span><br><span class=\"line\">    cache                   Manage bower cache</span><br><span class=\"line\">    <span class=\"built_in\">help</span>                    Display <span class=\"built_in\">help</span> information about Bower</span><br><span class=\"line\">    home                    Opens a package homepage into your favorite browser</span><br><span class=\"line\">    info                    Info of a particular package</span><br><span class=\"line\">    init                    Interactively create a bower.json file</span><br><span class=\"line\">    install                 Install a package locally</span><br><span class=\"line\">    link                    Symlink a package folder</span><br><span class=\"line\">    list                    List <span class=\"built_in\">local</span> packages - and possible updates</span><br><span class=\"line\">    login                   Authenticate with GitHub and store credentials</span><br><span class=\"line\">    lookup                  Look up a package URL by name</span><br><span class=\"line\">    prune                   Removes <span class=\"built_in\">local</span> extraneous packages</span><br><span class=\"line\">    register                Register a package</span><br><span class=\"line\">    search                  Search <span class=\"keyword\">for</span> a package by name</span><br><span class=\"line\">    update                  Update a <span class=\"built_in\">local</span> package</span><br><span class=\"line\">    uninstall               Remove a <span class=\"built_in\">local</span> package</span><br><span class=\"line\">    unregister              Remove a package from the registry</span><br><span class=\"line\">    version                 Bump a package version</span><br><span class=\"line\">Options:</span><br><span class=\"line\">    -f, --force             Makes various commands more forceful</span><br><span class=\"line\">    -j, --json              Output consumable JSON</span><br><span class=\"line\">    -l, --loglevel          What level of logs to report</span><br><span class=\"line\">    -o, --offline           Do not hit the network</span><br><span class=\"line\">    -q, --quiet             Only output important information</span><br><span class=\"line\">    -s, --silent            Do not output anything, besides errors</span><br><span class=\"line\">    -V, --verbose           Makes output more verbose</span><br><span class=\"line\">    --allow-root            Allows running commands as root</span><br><span class=\"line\">    -v, --version           Output Bower version</span><br><span class=\"line\">    --no-color              Disable colors</span><br><span class=\"line\">See <span class=\"string\">'bower help &lt;command&gt;'</span> <span class=\"keyword\">for</span> more information on a specific <span class=\"built_in\">command</span>.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装包到本地\"><a href=\"#3-安装包到本地\" class=\"headerlink\" title=\"3.安装包到本地\"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install &lt;package&gt;    <span class=\"comment\">#package为包名</span></span><br></pre></td></tr></table></figure>\n\n<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install  <span class=\"comment\"># 通过 bower.json 文件安装</span></span><br><span class=\"line\">bower install jquery   <span class=\"comment\"># 通过在github上注册的包名安装</span></span><br><span class=\"line\">bower install desandro/masonry   <span class=\"comment\"># GitHub短链接</span></span><br><span class=\"line\">bower install git://github.com/user/package.git   <span class=\"comment\"># Github上的 .git</span></span><br><span class=\"line\">bower install http://example.com/script.js   <span class=\"comment\"># URL</span></span><br></pre></td></tr></table></figure>\n\n<p>安装选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-F, --force-latest: Force latest version on conflict</span><br><span class=\"line\">-p, --production: Do not install project devDependencies</span><br><span class=\"line\">-S, --save: Save installed packages into the project’s bower.json dependencies</span><br><span class=\"line\">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</span><br><span class=\"line\">-E, --save-exact: Configure installed packages with an exact version rather than semver</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-用bower-json文件来管理依赖\"><a href=\"#4-用bower-json文件来管理依赖\" class=\"headerlink\" title=\"4.用bower.json文件来管理依赖\"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower init</span><br></pre></td></tr></table></figure>\n\n<p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p>\n<h3 id=\"5-使用下载好的包\"><a href=\"#5-使用下载好的包\" class=\"headerlink\" title=\"5.使用下载好的包\"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/jquery/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-更新包\"><a href=\"#6-更新包\" class=\"headerlink\" title=\"6.更新包\"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower update jquery</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以自动升级到最新版的jquery了。<br>更新选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-F, --force-latest: Force latest version on conflict</span><br><span class=\"line\">-p, --production: Do not install project devDependencies</span><br><span class=\"line\">-S, --save: Update dependencies <span class=\"keyword\">in</span> bower.json</span><br><span class=\"line\">-D, --save-dev: Update devDependencies <span class=\"keyword\">in</span> bower.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-搜索包\"><a href=\"#7-搜索包\" class=\"headerlink\" title=\"7.搜索包\"></a>7.搜索包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower search               <span class=\"comment\">#搜索所有包</span></span><br><span class=\"line\">bower search &lt;packageName&gt; <span class=\"comment\">#搜索指定名称的包</span></span><br></pre></td></tr></table></figure>\n\n<p>或者可以在<a href=\"https://bower.io/search/\" target=\"_blank\" rel=\"noopener\">这里:https://bower.io/search/</a>搜索喜欢的包.</p>\n<h3 id=\"8-卸载包\"><a href=\"#8-卸载包\" class=\"headerlink\" title=\"8.卸载包\"></a>8.卸载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure>\n\n<p>卸载选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</span><br><span class=\"line\">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2015-12-31T15:59:59.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2015-12-31 23:59:59\ntags: hexo\ncategories: hexo博客折腾\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-07-07T03:06:11.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop1z0005jst3acoz99x4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"sublime text3个人习惯配置","date":"2016-06-29T01:41:48.000Z","_content":"\n### 1、安装\n\n分别在官网下载并安装 [nodejs](https://nodejs.org/en/download/) 和 [sublime text3](https://www.sublimetext.com/3)。\n\n### 2、sublime text3注册：\n<!-- more --> \n点击菜单【help】－>【Enter License】，粘贴下面注册码(亲测v3103可用 ):\n``` bash\n—– BEGIN LICENSE —–\nRyan Clark\nSingle User License\nEA7E-812479\n2158A7DE B690A7A3 8EC04710 006A5EEB\n34E77CA3 9C82C81F 0DB6371B 79704E6F\n93F36655 B031503A 03257CCC 01B20F60\nD304FA8D B1B4F0AF 8A76C7BA 0FA94D55\n56D46BCE 5237A341 CD837F30 4D60772D\n349B1179 A996F826 90CDB73C 24D41245\nFD032C30 AD5E7241 4EAA66ED 167D91FB\n55896B16 EA125C81 F550AF6B A6820916\n—— END LICENSE ——\n```\n\n### 3、安装package control组件，用于管理所有插件\n\n按ctrl + ~调出控制台(或点击菜单栏的【View】->【Show Console】)，在Console窗口中输入以下代码，按回车键：\n``` bash\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n等待安装完毕，重启Sublime Text3。\n按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：\n\n### 4、用Package Control安装插件\n\n按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）\n`Material Theme`\n`Emmet`\n`CSS Format`\n`CSScomb`\n`jsFormat`\n`AutoFileName`\n`Autoprefixer`\n`Doc Blockr`\n`SublimeLinter`\n`SublimeLinter-jshint`\n`SublimeLinter-csslint`\n`Color Highlighter`\n`BracketHighlighter`\n\n### 5、配置nodejs\n\n##### 方法1\n(1)下载sublime Text的[nodejs插件](https://github.com/tanepiper/SublimeText-Nodejs)\n(2)下载后解压:直接改名为nodejs 放到 Preferences–>浏览程序包Browse Packages所在的文件夹\n(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\", \n  \"windows\": \n    { \n        \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"] \n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(4)修改为：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(5)完成:随便写一段nodejs代码，ctrl+B运行\n(6)注意：在手动解压sublime Text插件后，需要在preference->package settings->package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。\n\n##### 方法2\n首先需要先安装[nodejs](https://nodejs.org/en/download/)。\n(1)运行Sublime,菜单上找到Tools ---> Build System ---> new Build System\n(2)输入：\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    }\n}\n(3)保存文件为NodeJs.sublime-build\n(4)菜单上找到Tools ---> Build System --->选择 NodeJs\n(5)安装sublime插件 JavaScript & NodeJs Snippets\n(6)新建test.js文件，输入 console.log('Hello Node.js'); 按快捷键 Ctrl + B 运行，成功输出","source":"_posts/sublime-text3个人习惯配置-C.md","raw":"---\ntitle: sublime text3个人习惯配置\ndate: 2016-06-29 09:41:48\ntags: sublime\ncategories: 前端工具\n---\n\n### 1、安装\n\n分别在官网下载并安装 [nodejs](https://nodejs.org/en/download/) 和 [sublime text3](https://www.sublimetext.com/3)。\n\n### 2、sublime text3注册：\n<!-- more --> \n点击菜单【help】－>【Enter License】，粘贴下面注册码(亲测v3103可用 ):\n``` bash\n—– BEGIN LICENSE —–\nRyan Clark\nSingle User License\nEA7E-812479\n2158A7DE B690A7A3 8EC04710 006A5EEB\n34E77CA3 9C82C81F 0DB6371B 79704E6F\n93F36655 B031503A 03257CCC 01B20F60\nD304FA8D B1B4F0AF 8A76C7BA 0FA94D55\n56D46BCE 5237A341 CD837F30 4D60772D\n349B1179 A996F826 90CDB73C 24D41245\nFD032C30 AD5E7241 4EAA66ED 167D91FB\n55896B16 EA125C81 F550AF6B A6820916\n—— END LICENSE ——\n```\n\n### 3、安装package control组件，用于管理所有插件\n\n按ctrl + ~调出控制台(或点击菜单栏的【View】->【Show Console】)，在Console窗口中输入以下代码，按回车键：\n``` bash\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n等待安装完毕，重启Sublime Text3。\n按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：\n\n### 4、用Package Control安装插件\n\n按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）\n`Material Theme`\n`Emmet`\n`CSS Format`\n`CSScomb`\n`jsFormat`\n`AutoFileName`\n`Autoprefixer`\n`Doc Blockr`\n`SublimeLinter`\n`SublimeLinter-jshint`\n`SublimeLinter-csslint`\n`Color Highlighter`\n`BracketHighlighter`\n\n### 5、配置nodejs\n\n##### 方法1\n(1)下载sublime Text的[nodejs插件](https://github.com/tanepiper/SublimeText-Nodejs)\n(2)下载后解压:直接改名为nodejs 放到 Preferences–>浏览程序包Browse Packages所在的文件夹\n(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\", \n  \"windows\": \n    { \n        \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"] \n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(4)修改为：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(5)完成:随便写一段nodejs代码，ctrl+B运行\n(6)注意：在手动解压sublime Text插件后，需要在preference->package settings->package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。\n\n##### 方法2\n首先需要先安装[nodejs](https://nodejs.org/en/download/)。\n(1)运行Sublime,菜单上找到Tools ---> Build System ---> new Build System\n(2)输入：\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    }\n}\n(3)保存文件为NodeJs.sublime-build\n(4)菜单上找到Tools ---> Build System --->选择 NodeJs\n(5)安装sublime插件 JavaScript & NodeJs Snippets\n(6)新建test.js文件，输入 console.log('Hello Node.js'); 按快捷键 Ctrl + B 运行，成功输出","slug":"sublime-text3个人习惯配置-C","published":1,"updated":"2019-07-07T03:06:11.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop220006jst3qkwbq9pf","content":"<h3 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h3><p>分别在官网下载并安装 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a> 和 <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text3</a>。</p>\n<h3 id=\"2、sublime-text3注册：\"><a href=\"#2、sublime-text3注册：\" class=\"headerlink\" title=\"2、sublime text3注册：\"></a>2、sublime text3注册：</h3><a id=\"more\"></a> \n<p>点击菜单【help】－&gt;【Enter License】，粘贴下面注册码(亲测v3103可用 ):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">—– BEGIN LICENSE —–</span><br><span class=\"line\">Ryan Clark</span><br><span class=\"line\">Single User License</span><br><span class=\"line\">EA7E-812479</span><br><span class=\"line\">2158A7DE B690A7A3 8EC04710 006A5EEB</span><br><span class=\"line\">34E77CA3 9C82C81F 0DB6371B 79704E6F</span><br><span class=\"line\">93F36655 B031503A 03257CCC 01B20F60</span><br><span class=\"line\">D304FA8D B1B4F0AF 8A76C7BA 0FA94D55</span><br><span class=\"line\">56D46BCE 5237A341 CD837F30 4D60772D</span><br><span class=\"line\">349B1179 A996F826 90CDB73C 24D41245</span><br><span class=\"line\">FD032C30 AD5E7241 4EAA66ED 167D91FB</span><br><span class=\"line\">55896B16 EA125C81 F550AF6B A6820916</span><br><span class=\"line\">—— END LICENSE ——</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、安装package-control组件，用于管理所有插件\"><a href=\"#3、安装package-control组件，用于管理所有插件\" class=\"headerlink\" title=\"3、安装package control组件，用于管理所有插件\"></a>3、安装package control组件，用于管理所有插件</h3><p>按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure>\n\n<p>等待安装完毕，重启Sublime Text3。<br>按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：</p>\n<h3 id=\"4、用Package-Control安装插件\"><a href=\"#4、用Package-Control安装插件\" class=\"headerlink\" title=\"4、用Package Control安装插件\"></a>4、用Package Control安装插件</h3><p>按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）<br><code>Material Theme</code><br><code>Emmet</code><br><code>CSS Format</code><br><code>CSScomb</code><br><code>jsFormat</code><br><code>AutoFileName</code><br><code>Autoprefixer</code><br><code>Doc Blockr</code><br><code>SublimeLinter</code><br><code>SublimeLinter-jshint</code><br><code>SublimeLinter-csslint</code><br><code>Color Highlighter</code><br><code>BracketHighlighter</code></p>\n<h3 id=\"5、配置nodejs\"><a href=\"#5、配置nodejs\" class=\"headerlink\" title=\"5、配置nodejs\"></a>5、配置nodejs</h3><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p>(1)下载sublime Text的<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"noopener\">nodejs插件</a><br>(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹<br>(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"cp1252\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"windows\"</span>: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe &amp; node\"</span>, <span class=\"string\">\"$file\"</span>] </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"osx\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"utf-8\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"windows\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe\"</span>, <span class=\"string\">\"\"</span>],</span><br><span class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"osx\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(5)完成:随便写一段nodejs代码，ctrl+B运行<br>(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。</p>\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>首先需要先安装<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a>。<br>(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System<br>(2)输入：<br>{<br>  “cmd”: [“node”, “$file”],<br>  “file_regex”: “^[ ]<em>File &quot;(…</em>?)&quot;, line ([0-9]*)”,<br>  “selector”: “source.js”,<br>  “shell”:true,<br>  “encoding”: “utf-8”,<br>  “windows”:<br>    {<br>      “cmd”: [“taskkill /F /IM node.exe”, “”],<br>      “cmd”: [“node”, “$file”]<br>    }<br>}<br>(3)保存文件为NodeJs.sublime-build<br>(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs<br>(5)安装sublime插件 JavaScript &amp; NodeJs Snippets<br>(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h3><p>分别在官网下载并安装 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a> 和 <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">sublime text3</a>。</p>\n<h3 id=\"2、sublime-text3注册：\"><a href=\"#2、sublime-text3注册：\" class=\"headerlink\" title=\"2、sublime text3注册：\"></a>2、sublime text3注册：</h3>","more":"<p>点击菜单【help】－&gt;【Enter License】，粘贴下面注册码(亲测v3103可用 ):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">—– BEGIN LICENSE —–</span><br><span class=\"line\">Ryan Clark</span><br><span class=\"line\">Single User License</span><br><span class=\"line\">EA7E-812479</span><br><span class=\"line\">2158A7DE B690A7A3 8EC04710 006A5EEB</span><br><span class=\"line\">34E77CA3 9C82C81F 0DB6371B 79704E6F</span><br><span class=\"line\">93F36655 B031503A 03257CCC 01B20F60</span><br><span class=\"line\">D304FA8D B1B4F0AF 8A76C7BA 0FA94D55</span><br><span class=\"line\">56D46BCE 5237A341 CD837F30 4D60772D</span><br><span class=\"line\">349B1179 A996F826 90CDB73C 24D41245</span><br><span class=\"line\">FD032C30 AD5E7241 4EAA66ED 167D91FB</span><br><span class=\"line\">55896B16 EA125C81 F550AF6B A6820916</span><br><span class=\"line\">—— END LICENSE ——</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、安装package-control组件，用于管理所有插件\"><a href=\"#3、安装package-control组件，用于管理所有插件\" class=\"headerlink\" title=\"3、安装package control组件，用于管理所有插件\"></a>3、安装package control组件，用于管理所有插件</h3><p>按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure>\n\n<p>等待安装完毕，重启Sublime Text3。<br>按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：</p>\n<h3 id=\"4、用Package-Control安装插件\"><a href=\"#4、用Package-Control安装插件\" class=\"headerlink\" title=\"4、用Package Control安装插件\"></a>4、用Package Control安装插件</h3><p>按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）<br><code>Material Theme</code><br><code>Emmet</code><br><code>CSS Format</code><br><code>CSScomb</code><br><code>jsFormat</code><br><code>AutoFileName</code><br><code>Autoprefixer</code><br><code>Doc Blockr</code><br><code>SublimeLinter</code><br><code>SublimeLinter-jshint</code><br><code>SublimeLinter-csslint</code><br><code>Color Highlighter</code><br><code>BracketHighlighter</code></p>\n<h3 id=\"5、配置nodejs\"><a href=\"#5、配置nodejs\" class=\"headerlink\" title=\"5、配置nodejs\"></a>5、配置nodejs</h3><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p>(1)下载sublime Text的<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"noopener\">nodejs插件</a><br>(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹<br>(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"cp1252\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"windows\"</span>: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe &amp; node\"</span>, <span class=\"string\">\"$file\"</span>] </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"osx\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)修改为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"utf-8\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"windows\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe\"</span>, <span class=\"string\">\"\"</span>],</span><br><span class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"osx\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(5)完成:随便写一段nodejs代码，ctrl+B运行<br>(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。</p>\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>首先需要先安装<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a>。<br>(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System<br>(2)输入：<br>{<br>  “cmd”: [“node”, “$file”],<br>  “file_regex”: “^[ ]<em>File &quot;(…</em>?)&quot;, line ([0-9]*)”,<br>  “selector”: “source.js”,<br>  “shell”:true,<br>  “encoding”: “utf-8”,<br>  “windows”:<br>    {<br>      “cmd”: [“taskkill /F /IM node.exe”, “”],<br>      “cmd”: [“node”, “$file”]<br>    }<br>}<br>(3)保存文件为NodeJs.sublime-build<br>(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs<br>(5)安装sublime插件 JavaScript &amp; NodeJs Snippets<br>(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出</p>"},{"title":"自定义HEXO站内搜索Javascript+json","date":"2016-11-09T01:24:56.000Z","_content":"\n### 开始之前\n\n目前很多[Hexo](https://hexo.io/)博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：\n    [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)生成`xml`格式的数据文件。\n    [hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content) 生成`json`格式的数据文件。 \n今天的主角是[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。\n<!-- more -->\n### 1.安装 \n\n``` bash \n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后执行`hexo generate`时会自动生成`content.json`文件，若使用默认设置，生成的数据结构如下 \n``` json\nmeta: {\n    title: hexo.config.title,\n    subtitle: hexo.config.subtitle,\n    description: hexo.config.description,\n    author: hexo.config.author,\n    url: hexo.config.url\n},\npages: [{ //-> all pages\n    title: page.title,\n    slug: page.slug,\n    date: page.date,\n    updated: page.updated,\n    comments: page.comments,\n    permalink: page.permalink,\n    path: page.path,\n    excerpt: page.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: page.content, //-> only text minified ;)\n    raw: page.raw, //-> original MD content\n    content: page.content //-> final HTML content\n}],\nposts: [{ //-> only published posts\n    title: post.title,\n    slug: post.slug,\n    date: post.date,\n    updated: post.updated,\n    comments: post.comments,\n    permalink: post.permalink,\n    path: post.path,\n    excerpt: post.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: post.content, //-> only text minified ;)\n    raw: post.raw, //-> original MD content\n    content: post.content, //-> final HTML content\n    categories: [{\n        name: category.name,\n        slug: category.slug,\n        permalink: category.permalink\n    }],\n    tags: [{\n        name: tag.name,\n        slug: tag.slug,\n        permalink: tag.permalink\n    }]\n}]\n```\n### 2.配置 \n\nhexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：\n``` yml\njsonContent:\n  meta: true\n  keywords: false # (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)\n  pages:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n    categories: true\n    tags: true\n```\n因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在`hexo/_config.yml`中加入：\n``` yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true #文章标题\n    date: true #发表日期\n    path: true #路径\n    text: true #文本字段\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true #标签\n```\n这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。\n例如：\n``` json\n{\n  \"title\": \"自定义HEXO站内搜索Javascript+json\",\n  \"date\": \"2016-11-09T01:24:56.000Z\",\n  \"path\": \"2016/11/09/自定义HEXO站内搜索Javascript-json.html\",\n  \"text\": \"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\",\n  \"tags\": [{\n    \"name\": \"javascript,hexo\",\n    \"slug\": \"javascript-hexo\",\n    \"permalink\": \"http://chaoo.oschina.io/tags/javascript-hexo/\"\n  }]\n}\n```\n### 3.JavaScript实现代码\n\n接下来就是用JS实现查询方法并把结果渲染到页面。\n#### 3.1 xhr加载数据\n``` javascript\nvar searchData;\nfunction loadData(success) {\n    if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/content.json', true);\n        xhr.onload = function() {\n            if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response || this.responseText);\n                searchData = res instanceof Array ? res : res.posts;\n                success(searchData);\n            } else {\n                console.error(this.statusText);\n            }\n        };\n        xhr.onerror = function() {\n            console.error(this.statusText);\n        };\n        xhr.send();\n    } else {\n        success(searchData);\n    }\n}\n```\n#### 3.2 匹配文章内容返回结果\n``` javascript\nfunction matcher(post, regExp) {\n    // 匹配优先级：title > tags > text\n    return regtest(post.title, regExp) || post.tags.some(function(tag) {\n        return regtest(tag.name, regExp);\n    }) || regtest(post.text, regExp);\n}\nfunction regtest(raw, regExp) {\n    regExp.lastIndex = 0;\n    return regExp.test(raw);\n}\n```\n#### 3.3 结果渲染到页面\n``` javascript\nfunction render(data) {\n    var html = '';\n    if (data.length) {\n        html = data.map(function(post) {\n            return tpl(searchTpl, {\n                title: post.title,\n                path: post.path,\n                date: new Date(post.date).toLocaleDateString(),\n                tags: post.tags.map(function(tag) {\n                    return '<span>' + tag.name + '</span>';\n                }).join('')\n            });\n        }).join('');\n    } \n}\n```\n#### 3.3 查询匹配\n``` javascript\nfunction search(key) {\n    // 关键字 => 正则，空格隔开的看作多个关键字\n    // a b c => /a|b|c/gmi\n    var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi');\n    loadData(function(data) {\n        var result = data.filter(function(post) {\n            return matcher(post, regExp);\n        });\n        render(result);\n    });\n}\n```","source":"_posts/自定义HEXO站内搜索Javascript-json.md","raw":"---\ntitle: 自定义HEXO站内搜索Javascript+json\ndate: 2016-11-09 09:24:56\ntags: [javascript,hexo]\ncategories: hexo博客折腾\n---\n\n### 开始之前\n\n目前很多[Hexo](https://hexo.io/)博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：\n    [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)生成`xml`格式的数据文件。\n    [hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content) 生成`json`格式的数据文件。 \n今天的主角是[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。\n<!-- more -->\n### 1.安装 \n\n``` bash \n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后执行`hexo generate`时会自动生成`content.json`文件，若使用默认设置，生成的数据结构如下 \n``` json\nmeta: {\n    title: hexo.config.title,\n    subtitle: hexo.config.subtitle,\n    description: hexo.config.description,\n    author: hexo.config.author,\n    url: hexo.config.url\n},\npages: [{ //-> all pages\n    title: page.title,\n    slug: page.slug,\n    date: page.date,\n    updated: page.updated,\n    comments: page.comments,\n    permalink: page.permalink,\n    path: page.path,\n    excerpt: page.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: page.content, //-> only text minified ;)\n    raw: page.raw, //-> original MD content\n    content: page.content //-> final HTML content\n}],\nposts: [{ //-> only published posts\n    title: post.title,\n    slug: post.slug,\n    date: post.date,\n    updated: post.updated,\n    comments: post.comments,\n    permalink: post.permalink,\n    path: post.path,\n    excerpt: post.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: post.content, //-> only text minified ;)\n    raw: post.raw, //-> original MD content\n    content: post.content, //-> final HTML content\n    categories: [{\n        name: category.name,\n        slug: category.slug,\n        permalink: category.permalink\n    }],\n    tags: [{\n        name: tag.name,\n        slug: tag.slug,\n        permalink: tag.permalink\n    }]\n}]\n```\n### 2.配置 \n\nhexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：\n``` yml\njsonContent:\n  meta: true\n  keywords: false # (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)\n  pages:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n    categories: true\n    tags: true\n```\n因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在`hexo/_config.yml`中加入：\n``` yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true #文章标题\n    date: true #发表日期\n    path: true #路径\n    text: true #文本字段\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true #标签\n```\n这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。\n例如：\n``` json\n{\n  \"title\": \"自定义HEXO站内搜索Javascript+json\",\n  \"date\": \"2016-11-09T01:24:56.000Z\",\n  \"path\": \"2016/11/09/自定义HEXO站内搜索Javascript-json.html\",\n  \"text\": \"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\",\n  \"tags\": [{\n    \"name\": \"javascript,hexo\",\n    \"slug\": \"javascript-hexo\",\n    \"permalink\": \"http://chaoo.oschina.io/tags/javascript-hexo/\"\n  }]\n}\n```\n### 3.JavaScript实现代码\n\n接下来就是用JS实现查询方法并把结果渲染到页面。\n#### 3.1 xhr加载数据\n``` javascript\nvar searchData;\nfunction loadData(success) {\n    if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/content.json', true);\n        xhr.onload = function() {\n            if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response || this.responseText);\n                searchData = res instanceof Array ? res : res.posts;\n                success(searchData);\n            } else {\n                console.error(this.statusText);\n            }\n        };\n        xhr.onerror = function() {\n            console.error(this.statusText);\n        };\n        xhr.send();\n    } else {\n        success(searchData);\n    }\n}\n```\n#### 3.2 匹配文章内容返回结果\n``` javascript\nfunction matcher(post, regExp) {\n    // 匹配优先级：title > tags > text\n    return regtest(post.title, regExp) || post.tags.some(function(tag) {\n        return regtest(tag.name, regExp);\n    }) || regtest(post.text, regExp);\n}\nfunction regtest(raw, regExp) {\n    regExp.lastIndex = 0;\n    return regExp.test(raw);\n}\n```\n#### 3.3 结果渲染到页面\n``` javascript\nfunction render(data) {\n    var html = '';\n    if (data.length) {\n        html = data.map(function(post) {\n            return tpl(searchTpl, {\n                title: post.title,\n                path: post.path,\n                date: new Date(post.date).toLocaleDateString(),\n                tags: post.tags.map(function(tag) {\n                    return '<span>' + tag.name + '</span>';\n                }).join('')\n            });\n        }).join('');\n    } \n}\n```\n#### 3.3 查询匹配\n``` javascript\nfunction search(key) {\n    // 关键字 => 正则，空格隔开的看作多个关键字\n    // a b c => /a|b|c/gmi\n    var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi');\n    loadData(function(data) {\n        var result = data.filter(function(post) {\n            return matcher(post, regExp);\n        });\n        render(result);\n    });\n}\n```","slug":"自定义HEXO站内搜索Javascript-json","published":1,"updated":"2019-07-07T03:06:11.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop240007jst3fv7dsvld","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>目前很多<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meta: &#123;</span><br><span class=\"line\">    title: hexo.config.title,</span><br><span class=\"line\">    subtitle: hexo.config.subtitle,</span><br><span class=\"line\">    description: hexo.config.description,</span><br><span class=\"line\">    author: hexo.config.author,</span><br><span class=\"line\">    url: hexo.config.url</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">pages: [&#123; //-&gt; all pages</span><br><span class=\"line\">    title: page.title,</span><br><span class=\"line\">    slug: page.slug,</span><br><span class=\"line\">    date: page.date,</span><br><span class=\"line\">    updated: page.updated,</span><br><span class=\"line\">    comments: page.comments,</span><br><span class=\"line\">    permalink: page.permalink,</span><br><span class=\"line\">    path: page.path,</span><br><span class=\"line\">    excerpt: page.excerpt, //-&gt; only text ;)</span><br><span class=\"line\">    keywords: null //-&gt; it needs settings</span><br><span class=\"line\">    text: page.content, //-&gt; only text minified ;)</span><br><span class=\"line\">    raw: page.raw, //-&gt; original MD content</span><br><span class=\"line\">    content: page.content //-&gt; final HTML content</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">posts: [&#123; //-&gt; only published posts</span><br><span class=\"line\">    title: post.title,</span><br><span class=\"line\">    slug: post.slug,</span><br><span class=\"line\">    date: post.date,</span><br><span class=\"line\">    updated: post.updated,</span><br><span class=\"line\">    comments: post.comments,</span><br><span class=\"line\">    permalink: post.permalink,</span><br><span class=\"line\">    path: post.path,</span><br><span class=\"line\">    excerpt: post.excerpt, //-&gt; only text ;)</span><br><span class=\"line\">    keywords: null //-&gt; it needs settings</span><br><span class=\"line\">    text: post.content, //-&gt; only text minified ;)</span><br><span class=\"line\">    raw: post.raw, //-&gt; original MD content</span><br><span class=\"line\">    content: post.content, //-&gt; final HTML content</span><br><span class=\"line\">    categories: [&#123;</span><br><span class=\"line\">        name: category.name,</span><br><span class=\"line\">        slug: category.slug,</span><br><span class=\"line\">        permalink: category.permalink</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    tags: [&#123;</span><br><span class=\"line\">        name: tag.name,</span><br><span class=\"line\">        slug: tag.slug,</span><br><span class=\"line\">        permalink: tag.permalink</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  keywords:</span> <span class=\"literal\">false</span> <span class=\"comment\"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文章标题</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span> <span class=\"comment\">#发表日期</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span> <span class=\"comment\">#路径</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文本字段</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span> <span class=\"comment\">#标签</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"自定义HEXO站内搜索Javascript+json\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2016-11-09T01:24:56.000Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"2016/11/09/自定义HEXO站内搜索Javascript-json.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tags\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"javascript,hexo\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"slug\"</span>: <span class=\"string\">\"javascript-hexo\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permalink\"</span>: <span class=\"string\">\"http://chaoo.oschina.io/tags/javascript-hexo/\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-JavaScript实现代码\"><a href=\"#3-JavaScript实现代码\" class=\"headerlink\" title=\"3.JavaScript实现代码\"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p>\n<h4 id=\"3-1-xhr加载数据\"><a href=\"#3-1-xhr加载数据\" class=\"headerlink\" title=\"3.1 xhr加载数据\"></a>3.1 xhr加载数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchData;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadData</span>(<span class=\"params\">success</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!searchData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/content.json'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status &gt;= <span class=\"number\">200</span> &amp;&amp; <span class=\"keyword\">this</span>.status &lt; <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.response || <span class=\"keyword\">this</span>.responseText);</span><br><span class=\"line\">                searchData = res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? res : res.posts;</span><br><span class=\"line\">                success(searchData);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        success(searchData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-匹配文章内容返回结果\"><a href=\"#3-2-匹配文章内容返回结果\" class=\"headerlink\" title=\"3.2 匹配文章内容返回结果\"></a>3.2 匹配文章内容返回结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matcher</span>(<span class=\"params\">post, regExp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 匹配优先级：title &gt; tags &gt; text</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> regtest(post.title, regExp) || post.tags.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> regtest(tag.name, regExp);</span><br><span class=\"line\">    &#125;) || regtest(post.text, regExp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regtest</span>(<span class=\"params\">raw, regExp</span>) </span>&#123;</span><br><span class=\"line\">    regExp.lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> regExp.test(raw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-结果渲染到页面\"><a href=\"#3-3-结果渲染到页面\" class=\"headerlink\" title=\"3.3 结果渲染到页面\"></a>3.3 结果渲染到页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.length) &#123;</span><br><span class=\"line\">        html = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tpl(searchTpl, &#123;</span><br><span class=\"line\">                title: post.title,</span><br><span class=\"line\">                path: post.path,</span><br><span class=\"line\">                date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(post.date).toLocaleDateString(),</span><br><span class=\"line\">                tags: post.tags.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span&gt;'</span> + tag.name + <span class=\"string\">'&lt;/span&gt;'</span>;</span><br><span class=\"line\">                &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-查询匹配\"><a href=\"#3-3-查询匹配\" class=\"headerlink\" title=\"3.3 查询匹配\"></a>3.3 查询匹配</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></span><br><span class=\"line\">    <span class=\"comment\">// a b c =&gt; /a|b|c/gmi</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key.replace(<span class=\"regexp\">/[ ]/g</span>, <span class=\"string\">'|'</span>), <span class=\"string\">'gmi'</span>);</span><br><span class=\"line\">    loadData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> matcher(post, regExp);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        render(result);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>目前很多<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p>","more":"<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meta: &#123;</span><br><span class=\"line\">    title: hexo.config.title,</span><br><span class=\"line\">    subtitle: hexo.config.subtitle,</span><br><span class=\"line\">    description: hexo.config.description,</span><br><span class=\"line\">    author: hexo.config.author,</span><br><span class=\"line\">    url: hexo.config.url</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">pages: [&#123; //-&gt; all pages</span><br><span class=\"line\">    title: page.title,</span><br><span class=\"line\">    slug: page.slug,</span><br><span class=\"line\">    date: page.date,</span><br><span class=\"line\">    updated: page.updated,</span><br><span class=\"line\">    comments: page.comments,</span><br><span class=\"line\">    permalink: page.permalink,</span><br><span class=\"line\">    path: page.path,</span><br><span class=\"line\">    excerpt: page.excerpt, //-&gt; only text ;)</span><br><span class=\"line\">    keywords: null //-&gt; it needs settings</span><br><span class=\"line\">    text: page.content, //-&gt; only text minified ;)</span><br><span class=\"line\">    raw: page.raw, //-&gt; original MD content</span><br><span class=\"line\">    content: page.content //-&gt; final HTML content</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">posts: [&#123; //-&gt; only published posts</span><br><span class=\"line\">    title: post.title,</span><br><span class=\"line\">    slug: post.slug,</span><br><span class=\"line\">    date: post.date,</span><br><span class=\"line\">    updated: post.updated,</span><br><span class=\"line\">    comments: post.comments,</span><br><span class=\"line\">    permalink: post.permalink,</span><br><span class=\"line\">    path: post.path,</span><br><span class=\"line\">    excerpt: post.excerpt, //-&gt; only text ;)</span><br><span class=\"line\">    keywords: null //-&gt; it needs settings</span><br><span class=\"line\">    text: post.content, //-&gt; only text minified ;)</span><br><span class=\"line\">    raw: post.raw, //-&gt; original MD content</span><br><span class=\"line\">    content: post.content, //-&gt; final HTML content</span><br><span class=\"line\">    categories: [&#123;</span><br><span class=\"line\">        name: category.name,</span><br><span class=\"line\">        slug: category.slug,</span><br><span class=\"line\">        permalink: category.permalink</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    tags: [&#123;</span><br><span class=\"line\">        name: tag.name,</span><br><span class=\"line\">        slug: tag.slug,</span><br><span class=\"line\">        permalink: tag.permalink</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  keywords:</span> <span class=\"literal\">false</span> <span class=\"comment\"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文章标题</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span> <span class=\"comment\">#发表日期</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span> <span class=\"comment\">#路径</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文本字段</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span> <span class=\"comment\">#标签</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"自定义HEXO站内搜索Javascript+json\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2016-11-09T01:24:56.000Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"2016/11/09/自定义HEXO站内搜索Javascript-json.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tags\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"javascript,hexo\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"slug\"</span>: <span class=\"string\">\"javascript-hexo\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permalink\"</span>: <span class=\"string\">\"http://chaoo.oschina.io/tags/javascript-hexo/\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-JavaScript实现代码\"><a href=\"#3-JavaScript实现代码\" class=\"headerlink\" title=\"3.JavaScript实现代码\"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p>\n<h4 id=\"3-1-xhr加载数据\"><a href=\"#3-1-xhr加载数据\" class=\"headerlink\" title=\"3.1 xhr加载数据\"></a>3.1 xhr加载数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchData;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadData</span>(<span class=\"params\">success</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!searchData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/content.json'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status &gt;= <span class=\"number\">200</span> &amp;&amp; <span class=\"keyword\">this</span>.status &lt; <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.response || <span class=\"keyword\">this</span>.responseText);</span><br><span class=\"line\">                searchData = res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? res : res.posts;</span><br><span class=\"line\">                success(searchData);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        success(searchData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-匹配文章内容返回结果\"><a href=\"#3-2-匹配文章内容返回结果\" class=\"headerlink\" title=\"3.2 匹配文章内容返回结果\"></a>3.2 匹配文章内容返回结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matcher</span>(<span class=\"params\">post, regExp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 匹配优先级：title &gt; tags &gt; text</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> regtest(post.title, regExp) || post.tags.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> regtest(tag.name, regExp);</span><br><span class=\"line\">    &#125;) || regtest(post.text, regExp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regtest</span>(<span class=\"params\">raw, regExp</span>) </span>&#123;</span><br><span class=\"line\">    regExp.lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> regExp.test(raw);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-结果渲染到页面\"><a href=\"#3-3-结果渲染到页面\" class=\"headerlink\" title=\"3.3 结果渲染到页面\"></a>3.3 结果渲染到页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.length) &#123;</span><br><span class=\"line\">        html = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tpl(searchTpl, &#123;</span><br><span class=\"line\">                title: post.title,</span><br><span class=\"line\">                path: post.path,</span><br><span class=\"line\">                date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(post.date).toLocaleDateString(),</span><br><span class=\"line\">                tags: post.tags.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span&gt;'</span> + tag.name + <span class=\"string\">'&lt;/span&gt;'</span>;</span><br><span class=\"line\">                &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-查询匹配\"><a href=\"#3-3-查询匹配\" class=\"headerlink\" title=\"3.3 查询匹配\"></a>3.3 查询匹配</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></span><br><span class=\"line\">    <span class=\"comment\">// a b c =&gt; /a|b|c/gmi</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key.replace(<span class=\"regexp\">/[ ]/g</span>, <span class=\"string\">'|'</span>), <span class=\"string\">'gmi'</span>);</span><br><span class=\"line\">    loadData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> matcher(post, regExp);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        render(result);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"J2SE语法基础","date":"2019-07-07T09:33:54.000Z","abstract":"J2SE语法基础","_content":"\n\n## 一、Java语法基础\n1. [标识符（变量）命名规则](#id1)\n2. [数据类型](#id2)\n3. [运算符](#id3)\n4. [循环](#id4)\n5. [数组](#id5)\n\n\n<span id=\"id1\"><span>\n### 1. 标识符（变量）命名规则\n1. 必须字母，数字，下划线以及美元$等组成，且首位非数字。\n2. 不能使用Java语言中的关键字，如class，static，void，int等。\n3. 区分大小写，长度无限制，但不能过长，尽量见名知意。\n\n<span id=\"id2\"><span>\n### 2. 数据类型\n#### 2.1 分为两大类：\n1. 基本数据类型：byte，short，int，long，float，double，boolean，char\n2. 引用数据类型：数组，类，接口，枚举，标注\n\n> 注：`单个字节`表示`8位二进制`位，最左边表示符号位（0：正，1：负）。\n\n#### 2.2 整数类型（byte，short，int，long）\n1. **byte**： 1个字节，范围`-2^7~2^7-1`，即`-128~127`。\n2. **short**：2个字节，范围`-2^15~2^15-1`，即`-32768~32767`。\n3. **int**:   4个字节，范围`-2^31~2^31-1`，即`正负21亿`之间。\n4. **long**： 8个字节，范围`-2^63~2^63-1`，比int更大。如果要表示long直接量，需要`L`或`l`结尾。\n\n#### 2.3 浮点类型（float，double）\n1. **float**： 4个字节，单精度浮点数，取到`小数点后7`位有效数字。如果要表示float直接量，需要`F`或`f`结尾\n2. **double**：8个字节，双精度浮点数，取到`小数点后15`位有效数字。\n\n> 扩展：浮点运算有时会有误差，为了实现精确运算可使用`java.math.BigDecimal`类型加以描述。\n\n#### 2.4 布尔类型（boolean）\n1. **boolean**：1个字节（未明确规定），值只有`true`和`false`。\n\n#### 2.5 字符类型（char）\n1. **char**：2个字节，表示单个字符的数据类型。事实是一个16位无符号整数，值是对应字符的编码，如：'a','1','中' 等。\n- 开发中很少用到char类型，而使用String类型描述的多个字符组成的字符串，使用双引号\"\"引起来。\n- 需记住的ASII码字符：'a':97，'A':65，'0':48，空格:32，换行符:10\n- 常用转义符：`\\t`:制表符，`\\n`:换行，`\\\"`，`\\'`，`\\\\`，`\\b`，`\\r`\n\n#### 2.6 基本数据类型之间转换\n1. 自动类型转换：从小类型到大类型自动转换\n\n```\nbyte --> short --> int --> long --> float --> double\n          char -----^\n```\n\n2. 强制类型转换：需在被转换数据前加上类型，会造成精度损失或者溢出\n\n```\nlong big = 1024L\\*1024\\*1024;\nint i = (int)big;\n```\n\n\n<span id=\"id3\"><span>\n### 3. 运算符\n1. 算术运算符： `+`，`-`，`*`，`/`，`%`\n2. 关系运算符： `>`，`<`，`>=`，`<=`，`==`，`!=`\n3. 自增减运算符： `++`，`--`\n4. 逻辑运算符： `&&`，`||`，`！`（短路特性：逻辑与`&&`运算，若第一个条件为假,跳过第二个条件；逻辑或`||`运算，若第一个条件为真，跳过第二个条件）\n5. 三目运算符： 条件 ? 表达式1 ： 表达式2\n6. 赋值运算符：`=`，`+=`，`-=`，`*=`，`=` \n\n<span id=\"id4\"><span>\n### 4. 循环\n1. while循环和for循环完全可以互换。\n2. while循环主要用于明确循环条件，但不明确循环次数的场合\n3. for循环主要用于明确次数或范围的场合\n4. while(true) 等价于 for(;;)，表示无限循环。\n\n<span id=\"id5\"><span>\n### 5. 数组\n#### 5.1 一维数组\n- `数组类型[] 数组名 = new 数据类型[长度]` ：动态方式\n\n``` java\n数组类型[] 数组名 = new 数据类型[长度] //动态方式\nint[] arr = new int[5];\n```\n\n``` java\n数组类型[] 数组名 = {初始值1, 初始值1, 初始值1, ...} //静态方式\nint[] arr = {10, 20, 30, 40};\n/*特殊方式：*/ int[] arr = new int[]{10, 20, 30};\n```\n\n#### 5.2 二维数组\n\n``` java\n数组类型[][] 数组名 = new 数据类型[行数][列数]\nint[][] arr = new int\\[5]\\[6];\n```\n\n``` java\n数组类型[][] 数组名 = {{初始值1, 初始值1, 初始值1},{值2,...} ...}\nint[] arr = {{10, 20, 30}, {01, 5, 3}, {8, 20, 6}};\n```\n\n> 二维数组arr.length表示行数，arr[0].length表示此行的长度\n\n\n[回到顶部😼](#)","source":"_posts/J2SE语法基础.md","raw":"---\ntitle: J2SE语法基础\ndate: 2019-07-07 17:33:54\ntags: [javaSE, 后端开发]\ncategories: javaSE知识梳理\nabstract: J2SE语法基础\n---\n\n\n## 一、Java语法基础\n1. [标识符（变量）命名规则](#id1)\n2. [数据类型](#id2)\n3. [运算符](#id3)\n4. [循环](#id4)\n5. [数组](#id5)\n\n\n<span id=\"id1\"><span>\n### 1. 标识符（变量）命名规则\n1. 必须字母，数字，下划线以及美元$等组成，且首位非数字。\n2. 不能使用Java语言中的关键字，如class，static，void，int等。\n3. 区分大小写，长度无限制，但不能过长，尽量见名知意。\n\n<span id=\"id2\"><span>\n### 2. 数据类型\n#### 2.1 分为两大类：\n1. 基本数据类型：byte，short，int，long，float，double，boolean，char\n2. 引用数据类型：数组，类，接口，枚举，标注\n\n> 注：`单个字节`表示`8位二进制`位，最左边表示符号位（0：正，1：负）。\n\n#### 2.2 整数类型（byte，short，int，long）\n1. **byte**： 1个字节，范围`-2^7~2^7-1`，即`-128~127`。\n2. **short**：2个字节，范围`-2^15~2^15-1`，即`-32768~32767`。\n3. **int**:   4个字节，范围`-2^31~2^31-1`，即`正负21亿`之间。\n4. **long**： 8个字节，范围`-2^63~2^63-1`，比int更大。如果要表示long直接量，需要`L`或`l`结尾。\n\n#### 2.3 浮点类型（float，double）\n1. **float**： 4个字节，单精度浮点数，取到`小数点后7`位有效数字。如果要表示float直接量，需要`F`或`f`结尾\n2. **double**：8个字节，双精度浮点数，取到`小数点后15`位有效数字。\n\n> 扩展：浮点运算有时会有误差，为了实现精确运算可使用`java.math.BigDecimal`类型加以描述。\n\n#### 2.4 布尔类型（boolean）\n1. **boolean**：1个字节（未明确规定），值只有`true`和`false`。\n\n#### 2.5 字符类型（char）\n1. **char**：2个字节，表示单个字符的数据类型。事实是一个16位无符号整数，值是对应字符的编码，如：'a','1','中' 等。\n- 开发中很少用到char类型，而使用String类型描述的多个字符组成的字符串，使用双引号\"\"引起来。\n- 需记住的ASII码字符：'a':97，'A':65，'0':48，空格:32，换行符:10\n- 常用转义符：`\\t`:制表符，`\\n`:换行，`\\\"`，`\\'`，`\\\\`，`\\b`，`\\r`\n\n#### 2.6 基本数据类型之间转换\n1. 自动类型转换：从小类型到大类型自动转换\n\n```\nbyte --> short --> int --> long --> float --> double\n          char -----^\n```\n\n2. 强制类型转换：需在被转换数据前加上类型，会造成精度损失或者溢出\n\n```\nlong big = 1024L\\*1024\\*1024;\nint i = (int)big;\n```\n\n\n<span id=\"id3\"><span>\n### 3. 运算符\n1. 算术运算符： `+`，`-`，`*`，`/`，`%`\n2. 关系运算符： `>`，`<`，`>=`，`<=`，`==`，`!=`\n3. 自增减运算符： `++`，`--`\n4. 逻辑运算符： `&&`，`||`，`！`（短路特性：逻辑与`&&`运算，若第一个条件为假,跳过第二个条件；逻辑或`||`运算，若第一个条件为真，跳过第二个条件）\n5. 三目运算符： 条件 ? 表达式1 ： 表达式2\n6. 赋值运算符：`=`，`+=`，`-=`，`*=`，`=` \n\n<span id=\"id4\"><span>\n### 4. 循环\n1. while循环和for循环完全可以互换。\n2. while循环主要用于明确循环条件，但不明确循环次数的场合\n3. for循环主要用于明确次数或范围的场合\n4. while(true) 等价于 for(;;)，表示无限循环。\n\n<span id=\"id5\"><span>\n### 5. 数组\n#### 5.1 一维数组\n- `数组类型[] 数组名 = new 数据类型[长度]` ：动态方式\n\n``` java\n数组类型[] 数组名 = new 数据类型[长度] //动态方式\nint[] arr = new int[5];\n```\n\n``` java\n数组类型[] 数组名 = {初始值1, 初始值1, 初始值1, ...} //静态方式\nint[] arr = {10, 20, 30, 40};\n/*特殊方式：*/ int[] arr = new int[]{10, 20, 30};\n```\n\n#### 5.2 二维数组\n\n``` java\n数组类型[][] 数组名 = new 数据类型[行数][列数]\nint[][] arr = new int\\[5]\\[6];\n```\n\n``` java\n数组类型[][] 数组名 = {{初始值1, 初始值1, 初始值1},{值2,...} ...}\nint[] arr = {{10, 20, 30}, {01, 5, 3}, {8, 20, 6}};\n```\n\n> 二维数组arr.length表示行数，arr[0].length表示此行的长度\n\n\n[回到顶部😼](#)","slug":"J2SE语法基础","published":1,"updated":"2019-07-07T10:08:49.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop27000bjst34tamh2kp","content":"<h2 id=\"一、Java语法基础\"><a href=\"#一、Java语法基础\" class=\"headerlink\" title=\"一、Java语法基础\"></a>一、Java语法基础</h2><ol>\n<li><a href=\"#id1\">标识符（变量）命名规则</a></li>\n<li><a href=\"#id2\">数据类型</a></li>\n<li><a href=\"#id3\">运算符</a></li>\n<li><a href=\"#id4\">循环</a></li>\n<li><a href=\"#id5\">数组</a></li>\n</ol>\n<p><span id=\"id1\"><span></span></span></p>\n<h3 id=\"1-标识符（变量）命名规则\"><a href=\"#1-标识符（变量）命名规则\" class=\"headerlink\" title=\"1. 标识符（变量）命名规则\"></a>1. 标识符（变量）命名规则</h3><ol>\n<li>必须字母，数字，下划线以及美元$等组成，且首位非数字。</li>\n<li>不能使用Java语言中的关键字，如class，static，void，int等。</li>\n<li>区分大小写，长度无限制，但不能过长，尽量见名知意。</li>\n</ol>\n<p><span id=\"id2\"><span></span></span></p>\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h3><h4 id=\"2-1-分为两大类：\"><a href=\"#2-1-分为两大类：\" class=\"headerlink\" title=\"2.1 分为两大类：\"></a>2.1 分为两大类：</h4><ol>\n<li>基本数据类型：byte，short，int，long，float，double，boolean，char</li>\n<li>引用数据类型：数组，类，接口，枚举，标注</li>\n</ol>\n<blockquote>\n<p>注：<code>单个字节</code>表示<code>8位二进制</code>位，最左边表示符号位（0：正，1：负）。</p>\n</blockquote>\n<h4 id=\"2-2-整数类型（byte，short，int，long）\"><a href=\"#2-2-整数类型（byte，short，int，long）\" class=\"headerlink\" title=\"2.2 整数类型（byte，short，int，long）\"></a>2.2 整数类型（byte，short，int，long）</h4><ol>\n<li><strong>byte</strong>： 1个字节，范围<code>-2^7~2^7-1</code>，即<code>-128~127</code>。</li>\n<li><strong>short</strong>：2个字节，范围<code>-2^15~2^15-1</code>，即<code>-32768~32767</code>。</li>\n<li><strong>int</strong>:   4个字节，范围<code>-2^31~2^31-1</code>，即<code>正负21亿</code>之间。</li>\n<li><strong>long</strong>： 8个字节，范围<code>-2^63~2^63-1</code>，比int更大。如果要表示long直接量，需要<code>L</code>或<code>l</code>结尾。</li>\n</ol>\n<h4 id=\"2-3-浮点类型（float，double）\"><a href=\"#2-3-浮点类型（float，double）\" class=\"headerlink\" title=\"2.3 浮点类型（float，double）\"></a>2.3 浮点类型（float，double）</h4><ol>\n<li><strong>float</strong>： 4个字节，单精度浮点数，取到<code>小数点后7</code>位有效数字。如果要表示float直接量，需要<code>F</code>或<code>f</code>结尾</li>\n<li><strong>double</strong>：8个字节，双精度浮点数，取到<code>小数点后15</code>位有效数字。</li>\n</ol>\n<blockquote>\n<p>扩展：浮点运算有时会有误差，为了实现精确运算可使用<code>java.math.BigDecimal</code>类型加以描述。</p>\n</blockquote>\n<h4 id=\"2-4-布尔类型（boolean）\"><a href=\"#2-4-布尔类型（boolean）\" class=\"headerlink\" title=\"2.4 布尔类型（boolean）\"></a>2.4 布尔类型（boolean）</h4><ol>\n<li><strong>boolean</strong>：1个字节（未明确规定），值只有<code>true</code>和<code>false</code>。</li>\n</ol>\n<h4 id=\"2-5-字符类型（char）\"><a href=\"#2-5-字符类型（char）\" class=\"headerlink\" title=\"2.5 字符类型（char）\"></a>2.5 字符类型（char）</h4><ol>\n<li><strong>char</strong>：2个字节，表示单个字符的数据类型。事实是一个16位无符号整数，值是对应字符的编码，如：’a’,’1’,’中’ 等。</li>\n</ol>\n<ul>\n<li>开发中很少用到char类型，而使用String类型描述的多个字符组成的字符串，使用双引号””引起来。</li>\n<li>需记住的ASII码字符：’a’:97，’A’:65，’0’:48，空格:32，换行符:10</li>\n<li>常用转义符：<code>\\t</code>:制表符，<code>\\n</code>:换行，<code>\\&quot;</code>，<code>\\&#39;</code>，<code>\\\\</code>，<code>\\b</code>，<code>\\r</code></li>\n</ul>\n<h4 id=\"2-6-基本数据类型之间转换\"><a href=\"#2-6-基本数据类型之间转换\" class=\"headerlink\" title=\"2.6 基本数据类型之间转换\"></a>2.6 基本数据类型之间转换</h4><ol>\n<li>自动类型转换：从小类型到大类型自动转换</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte --&gt; short --&gt; int --&gt; long --&gt; float --&gt; double</span><br><span class=\"line\">          char -----^</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>强制类型转换：需在被转换数据前加上类型，会造成精度损失或者溢出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long big = 1024L\\*1024\\*1024;</span><br><span class=\"line\">int i = (int)big;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id3\"><span></span></span></p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3. 运算符\"></a>3. 运算符</h3><ol>\n<li>算术运算符： <code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li>\n<li>关系运算符： <code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>==</code>，<code>!=</code></li>\n<li>自增减运算符： <code>++</code>，<code>--</code></li>\n<li>逻辑运算符： <code>&amp;&amp;</code>，<code>||</code>，<code>！</code>（短路特性：逻辑与<code>&amp;&amp;</code>运算，若第一个条件为假,跳过第二个条件；逻辑或<code>||</code>运算，若第一个条件为真，跳过第二个条件）</li>\n<li>三目运算符： 条件 ? 表达式1 ： 表达式2</li>\n<li>赋值运算符：<code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>=</code> </li>\n</ol>\n<p><span id=\"id4\"><span></span></span></p>\n<h3 id=\"4-循环\"><a href=\"#4-循环\" class=\"headerlink\" title=\"4. 循环\"></a>4. 循环</h3><ol>\n<li>while循环和for循环完全可以互换。</li>\n<li>while循环主要用于明确循环条件，但不明确循环次数的场合</li>\n<li>for循环主要用于明确次数或范围的场合</li>\n<li>while(true) 等价于 for(;;)，表示无限循环。</li>\n</ol>\n<p><span id=\"id5\"><span></span></span></p>\n<h3 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5. 数组\"></a>5. 数组</h3><h4 id=\"5-1-一维数组\"><a href=\"#5-1-一维数组\" class=\"headerlink\" title=\"5.1 一维数组\"></a>5.1 一维数组</h4><ul>\n<li><code>数组类型[] 数组名 = new 数据类型[长度]</code> ：动态方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[] 数组名 = <span class=\"keyword\">new</span> 数据类型[长度] <span class=\"comment\">//动态方式</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[] 数组名 = &#123;初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, ...&#125; <span class=\"comment\">//静态方式</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*特殊方式：*/</span> <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-二维数组\"><a href=\"#5-2-二维数组\" class=\"headerlink\" title=\"5.2 二维数组\"></a>5.2 二维数组</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[][] 数组名 = <span class=\"keyword\">new</span> 数据类型[行数][列数]</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>\\[<span class=\"number\">5</span>]\\[<span class=\"number\">6</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[][] 数组名 = &#123;&#123;初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>&#125;,&#123;值<span class=\"number\">2</span>,...&#125; ...&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;, &#123;<span class=\"number\">01</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">8</span>, <span class=\"number\">20</span>, <span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>二维数组arr.length表示行数，arr[0].length表示此行的长度</p>\n</blockquote>\n<p><a href=\"#\">回到顶部😼</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Java语法基础\"><a href=\"#一、Java语法基础\" class=\"headerlink\" title=\"一、Java语法基础\"></a>一、Java语法基础</h2><ol>\n<li><a href=\"#id1\">标识符（变量）命名规则</a></li>\n<li><a href=\"#id2\">数据类型</a></li>\n<li><a href=\"#id3\">运算符</a></li>\n<li><a href=\"#id4\">循环</a></li>\n<li><a href=\"#id5\">数组</a></li>\n</ol>\n<p><span id=\"id1\"><span></span></span></p>\n<h3 id=\"1-标识符（变量）命名规则\"><a href=\"#1-标识符（变量）命名规则\" class=\"headerlink\" title=\"1. 标识符（变量）命名规则\"></a>1. 标识符（变量）命名规则</h3><ol>\n<li>必须字母，数字，下划线以及美元$等组成，且首位非数字。</li>\n<li>不能使用Java语言中的关键字，如class，static，void，int等。</li>\n<li>区分大小写，长度无限制，但不能过长，尽量见名知意。</li>\n</ol>\n<p><span id=\"id2\"><span></span></span></p>\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h3><h4 id=\"2-1-分为两大类：\"><a href=\"#2-1-分为两大类：\" class=\"headerlink\" title=\"2.1 分为两大类：\"></a>2.1 分为两大类：</h4><ol>\n<li>基本数据类型：byte，short，int，long，float，double，boolean，char</li>\n<li>引用数据类型：数组，类，接口，枚举，标注</li>\n</ol>\n<blockquote>\n<p>注：<code>单个字节</code>表示<code>8位二进制</code>位，最左边表示符号位（0：正，1：负）。</p>\n</blockquote>\n<h4 id=\"2-2-整数类型（byte，short，int，long）\"><a href=\"#2-2-整数类型（byte，short，int，long）\" class=\"headerlink\" title=\"2.2 整数类型（byte，short，int，long）\"></a>2.2 整数类型（byte，short，int，long）</h4><ol>\n<li><strong>byte</strong>： 1个字节，范围<code>-2^7~2^7-1</code>，即<code>-128~127</code>。</li>\n<li><strong>short</strong>：2个字节，范围<code>-2^15~2^15-1</code>，即<code>-32768~32767</code>。</li>\n<li><strong>int</strong>:   4个字节，范围<code>-2^31~2^31-1</code>，即<code>正负21亿</code>之间。</li>\n<li><strong>long</strong>： 8个字节，范围<code>-2^63~2^63-1</code>，比int更大。如果要表示long直接量，需要<code>L</code>或<code>l</code>结尾。</li>\n</ol>\n<h4 id=\"2-3-浮点类型（float，double）\"><a href=\"#2-3-浮点类型（float，double）\" class=\"headerlink\" title=\"2.3 浮点类型（float，double）\"></a>2.3 浮点类型（float，double）</h4><ol>\n<li><strong>float</strong>： 4个字节，单精度浮点数，取到<code>小数点后7</code>位有效数字。如果要表示float直接量，需要<code>F</code>或<code>f</code>结尾</li>\n<li><strong>double</strong>：8个字节，双精度浮点数，取到<code>小数点后15</code>位有效数字。</li>\n</ol>\n<blockquote>\n<p>扩展：浮点运算有时会有误差，为了实现精确运算可使用<code>java.math.BigDecimal</code>类型加以描述。</p>\n</blockquote>\n<h4 id=\"2-4-布尔类型（boolean）\"><a href=\"#2-4-布尔类型（boolean）\" class=\"headerlink\" title=\"2.4 布尔类型（boolean）\"></a>2.4 布尔类型（boolean）</h4><ol>\n<li><strong>boolean</strong>：1个字节（未明确规定），值只有<code>true</code>和<code>false</code>。</li>\n</ol>\n<h4 id=\"2-5-字符类型（char）\"><a href=\"#2-5-字符类型（char）\" class=\"headerlink\" title=\"2.5 字符类型（char）\"></a>2.5 字符类型（char）</h4><ol>\n<li><strong>char</strong>：2个字节，表示单个字符的数据类型。事实是一个16位无符号整数，值是对应字符的编码，如：’a’,’1’,’中’ 等。</li>\n</ol>\n<ul>\n<li>开发中很少用到char类型，而使用String类型描述的多个字符组成的字符串，使用双引号””引起来。</li>\n<li>需记住的ASII码字符：’a’:97，’A’:65，’0’:48，空格:32，换行符:10</li>\n<li>常用转义符：<code>\\t</code>:制表符，<code>\\n</code>:换行，<code>\\&quot;</code>，<code>\\&#39;</code>，<code>\\\\</code>，<code>\\b</code>，<code>\\r</code></li>\n</ul>\n<h4 id=\"2-6-基本数据类型之间转换\"><a href=\"#2-6-基本数据类型之间转换\" class=\"headerlink\" title=\"2.6 基本数据类型之间转换\"></a>2.6 基本数据类型之间转换</h4><ol>\n<li>自动类型转换：从小类型到大类型自动转换</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte --&gt; short --&gt; int --&gt; long --&gt; float --&gt; double</span><br><span class=\"line\">          char -----^</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>强制类型转换：需在被转换数据前加上类型，会造成精度损失或者溢出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long big = 1024L\\*1024\\*1024;</span><br><span class=\"line\">int i = (int)big;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id3\"><span></span></span></p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3. 运算符\"></a>3. 运算符</h3><ol>\n<li>算术运算符： <code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li>\n<li>关系运算符： <code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>==</code>，<code>!=</code></li>\n<li>自增减运算符： <code>++</code>，<code>--</code></li>\n<li>逻辑运算符： <code>&amp;&amp;</code>，<code>||</code>，<code>！</code>（短路特性：逻辑与<code>&amp;&amp;</code>运算，若第一个条件为假,跳过第二个条件；逻辑或<code>||</code>运算，若第一个条件为真，跳过第二个条件）</li>\n<li>三目运算符： 条件 ? 表达式1 ： 表达式2</li>\n<li>赋值运算符：<code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>=</code> </li>\n</ol>\n<p><span id=\"id4\"><span></span></span></p>\n<h3 id=\"4-循环\"><a href=\"#4-循环\" class=\"headerlink\" title=\"4. 循环\"></a>4. 循环</h3><ol>\n<li>while循环和for循环完全可以互换。</li>\n<li>while循环主要用于明确循环条件，但不明确循环次数的场合</li>\n<li>for循环主要用于明确次数或范围的场合</li>\n<li>while(true) 等价于 for(;;)，表示无限循环。</li>\n</ol>\n<p><span id=\"id5\"><span></span></span></p>\n<h3 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5. 数组\"></a>5. 数组</h3><h4 id=\"5-1-一维数组\"><a href=\"#5-1-一维数组\" class=\"headerlink\" title=\"5.1 一维数组\"></a>5.1 一维数组</h4><ul>\n<li><code>数组类型[] 数组名 = new 数据类型[长度]</code> ：动态方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[] 数组名 = <span class=\"keyword\">new</span> 数据类型[长度] <span class=\"comment\">//动态方式</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[] 数组名 = &#123;初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, ...&#125; <span class=\"comment\">//静态方式</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*特殊方式：*/</span> <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-二维数组\"><a href=\"#5-2-二维数组\" class=\"headerlink\" title=\"5.2 二维数组\"></a>5.2 二维数组</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[][] 数组名 = <span class=\"keyword\">new</span> 数据类型[行数][列数]</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>\\[<span class=\"number\">5</span>]\\[<span class=\"number\">6</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组类型[][] 数组名 = &#123;&#123;初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>, 初始值<span class=\"number\">1</span>&#125;,&#123;值<span class=\"number\">2</span>,...&#125; ...&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;, &#123;<span class=\"number\">01</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">8</span>, <span class=\"number\">20</span>, <span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>二维数组arr.length表示行数，arr[0].length表示此行的长度</p>\n</blockquote>\n<p><a href=\"#\">回到顶部😼</a></p>\n"},{"title":"BlueLake博客主题的详细配置","date":"2016-12-29T03:25:33.000Z","top":true,"_content":"### 开始之前\n\n[BlueLake主题](https://github.com/chaooo/hexo-theme-BlueLake)写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。\n<!-- more -->\n在阅读本文之前，假定您已经成功安装了[Hexo](https://hexo.io/zh-cn/)，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n> 需要特别注意的是Hexo有两个`_config.yml`配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为**`根_config.yml`**；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为**`主题_config.yml`**。\n\n### 1. 安装\n\n您可以直接到[BlueLake发布页](https://github.com/chaooo/hexo-theme-BlueLake)下载，然后解压拷贝到`themes`目录下，修改配置即可。\n不过我还是推荐使用`GIT`来checkout代码，之后也可以通过`git pull`来快速更新。\n\n#### 1.1 安装主题\n\n在根目录下打开终端窗口：\n``` bash git bash\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n```\n\n#### 1.2 安装主题渲染器\n\nBlueLake是基于`jade`和`stylus`写的，所以需要安装`hexo-renderer-jade`和`hexo-renderer-stylus`来渲染。\n``` bash git bash\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n```\n\n#### 1.3 启用主题\n\n打开`根_config.yml`配置文件，找到theme字段，将其值改为`BlueLake`(先确认主题文件夹名称是否为BlueLake)。\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntheme: BlueLake\n```\n\n#### 1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\n``` bash git bash\n$ hexo s --debug\n```\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000`，检查站点是否正确运行。\n\n#### 1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接`git pull`来更新主题。\n``` bash git bash\ncd themes/BlueLake\ngit pull\n```\n\n### 2. 配置\n\n#### 2.1 配置网站头部显示文字\n\n打开`根_config.yml`，找到：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntitle: \nsubtitle: \ndescription: \nauthor: \n```\n`title`和`subtitle`分别是网站主标题和副标题，会显示在网站头部；`description`在网站界面不会显示，内容会加入网站源码的`meta`标签中，主要用于SEO；`author`就填写网站所有者的名字，会在网站底部的`Copyright`处有所显示。\n\n#### 2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在`根_config.yml`配置如下：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\nlanguage: zh-CN\n```\n\n#### 2.3 设置菜单\n\n打开`主题_config.yml`，找到：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n```\n主题默认是展示四个菜单，即`主页home`，`归档archive`，`关于about`，`订阅RSS`；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的`footer`中`联系博主`的三个图标分别是`邮箱`，`微博主页链接地址`，`GitHUb个人页链接地址`，直接使用`主题_config.yml`中`about页面`的配置，若不需要about页面，只需要如下配置就好：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n```\n\n##### 2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\n``` bash git bash\n$ hexo new page 'about'\n```\n打开`主题_config.yml`，补全关于我页面的详细信息：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n```\n当然您也可以自定义重新布局about页面，只需要修改`layout/page.jade`模板就好。\n\n##### 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\n``` bash git bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n添加`主题_config.yml`配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n#### 2.4 添加本地搜索\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)来创建JSON数据文件：\n``` bash git bash\n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后在`根_config.yml`添加配置：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n最后在`主题_config.yml`添加配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nlocal_search: true\n```\n\n#### 2.5 修改站点图标\n\n站点图标存放在主题的`Source`目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的`source`文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为** apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n\n#### 2.6 添加站点关键字\n\n请在hexo目录的`根_config.yml`中添加keywords字段，如：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n```\n\n#### 2.7 首页添加文章置顶\n\n在根目录下打开命令行窗口安装：\n``` bash git bash\n$ npm uninstall hexo-generator-index --save\n$ npm install hexo-generator-index-pin-top --save\n```\n然后在需要置顶的文章的Front-matter中加上top: true即可。\n``` md\n---\ntitle: BlueLake博客主题的详细配置\ntags: [hexo,BlueLake]\ncategories: hexo博客折腾\ntop: true\n---\n```\n\n#### 2.8 更换主题背景和添加文章版权信息\n更换主题背景为深色\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \n# Theme tone\ndark: true #true/false\n```\n添加文章版权信息\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \n# Theme tone\n#Copyright\ncopyright: \n  enable: true #true/false  \n  describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述\n```\n\n#### 2.9 其他配置\n`主题_config.yml`的其他配置\n1. `show_category_count`——是否显示分类下的文章数。\n2. `widgets_on_small_screens`——是否在小屏显示侧边栏，若`true`,则侧边栏挂件将显示在底部。\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nshow_category_count: true \nwidgets_on_small_screens: true \n```\n\n### 3.集成第三方服务\n\n#### 3.1 添加评论\n\n目前主题集成六种第三方评论，分别是[多说评论](http://duoshuo.com)、[Disqus评论](https://disqus.com)、[来必力评论](https://livere.com)、[友言评论](http://www.uyan.cc/)、[网易云跟帖评论](https://gentie.163.com/info.html)、[畅言评论](http://changyan.kuaizhan.com)，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了。\n1. 注册并获得代码。\n  - 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。\n  - 若使用[Disqus评论](https://disqus.com)，注册Disqus后获得short_name。\n  - 若使用[来必力评论](https://livere.com)，注册来必力,获得data-uid。\n  - 若使用[友言评论](http://www.uyan.cc/)，注册友言,获得uid。\n  - 若使用[网易云跟帖评论](https://gentie.163.com/info.html)，注册网易云跟帖,获得productKey。\n  - 若使用[畅言评论](http://changyan.kuaizhan.com)，注册畅言，获得appid，appkey。\n2. 配置`主题_config.yml`：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)\n```\n\n#### 3.2 百度统计\n\n1. 登录[百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面。\n2. 复制`//hm.baidu.com/hm.js?`后面那串统计脚本id(假设为：8006843039519956000)\n3. 配置`主题_config.yml`:\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nbaidu_analytics: 8006843039519956000\n```\n> 注意： `baidu_analytics`不是你的百度`id`或者百度统计`id`\n如若使用谷歌统计，配置方法与百度统计类似。\n\n#### 3.3 卜算子阅读次数统计\n\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nbusuanzi: true\n```\n若设置为`true`将计算文章的阅读量(Hits)，并显示在文章标题下的`小手图标`旁。\n\n#### 3.4 微博秀\n\n微博秀挂件的代码放在`layout/_widget/weibo.jade`下，需要您去[微博开放平台](http://open.weibo.com/)获取您自己的微博秀代码来替换。\n1. 登录[微博开放平台](http://open.weibo.com/)，选择微博秀。\n2. 为了与主题风格统一，作如下配置\n  - 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`；\n  - 样式设置：主字色`#333`；链接色`#40759b`；鼠标悬停色`#f7f8f8`；\n  - 模块设置：去掉`标题`、`边框`、`粉丝`的勾选框，只留`微博`。\n3. 复制代码里`src=\"\"`里引号包裹的内容，替换到`layout/_widget/weibo.jade`\n{% codeblock weibo.jade lang:stylus mark:1,7-8,10 https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade layout/_widget/weibo.jade %}\n.widget\n  .widget-title\n    i(class='fa fa-weibo')= ' ' + __('新浪微博')\n  iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n{% endcodeblock %}\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n> 注意：最主要是是要把`src`里`uid=`和`verifier=`后面的字段替换为您自己代码里的就好。","source":"_posts/BlueLake博客主题的详细配置.md","raw":"---\ntitle: BlueLake博客主题的详细配置\ndate: 2016-12-29 11:25:33\ntags: [hexo,BlueLake]\ncategories: hexo博客折腾\ntop: true\n---\n### 开始之前\n\n[BlueLake主题](https://github.com/chaooo/hexo-theme-BlueLake)写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。\n<!-- more -->\n在阅读本文之前，假定您已经成功安装了[Hexo](https://hexo.io/zh-cn/)，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n> 需要特别注意的是Hexo有两个`_config.yml`配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为**`根_config.yml`**；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为**`主题_config.yml`**。\n\n### 1. 安装\n\n您可以直接到[BlueLake发布页](https://github.com/chaooo/hexo-theme-BlueLake)下载，然后解压拷贝到`themes`目录下，修改配置即可。\n不过我还是推荐使用`GIT`来checkout代码，之后也可以通过`git pull`来快速更新。\n\n#### 1.1 安装主题\n\n在根目录下打开终端窗口：\n``` bash git bash\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n```\n\n#### 1.2 安装主题渲染器\n\nBlueLake是基于`jade`和`stylus`写的，所以需要安装`hexo-renderer-jade`和`hexo-renderer-stylus`来渲染。\n``` bash git bash\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n```\n\n#### 1.3 启用主题\n\n打开`根_config.yml`配置文件，找到theme字段，将其值改为`BlueLake`(先确认主题文件夹名称是否为BlueLake)。\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntheme: BlueLake\n```\n\n#### 1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\n``` bash git bash\n$ hexo s --debug\n```\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000`，检查站点是否正确运行。\n\n#### 1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接`git pull`来更新主题。\n``` bash git bash\ncd themes/BlueLake\ngit pull\n```\n\n### 2. 配置\n\n#### 2.1 配置网站头部显示文字\n\n打开`根_config.yml`，找到：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntitle: \nsubtitle: \ndescription: \nauthor: \n```\n`title`和`subtitle`分别是网站主标题和副标题，会显示在网站头部；`description`在网站界面不会显示，内容会加入网站源码的`meta`标签中，主要用于SEO；`author`就填写网站所有者的名字，会在网站底部的`Copyright`处有所显示。\n\n#### 2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在`根_config.yml`配置如下：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\nlanguage: zh-CN\n```\n\n#### 2.3 设置菜单\n\n打开`主题_config.yml`，找到：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n```\n主题默认是展示四个菜单，即`主页home`，`归档archive`，`关于about`，`订阅RSS`；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的`footer`中`联系博主`的三个图标分别是`邮箱`，`微博主页链接地址`，`GitHUb个人页链接地址`，直接使用`主题_config.yml`中`about页面`的配置，若不需要about页面，只需要如下配置就好：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n```\n\n##### 2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\n``` bash git bash\n$ hexo new page 'about'\n```\n打开`主题_config.yml`，补全关于我页面的详细信息：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n```\n当然您也可以自定义重新布局about页面，只需要修改`layout/page.jade`模板就好。\n\n##### 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\n``` bash git bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n添加`主题_config.yml`配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n#### 2.4 添加本地搜索\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)来创建JSON数据文件：\n``` bash git bash\n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后在`根_config.yml`添加配置：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n最后在`主题_config.yml`添加配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nlocal_search: true\n```\n\n#### 2.5 修改站点图标\n\n站点图标存放在主题的`Source`目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的`source`文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为** apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n\n#### 2.6 添加站点关键字\n\n请在hexo目录的`根_config.yml`中添加keywords字段，如：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n```\n\n#### 2.7 首页添加文章置顶\n\n在根目录下打开命令行窗口安装：\n``` bash git bash\n$ npm uninstall hexo-generator-index --save\n$ npm install hexo-generator-index-pin-top --save\n```\n然后在需要置顶的文章的Front-matter中加上top: true即可。\n``` md\n---\ntitle: BlueLake博客主题的详细配置\ntags: [hexo,BlueLake]\ncategories: hexo博客折腾\ntop: true\n---\n```\n\n#### 2.8 更换主题背景和添加文章版权信息\n更换主题背景为深色\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \n# Theme tone\ndark: true #true/false\n```\n添加文章版权信息\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \n# Theme tone\n#Copyright\ncopyright: \n  enable: true #true/false  \n  describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述\n```\n\n#### 2.9 其他配置\n`主题_config.yml`的其他配置\n1. `show_category_count`——是否显示分类下的文章数。\n2. `widgets_on_small_screens`——是否在小屏显示侧边栏，若`true`,则侧边栏挂件将显示在底部。\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nshow_category_count: true \nwidgets_on_small_screens: true \n```\n\n### 3.集成第三方服务\n\n#### 3.1 添加评论\n\n目前主题集成六种第三方评论，分别是[多说评论](http://duoshuo.com)、[Disqus评论](https://disqus.com)、[来必力评论](https://livere.com)、[友言评论](http://www.uyan.cc/)、[网易云跟帖评论](https://gentie.163.com/info.html)、[畅言评论](http://changyan.kuaizhan.com)，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了。\n1. 注册并获得代码。\n  - 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。\n  - 若使用[Disqus评论](https://disqus.com)，注册Disqus后获得short_name。\n  - 若使用[来必力评论](https://livere.com)，注册来必力,获得data-uid。\n  - 若使用[友言评论](http://www.uyan.cc/)，注册友言,获得uid。\n  - 若使用[网易云跟帖评论](https://gentie.163.com/info.html)，注册网易云跟帖,获得productKey。\n  - 若使用[畅言评论](http://changyan.kuaizhan.com)，注册畅言，获得appid，appkey。\n2. 配置`主题_config.yml`：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)\n```\n\n#### 3.2 百度统计\n\n1. 登录[百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面。\n2. 复制`//hm.baidu.com/hm.js?`后面那串统计脚本id(假设为：8006843039519956000)\n3. 配置`主题_config.yml`:\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nbaidu_analytics: 8006843039519956000\n```\n> 注意： `baidu_analytics`不是你的百度`id`或者百度统计`id`\n如若使用谷歌统计，配置方法与百度统计类似。\n\n#### 3.3 卜算子阅读次数统计\n\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nbusuanzi: true\n```\n若设置为`true`将计算文章的阅读量(Hits)，并显示在文章标题下的`小手图标`旁。\n\n#### 3.4 微博秀\n\n微博秀挂件的代码放在`layout/_widget/weibo.jade`下，需要您去[微博开放平台](http://open.weibo.com/)获取您自己的微博秀代码来替换。\n1. 登录[微博开放平台](http://open.weibo.com/)，选择微博秀。\n2. 为了与主题风格统一，作如下配置\n  - 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`；\n  - 样式设置：主字色`#333`；链接色`#40759b`；鼠标悬停色`#f7f8f8`；\n  - 模块设置：去掉`标题`、`边框`、`粉丝`的勾选框，只留`微博`。\n3. 复制代码里`src=\"\"`里引号包裹的内容，替换到`layout/_widget/weibo.jade`\n{% codeblock weibo.jade lang:stylus mark:1,7-8,10 https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade layout/_widget/weibo.jade %}\n.widget\n  .widget-title\n    i(class='fa fa-weibo')= ' ' + __('新浪微博')\n  iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n{% endcodeblock %}\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n> 注意：最主要是是要把`src`里`uid=`和`verifier=`后面的字段替换为您自己代码里的就好。","slug":"BlueLake博客主题的详细配置","published":1,"updated":"2019-07-07T03:06:11.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop5g000xjst379tytwr2","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p><a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>\n<a id=\"more\"></a>\n<p>在阅读本文之前，假定您已经成功安装了<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<blockquote>\n<p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>您可以直接到<a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p>\n<h4 id=\"1-1-安装主题\"><a href=\"#1-1-安装主题\" class=\"headerlink\" title=\"1.1 安装主题\"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-安装主题渲染器\"><a href=\"#1-2-安装主题渲染器\" class=\"headerlink\" title=\"1.2 安装主题渲染器\"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class=\"line\">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启用主题\"><a href=\"#1-3-启用主题\" class=\"headerlink\" title=\"1.3 启用主题\"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">BlueLake</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4 验证\"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure>\n\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>\n<h4 id=\"1-5-更新主题\"><a href=\"#1-5-更新主题\" class=\"headerlink\" title=\"1.5 更新主题\"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/BlueLake</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h4 id=\"2-1-配置网站头部显示文字\"><a href=\"#2-1-配置网站头部显示文字\" class=\"headerlink\" title=\"2.1 配置网站头部显示文字\"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> </span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> </span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br></pre></td></tr></table></figure>\n\n<p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p>\n<h4 id=\"2-2-设置语言\"><a href=\"#2-2-设置语言\" class=\"headerlink\" title=\"2.2 设置语言\"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-设置菜单\"><a href=\"#2-3-设置菜单\" class=\"headerlink\" title=\"2.3 设置菜单\"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">archives/</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># - page: about</span></span><br><span class=\"line\">  <span class=\"comment\">#   directory: about/</span></span><br><span class=\"line\">  <span class=\"comment\">#   icon: fa-user</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">rss</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># About page </span></span><br><span class=\"line\"><span class=\"attr\">about:</span></span><br><span class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></span><br><span class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-1-添加about页\"><a href=\"#2-3-1-添加about页\" class=\"headerlink\" title=\"2.3.1 添加about页\"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page <span class=\"string\">'about'</span></span><br></pre></td></tr></table></figure>\n\n<p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># About page </span></span><br><span class=\"line\"><span class=\"attr\">about:</span></span><br><span class=\"line\"><span class=\"attr\">  photo_url:</span> <span class=\"comment\">## 头像的链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></span><br><span class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  weibo_name:</span> <span class=\"comment\">## 微博用户名 </span></span><br><span class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  github_name:</span> <span class=\"comment\">## github用户名</span></span><br></pre></td></tr></table></figure>\n\n<p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p>\n<h5 id=\"2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br><span class=\"line\">$ npm install hexo-generator-sitemap --save</span><br><span class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>主题_config.yml</code>配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-feed</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-sitemap</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-baidu-sitemap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-添加本地搜索\"><a href=\"#2-4-添加本地搜索\" class=\"headerlink\" title=\"2.4 添加本地搜索\"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a>来创建JSON数据文件：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>根_config.yml</code>添加配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>最后在<code>主题_config.yml</code>添加配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-修改站点图标\"><a href=\"#2-5-修改站点图标\" class=\"headerlink\" title=\"2.5 修改站点图标\"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico <strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为</strong> apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p>\n<h4 id=\"2-6-添加站点关键字\"><a href=\"#2-6-添加站点关键字\" class=\"headerlink\" title=\"2.6 添加站点关键字\"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站简要描述,如：Charles·Zheng's</span> <span class=\"string\">blog.</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">网站关键字,</span> <span class=\"string\">key,</span> <span class=\"string\">key1,</span> <span class=\"string\">key2,</span> <span class=\"string\">key3</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Charles</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-首页添加文章置顶\"><a href=\"#2-7-首页添加文章置顶\" class=\"headerlink\" title=\"2.7 首页添加文章置顶\"></a>2.7 首页添加文章置顶</h4><p>在根目录下打开命令行窗口安装：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-generator-index --save</span><br><span class=\"line\">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要置顶的文章的Front-matter中加上top: true即可。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: BlueLake博客主题的详细配置</span><br><span class=\"line\">tags: [hexo,BlueLake]</span><br><span class=\"line\">categories: hexo博客折腾</span><br><span class=\"line\">top: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-更换主题背景和添加文章版权信息\"><a href=\"#2-8-更换主题背景和添加文章版权信息\" class=\"headerlink\" title=\"2.8 更换主题背景和添加文章版权信息\"></a>2.8 更换主题背景和添加文章版权信息</h4><p>更换主题背景为深色</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Theme tone</span></span><br><span class=\"line\"><span class=\"attr\">dark:</span> <span class=\"literal\">true</span> <span class=\"comment\">#true/false</span></span><br></pre></td></tr></table></figure>\n\n<p>添加文章版权信息</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Theme tone</span></span><br><span class=\"line\"><span class=\"comment\">#Copyright</span></span><br><span class=\"line\"><span class=\"attr\">copyright:</span> </span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#true/false  </span></span><br><span class=\"line\"><span class=\"attr\">  describe:</span> <span class=\"string\">转载请注明出处(必须保留原文作者署名原文链接)</span> <span class=\"comment\">#自定义描述替换默认描述</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-9-其他配置\"><a href=\"#2-9-其他配置\" class=\"headerlink\" title=\"2.9 其他配置\"></a>2.9 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p>\n<ol>\n<li><code>show_category_count</code>——是否显示分类下的文章数。</li>\n<li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">show_category_count:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\"><span class=\"attr\">widgets_on_small_screens:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"3-集成第三方服务\"><a href=\"#3-集成第三方服务\" class=\"headerlink\" title=\"3.集成第三方服务\"></a>3.集成第三方服务</h3><h4 id=\"3-1-添加评论\"><a href=\"#3-1-添加评论\" class=\"headerlink\" title=\"3.1 添加评论\"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说评论</a>、<a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus评论</a>、<a href=\"https://livere.com\" target=\"_blank\" rel=\"noopener\">来必力评论</a>、<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言评论</a>、<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖评论</a>、<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"noopener\">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了。</p>\n<ol>\n<li>注册并获得代码。<ul>\n<li>若使用<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说评论</a>，注册多说后获得short_name。</li>\n<li>若使用<a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus评论</a>，注册Disqus后获得short_name。</li>\n<li>若使用<a href=\"https://livere.com\" target=\"_blank\" rel=\"noopener\">来必力评论</a>，注册来必力,获得data-uid。</li>\n<li>若使用<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言评论</a>，注册友言,获得uid。</li>\n<li>若使用<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li>\n<li>若使用<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"noopener\">畅言评论</a>，注册畅言，获得appid，appkey。</li>\n</ul>\n</li>\n<li>配置<code>主题_config.yml</code>：<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Cmments</span></span><br><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  duoshuo:</span> <span class=\"comment\">## duoshuo_shortname</span></span><br><span class=\"line\"><span class=\"attr\">  disqus:</span> <span class=\"comment\">## disqus_shortname</span></span><br><span class=\"line\"><span class=\"attr\">  livere:</span> <span class=\"comment\">## 来必力(data-uid)</span></span><br><span class=\"line\"><span class=\"attr\">  uyan:</span> <span class=\"comment\">## 友言(uid)</span></span><br><span class=\"line\"><span class=\"attr\">  cloudTie:</span> <span class=\"comment\">## 网易云跟帖(productKey)</span></span><br><span class=\"line\"><span class=\"attr\">  changyan:</span> <span class=\"comment\">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class=\"line\"><span class=\"attr\">    appid:</span> <span class=\"comment\">## 畅言(appid)</span></span><br><span class=\"line\"><span class=\"attr\">    appkey:</span> <span class=\"comment\">##畅言(appkey)</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"3-2-百度统计\"><a href=\"#3-2-百度统计\" class=\"headerlink\" title=\"3.2 百度统计\"></a>3.2 百度统计</h4><ol>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>，定位到站点的代码获取页面。</li>\n<li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li>\n<li>配置<code>主题_config.yml</code>:<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"number\">8006843039519956000</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p>\n</blockquote>\n<h4 id=\"3-3-卜算子阅读次数统计\"><a href=\"#3-3-卜算子阅读次数统计\" class=\"headerlink\" title=\"3.3 卜算子阅读次数统计\"></a>3.3 卜算子阅读次数统计</h4><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p>\n<h4 id=\"3-4-微博秀\"><a href=\"#3-4-微博秀\" class=\"headerlink\" title=\"3.4 微博秀\"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"noopener\">微博开放平台</a>获取您自己的微博秀代码来替换。</p>\n<ol>\n<li>登录<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"noopener\">微博开放平台</a>，选择微博秀。</li>\n<li>为了与主题风格统一，作如下配置<ul>\n<li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li>\n<li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li>\n<li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li>\n</ul>\n</li>\n<li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class=\"highlight stylus\"><figcaption><span>weibo.jade</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade\" target=\"_blank\" rel=\"noopener\">layout/_widget/weibo.jade</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line marked\">.widget</span><br><span class=\"line\">  .widget-title</span><br><span class=\"line\">    i(class=<span class=\"string\">'fa fa-weibo'</span>)= <span class=\"string\">' '</span> + __(<span class=\"string\">'新浪微博'</span>)</span><br><span class=\"line\">  iframe(<span class=\"attribute\">width</span>=<span class=\"string\">\"100%\"</span>,height=<span class=\"string\">\"400\"</span>,class=<span class=\"string\">\"share_self\"</span>,frameborder=<span class=\"string\">\"0\"</span>,scrolling=<span class=\"string\">\"no\"</span>,src=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1\"</span>)</span><br></pre></td></tr></table></figure>\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote>\n<p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p><a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>","more":"<p>在阅读本文之前，假定您已经成功安装了<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<blockquote>\n<p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>您可以直接到<a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"noopener\">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p>\n<h4 id=\"1-1-安装主题\"><a href=\"#1-1-安装主题\" class=\"headerlink\" title=\"1.1 安装主题\"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-安装主题渲染器\"><a href=\"#1-2-安装主题渲染器\" class=\"headerlink\" title=\"1.2 安装主题渲染器\"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class=\"line\">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启用主题\"><a href=\"#1-3-启用主题\" class=\"headerlink\" title=\"1.3 启用主题\"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">BlueLake</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4 验证\"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --debug</span><br></pre></td></tr></table></figure>\n\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>\n<h4 id=\"1-5-更新主题\"><a href=\"#1-5-更新主题\" class=\"headerlink\" title=\"1.5 更新主题\"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/BlueLake</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h4 id=\"2-1-配置网站头部显示文字\"><a href=\"#2-1-配置网站头部显示文字\" class=\"headerlink\" title=\"2.1 配置网站头部显示文字\"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> </span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> </span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br></pre></td></tr></table></figure>\n\n<p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p>\n<h4 id=\"2-2-设置语言\"><a href=\"#2-2-设置语言\" class=\"headerlink\" title=\"2.2 设置语言\"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-设置菜单\"><a href=\"#2-3-设置菜单\" class=\"headerlink\" title=\"2.3 设置菜单\"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">archives/</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># - page: about</span></span><br><span class=\"line\">  <span class=\"comment\">#   directory: about/</span></span><br><span class=\"line\">  <span class=\"comment\">#   icon: fa-user</span></span><br><span class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">rss</span></span><br><span class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># About page </span></span><br><span class=\"line\"><span class=\"attr\">about:</span></span><br><span class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></span><br><span class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-1-添加about页\"><a href=\"#2-3-1-添加about页\" class=\"headerlink\" title=\"2.3.1 添加about页\"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page <span class=\"string\">'about'</span></span><br></pre></td></tr></table></figure>\n\n<p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># About page </span></span><br><span class=\"line\"><span class=\"attr\">about:</span></span><br><span class=\"line\"><span class=\"attr\">  photo_url:</span> <span class=\"comment\">## 头像的链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></span><br><span class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  weibo_name:</span> <span class=\"comment\">## 微博用户名 </span></span><br><span class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></span><br><span class=\"line\"><span class=\"attr\">  github_name:</span> <span class=\"comment\">## github用户名</span></span><br></pre></td></tr></table></figure>\n\n<p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p>\n<h5 id=\"2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br><span class=\"line\">$ npm install hexo-generator-sitemap --save</span><br><span class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>主题_config.yml</code>配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-feed</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-sitemap</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-baidu-sitemap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-添加本地搜索\"><a href=\"#2-4-添加本地搜索\" class=\"headerlink\" title=\"2.4 添加本地搜索\"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content</a>来创建JSON数据文件：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>根_config.yml</code>添加配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jsonContent:</span></span><br><span class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  posts:</span></span><br><span class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>最后在<code>主题_config.yml</code>添加配置：</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-修改站点图标\"><a href=\"#2-5-修改站点图标\" class=\"headerlink\" title=\"2.5 修改站点图标\"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico <strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为</strong> apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p>\n<h4 id=\"2-6-添加站点关键字\"><a href=\"#2-6-添加站点关键字\" class=\"headerlink\" title=\"2.6 添加站点关键字\"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：</p>\n<figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站简要描述,如：Charles·Zheng's</span> <span class=\"string\">blog.</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">网站关键字,</span> <span class=\"string\">key,</span> <span class=\"string\">key1,</span> <span class=\"string\">key2,</span> <span class=\"string\">key3</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Charles</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-首页添加文章置顶\"><a href=\"#2-7-首页添加文章置顶\" class=\"headerlink\" title=\"2.7 首页添加文章置顶\"></a>2.7 首页添加文章置顶</h4><p>在根目录下打开命令行窗口安装：</p>\n<figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-generator-index --save</span><br><span class=\"line\">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要置顶的文章的Front-matter中加上top: true即可。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: BlueLake博客主题的详细配置</span><br><span class=\"line\">tags: [hexo,BlueLake]</span><br><span class=\"line\">categories: hexo博客折腾</span><br><span class=\"line\">top: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-更换主题背景和添加文章版权信息\"><a href=\"#2-8-更换主题背景和添加文章版权信息\" class=\"headerlink\" title=\"2.8 更换主题背景和添加文章版权信息\"></a>2.8 更换主题背景和添加文章版权信息</h4><p>更换主题背景为深色</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Theme tone</span></span><br><span class=\"line\"><span class=\"attr\">dark:</span> <span class=\"literal\">true</span> <span class=\"comment\">#true/false</span></span><br></pre></td></tr></table></figure>\n\n<p>添加文章版权信息</p>\n<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Theme tone</span></span><br><span class=\"line\"><span class=\"comment\">#Copyright</span></span><br><span class=\"line\"><span class=\"attr\">copyright:</span> </span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">#true/false  </span></span><br><span class=\"line\"><span class=\"attr\">  describe:</span> <span class=\"string\">转载请注明出处(必须保留原文作者署名原文链接)</span> <span class=\"comment\">#自定义描述替换默认描述</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-9-其他配置\"><a href=\"#2-9-其他配置\" class=\"headerlink\" title=\"2.9 其他配置\"></a>2.9 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p>\n<ol>\n<li><code>show_category_count</code>——是否显示分类下的文章数。</li>\n<li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">show_category_count:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\"><span class=\"attr\">widgets_on_small_screens:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"3-集成第三方服务\"><a href=\"#3-集成第三方服务\" class=\"headerlink\" title=\"3.集成第三方服务\"></a>3.集成第三方服务</h3><h4 id=\"3-1-添加评论\"><a href=\"#3-1-添加评论\" class=\"headerlink\" title=\"3.1 添加评论\"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说评论</a>、<a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus评论</a>、<a href=\"https://livere.com\" target=\"_blank\" rel=\"noopener\">来必力评论</a>、<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言评论</a>、<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖评论</a>、<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"noopener\">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了。</p>\n<ol>\n<li>注册并获得代码。<ul>\n<li>若使用<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说评论</a>，注册多说后获得short_name。</li>\n<li>若使用<a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus评论</a>，注册Disqus后获得short_name。</li>\n<li>若使用<a href=\"https://livere.com\" target=\"_blank\" rel=\"noopener\">来必力评论</a>，注册来必力,获得data-uid。</li>\n<li>若使用<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言评论</a>，注册友言,获得uid。</li>\n<li>若使用<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li>\n<li>若使用<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"noopener\">畅言评论</a>，注册畅言，获得appid，appkey。</li>\n</ul>\n</li>\n<li>配置<code>主题_config.yml</code>：<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Cmments</span></span><br><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  duoshuo:</span> <span class=\"comment\">## duoshuo_shortname</span></span><br><span class=\"line\"><span class=\"attr\">  disqus:</span> <span class=\"comment\">## disqus_shortname</span></span><br><span class=\"line\"><span class=\"attr\">  livere:</span> <span class=\"comment\">## 来必力(data-uid)</span></span><br><span class=\"line\"><span class=\"attr\">  uyan:</span> <span class=\"comment\">## 友言(uid)</span></span><br><span class=\"line\"><span class=\"attr\">  cloudTie:</span> <span class=\"comment\">## 网易云跟帖(productKey)</span></span><br><span class=\"line\"><span class=\"attr\">  changyan:</span> <span class=\"comment\">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class=\"line\"><span class=\"attr\">    appid:</span> <span class=\"comment\">## 畅言(appid)</span></span><br><span class=\"line\"><span class=\"attr\">    appkey:</span> <span class=\"comment\">##畅言(appkey)</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"3-2-百度统计\"><a href=\"#3-2-百度统计\" class=\"headerlink\" title=\"3.2 百度统计\"></a>3.2 百度统计</h4><ol>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>，定位到站点的代码获取页面。</li>\n<li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li>\n<li>配置<code>主题_config.yml</code>:<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"number\">8006843039519956000</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p>\n</blockquote>\n<h4 id=\"3-3-卜算子阅读次数统计\"><a href=\"#3-3-卜算子阅读次数统计\" class=\"headerlink\" title=\"3.3 卜算子阅读次数统计\"></a>3.3 卜算子阅读次数统计</h4><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p>\n<h4 id=\"3-4-微博秀\"><a href=\"#3-4-微博秀\" class=\"headerlink\" title=\"3.4 微博秀\"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"noopener\">微博开放平台</a>获取您自己的微博秀代码来替换。</p>\n<ol>\n<li>登录<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"noopener\">微博开放平台</a>，选择微博秀。</li>\n<li>为了与主题风格统一，作如下配置<ul>\n<li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li>\n<li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li>\n<li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li>\n</ul>\n</li>\n<li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class=\"highlight stylus\"><figcaption><span>weibo.jade</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade\" target=\"_blank\" rel=\"noopener\">layout/_widget/weibo.jade</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line marked\">.widget</span><br><span class=\"line\">  .widget-title</span><br><span class=\"line\">    i(class=<span class=\"string\">'fa fa-weibo'</span>)= <span class=\"string\">' '</span> + __(<span class=\"string\">'新浪微博'</span>)</span><br><span class=\"line\">  iframe(<span class=\"attribute\">width</span>=<span class=\"string\">\"100%\"</span>,height=<span class=\"string\">\"400\"</span>,class=<span class=\"string\">\"share_self\"</span>,frameborder=<span class=\"string\">\"0\"</span>,scrolling=<span class=\"string\">\"no\"</span>,src=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1\"</span>)</span><br></pre></td></tr></table></figure>\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote>\n<p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p>\n</blockquote>\n</li>\n</ol>"},{"title":"MongoDB学习笔记","date":"2016-07-30T10:20:16.000Z","_content":"\n## part1 安装配置\n\n### 一、安装：\n\n在mongodb官网下载对应自己电脑系统的安装包，地址为： [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)。\n<!-- more --> \n1、以Windows64bit为例，下载.msi文件双击安装。\n2、安装过程中，点击 \"Custom(自定义)\" 按钮来设置安装目录(D:\\MongoDB\\bin)。\n3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。\n4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod --dbpath D:\\MongoDB\\data\\db)\n``` bash\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --dbpath D:\\MongoDB\\data\\db\n```\n5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)\n``` bash\n  MongoDB shell version: 3.2.4  //mongodb版本\n  connecting to: test  //默认shell连接的是本机localhost 上面的test库\n```\n此时就可以操作数据库了。\n\n### 二、将MongoDB服务器作为Windows服务运行\n\n1、在D:\\MongoDB目录下创建mongodb.config,写入如下：\n``` bash\n  ## 数据库文件目录\n  dbpath=D:/MongoDB/data\n  ## 日志目录\n  logpath=D:/MongoDB/log/mongo.log\n  diaglog=3\n```\n2、常规命令(cmd管理员):\n```\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --config D:\\MongoDB\\mongodb.config \n```\n3、若常规方式失败，则sc方式(cmd管理员)：\n```\n  D:\n  cd D:\\MongoDB\\bin\n  sc create mongodb binPath= \"D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config\" \n```\n访问地址：localhost:27017测试是否启动成功\n\n\n## part2 CRUD操作(Creat,Read,Update,Delete)\n\n### 一、基础：\n\n1、document(文档)\n\nMongoDB把所有数据存放在类似于JSON数据结构的文档内：\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.2\" }\n```\n\n2、collection(集合)\n\n集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.1\" }\n  { \"item\": \"pencil2\", \"qty\": 550, \"type\": \"no.2\" }\n  { \"item\": \"pencil3\", \"qty\": 800, \"type\": \"no.3\" }\n```\n\n3、database(数据库)\n\nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。\n\n### 二、数据库操作：\n\n连接及运行mongoDB\n\"`show dbs`\"命令可以显示所有的数据的列表\n\"`db`\"命令可以显示当前数据库对象或集合\n\"`use`\"命令可以连接到一个指定的数据库\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n  1.不能是空字符串（\"\")。\n  2.不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n  3.应全部小写。\n  4.最多64字节。\n\n1、创建数据库：`use Database_Name`\n``` bash\n  use test  ##创建名为test的数据库\n```\n2、删除当前数据库：\n``` bash\n  db.dropDatabase()\n```\n\n### 三、文档操作（以 Collection_Name = col 为例）\n\n#### 1、插入：\n``` bash\n  db.col.insert(Document)     ##插入一条或多组数据\n  db.col.insertOne(Document)  ##插入一条数据\n  db.col.insertMany(Document) ##插入多条数据\n  ##例如：\n      db.col.insertOne({ \"item\": \"pencil\", \"type\": \"no.1\" })\n      db.col.insertMany([\n      { \"item\": \"dog\", \"type\": \"no.2\" },\n      { \"item\": \"apple\", \"type\": \"no.3\" },\n      { \"item\": \"orange\", \"type\": \"no.4\" }\n      ])\n```\n\n#### 2、删除：\n``` bash\n  db.col.remove({})                    ##删除所有数据\n  db.col.remove(query <,options>)\n      #  query: 查询条件(数据索引或名字)\n      #  ptions:两个可选参数\n      #      {justOne: <boolean>,     //默认false，删除所有匹配到的。\n      #       writeConcern: <document>//抛出异常的级别。\n      #      }\n  db.col.deleteOne(query <,options>)   ##同上，无justOne参数，只删除第一条\n  db.col.deleteMany(query <,options>)  ##同上，无justOne参数，只删除多条\n```\n\n### 3、更新：\n``` bash\n  db.col.update(query, update <,options>)\n      #  query:  查询条件(数据索引或名字)\n      #  update: 更新的内容，语法：{$set:query}\n      #  options:三个可选参数\n      #      {upsert: <boolean>,      //如果不存在update的记录，是否插入新数据，默认:false。\n      #       multi: <boolean>,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。\n      #       writeConcern: <document>//#抛出异常的级别。\n      #      }\n  ##例如：\n      db.col.update(\n          {\"type\": \"no.1\"}, \n          {$set: {\"item\": \"human\"}}, \n          {upsert: true, multi: true}\n          )\n  db.col.updateOne()                    ##同上，无multi参数，只更新第一条\n  db.col.updateMany()                   ##同上，无multi参数\n  db.col.replaceOne()                   ##同updateOne\n  db.col.save(document <,writeConcern>) ##通过传入的文档整个替换\n```\n##### insert 与 save的区别\n如果插入的数据的_id相同,save将会更新该文档,而insert将会报错\n\n##### update常用操作符\n``` bash\n  $set         ##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.\n  $unset       ##删除文档中的一个字段.\n  $rename      ##重命名某个列\n  $inc         ##增长某个列\n  $setOnInsert ##当upsert为true时,并且发生了insert操作时,可以补充的字段\n  $push        ##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.\n  $pushAll     ##将多个数值一次存入数组.上面的push只能一个一个的存入\n  $addToSet    ##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.\n  $pop         ##删除数组最后一个元素\n  $pull        ##删除数组中的指定的元素,如果删除的字段不是数组,会报错\n  $pullAll     ##删除数组中的多个值,跟pushAll与push的关系类似.\n```\n\n### 4、查询\n``` bash\n  db.col.find({})          ##查询所有文档\n  db.col.find().pretty()   ##以易读的方式来读取数据\n  db.collection.find(query, projection)\n      #  query：查询条件(数据索引或名字)\n      #  projection：可选。指定返回的字段。\n```\n\n#### 4.1、深入查询表达式\n``` bash\n  db.col.find()##查询所有\n  db.col.find({filed: value})                              ##等值查询\n  db.col.find({filed: {$ne: value}})                       ##不等于 $ne\n  db.col.find({filed: {$nin: [value1, value2, ...]}})      ##不能包含给定的值 $nin\n  db.col.find({filed: {$all: [value1, value2, ...]}})      ##必须包含所有给定的值 $all\n  db.col.find({filed: {$in: [value1, value2, ...]}})       ##只要包含一个或多个给定的值 $in\n  db.col.find({filed: {$exists:1}})                        ##存在filed字段的\n  db.col.find({filed: {$exists:0}})                        ##不存在filed字段的\n  db.col.find({filed: {$mod:[3,1]}})                       ##模三余一，$mod(取模操作)\n  db.col.find({$or: [{filed1: vulue1}, {filed2: vulue2}]}) ##或 $or\n  db.col.find({$nor: [{filed1: vulue1}, {filed2: vulue2}]})##排除 $nor\n  db.col.find({filed: {$size: 3}})                         ##返回值得数组是给定的长度(3) $size\n  db.col.find({$where: function(){return ...}})            ##回调，隐式迭代，符合条件才返回\n  db.col.find({$where: '...'}})                            ##同上\n  db.col.find({age: {$lt: 5}}).limit(3)                    ##查询age的值小于5，限制3条\n      #范围查询：\n      #    $lt  （小于）\n      #    $gt  （大于）\n      #    $lte （小于等于）\n      #    $gte （大于等于）\n      #    limit（限制显示）\n  db.col.find().skip(2).limit(3)                           ##跳过前两个文档查询后面三个\n      #  skip(num):表示跳过前面num个文档\n  db.col.find().sort({age: 1})                             ##查询后以age升序排列显示\n      #  sort():排序，这里 1 代表升序, -1 代表降序.\n  db.col.find({filed: /user.*/i})                          ##正则，查询filed以user开头不区分大小写（正则效率低）\n  db.col.find({filed: {$type: 1}})                         ##查找filed为双精度的文档\n      # 根据数据类型查询 $type\n      #      |类型　　　　　　　　|编号|\n      #      |双精度　　　　　　　|1 　|\n      #      |字符串　　　　　　　|2 　|\n      #      |对象　　　　　　　　|3   |\n      #      |数组　　　　　　　　|4   |\n      #      |二进制数据　　　　　|5   |\n      #      |对象ID　　　　　　　|7   |\n      #      |布尔值　　　　　　　|8   |\n      #      |日期　　　　　　　　|9   |\n      #      |空　　　　　　　　　|10  |\n      #      |正则表达式　　　　　|11  |\n      #      |JavaScript　　　　|13  |\n      #      |符号　　　　　　　　|14  |\n      #      |JavaScript(带范围)|15  |\n      #      |32位整数　　　　　　|16  |\n      #      |时间戳　　　　　　　|17  |\n      #      |64位整数　　　　　　|18  |\n      #      |最小键　　　　　　　|255 |\n      #      |最大键　　　　　　　|127 |\n```\n\n#### 4.2、group分组查询\ngroup做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。\n``` bash\n  group({\n    key:{字段:1},\n    initial:{变量:初始值},\n    $reduce:function(doc,prev){函数代码}\n  })\n```\n其中key下的字段代表,需要按哪个字段分组.\ninitial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.\n$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.\n\n栗子：如下我们按年龄分组,同级不同年龄的用户的多少:\n``` bash\n  db.user.find()\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.group({\n      key:{age:1},\n      initial:{count:0},\n      $reduce:function(doc,prev){\n          prev.count++\n      }\n  }); \n      [\n          {\"age\": 0, \"count\": 1},\n          {\"age\": 1, \"count\": 3},\n          {\"age\": 2, \"count\": 2}\n      ]\n\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      }\n  });\n    [\n        {\"age\": 0, \"users\": [\"user0\"]},\n        {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n        {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n    ]\n```\n\n另外本函数还有两个可选参数 condition 和 finalize\ncondition就是分组的条件筛选类似mysql中的having\n``` bash\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      $reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      },\n      condition:{age:{$gt:0}}})\n　##筛选出age大于0的:\n  [\n      {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n      {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n  ]\n```\n\n#### 4.3、count统计\n``` bash\n  db.goods.count()            ##统计该集合总数\n  db.goods.count({cat_id: 3}) ##统计cat_id=3的总数\n```\n\n#### 4.4、distinct排重\n``` bash\n db.user.find()\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.distinct(\"age\") ## 特殊,传入的参数直接是字符串,而不是对象;\n      [0, 1, 2]\n```\n#### 4.5、子文档查询$elemMatch\n\nelemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。\n注意：\n(1)数组中元素是内嵌文档。\n(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。\n假设集合school有如下数据：\n``` bash\n{\n _id: 1,\n zipcode: 63109,\n students: [\n              { name: \"john\", school: 102, age: 10 },\n              { name: \"jess\", school: 102, age: 11 },\n              { name: \"jeff\", school: 108, age: 15 }\n           ]\n}\n{\n _id: 2,\n zipcode: 63110,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 3,\n zipcode: 63109,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 4,\n zipcode: 63109,\n students: [\n              { name: \"barney\", school: 102, age: 7 },\n           ]\n}\n```\n下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。\n``` bash\n  db.school.find({zipcode: 63109 },{ students: { $elemMatch: { school: 102 } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"john\", \"school\":102, \"age\":10}]}\n  {\"_id\": 3}\n  {\"_id\": 4, \"students\": [{\"name\":\"barney\", \"school\":102, \"age\":7}]}\n```\n查询结果说明：\n`_id为1的文档`，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。\n`_id为3的文档`，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含\"students\"字段。\n\n$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。\n``` bash\ndb.school.find( { zipcode: 63109 },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"jess\", \"school\":102, \"age\":11}]}\n  {\"_id\": 3}\n  {\"_id\": 4}\n```\n","source":"_posts/MongoDB学习笔记.md","raw":"---\ntitle: MongoDB学习笔记\ndate: 2016-07-30 18:20:16\ntags: mongodb\ncategories: 数据库\n---\n\n## part1 安装配置\n\n### 一、安装：\n\n在mongodb官网下载对应自己电脑系统的安装包，地址为： [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)。\n<!-- more --> \n1、以Windows64bit为例，下载.msi文件双击安装。\n2、安装过程中，点击 \"Custom(自定义)\" 按钮来设置安装目录(D:\\MongoDB\\bin)。\n3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。\n4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod --dbpath D:\\MongoDB\\data\\db)\n``` bash\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --dbpath D:\\MongoDB\\data\\db\n```\n5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)\n``` bash\n  MongoDB shell version: 3.2.4  //mongodb版本\n  connecting to: test  //默认shell连接的是本机localhost 上面的test库\n```\n此时就可以操作数据库了。\n\n### 二、将MongoDB服务器作为Windows服务运行\n\n1、在D:\\MongoDB目录下创建mongodb.config,写入如下：\n``` bash\n  ## 数据库文件目录\n  dbpath=D:/MongoDB/data\n  ## 日志目录\n  logpath=D:/MongoDB/log/mongo.log\n  diaglog=3\n```\n2、常规命令(cmd管理员):\n```\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --config D:\\MongoDB\\mongodb.config \n```\n3、若常规方式失败，则sc方式(cmd管理员)：\n```\n  D:\n  cd D:\\MongoDB\\bin\n  sc create mongodb binPath= \"D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config\" \n```\n访问地址：localhost:27017测试是否启动成功\n\n\n## part2 CRUD操作(Creat,Read,Update,Delete)\n\n### 一、基础：\n\n1、document(文档)\n\nMongoDB把所有数据存放在类似于JSON数据结构的文档内：\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.2\" }\n```\n\n2、collection(集合)\n\n集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.1\" }\n  { \"item\": \"pencil2\", \"qty\": 550, \"type\": \"no.2\" }\n  { \"item\": \"pencil3\", \"qty\": 800, \"type\": \"no.3\" }\n```\n\n3、database(数据库)\n\nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。\n\n### 二、数据库操作：\n\n连接及运行mongoDB\n\"`show dbs`\"命令可以显示所有的数据的列表\n\"`db`\"命令可以显示当前数据库对象或集合\n\"`use`\"命令可以连接到一个指定的数据库\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n  1.不能是空字符串（\"\")。\n  2.不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n  3.应全部小写。\n  4.最多64字节。\n\n1、创建数据库：`use Database_Name`\n``` bash\n  use test  ##创建名为test的数据库\n```\n2、删除当前数据库：\n``` bash\n  db.dropDatabase()\n```\n\n### 三、文档操作（以 Collection_Name = col 为例）\n\n#### 1、插入：\n``` bash\n  db.col.insert(Document)     ##插入一条或多组数据\n  db.col.insertOne(Document)  ##插入一条数据\n  db.col.insertMany(Document) ##插入多条数据\n  ##例如：\n      db.col.insertOne({ \"item\": \"pencil\", \"type\": \"no.1\" })\n      db.col.insertMany([\n      { \"item\": \"dog\", \"type\": \"no.2\" },\n      { \"item\": \"apple\", \"type\": \"no.3\" },\n      { \"item\": \"orange\", \"type\": \"no.4\" }\n      ])\n```\n\n#### 2、删除：\n``` bash\n  db.col.remove({})                    ##删除所有数据\n  db.col.remove(query <,options>)\n      #  query: 查询条件(数据索引或名字)\n      #  ptions:两个可选参数\n      #      {justOne: <boolean>,     //默认false，删除所有匹配到的。\n      #       writeConcern: <document>//抛出异常的级别。\n      #      }\n  db.col.deleteOne(query <,options>)   ##同上，无justOne参数，只删除第一条\n  db.col.deleteMany(query <,options>)  ##同上，无justOne参数，只删除多条\n```\n\n### 3、更新：\n``` bash\n  db.col.update(query, update <,options>)\n      #  query:  查询条件(数据索引或名字)\n      #  update: 更新的内容，语法：{$set:query}\n      #  options:三个可选参数\n      #      {upsert: <boolean>,      //如果不存在update的记录，是否插入新数据，默认:false。\n      #       multi: <boolean>,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。\n      #       writeConcern: <document>//#抛出异常的级别。\n      #      }\n  ##例如：\n      db.col.update(\n          {\"type\": \"no.1\"}, \n          {$set: {\"item\": \"human\"}}, \n          {upsert: true, multi: true}\n          )\n  db.col.updateOne()                    ##同上，无multi参数，只更新第一条\n  db.col.updateMany()                   ##同上，无multi参数\n  db.col.replaceOne()                   ##同updateOne\n  db.col.save(document <,writeConcern>) ##通过传入的文档整个替换\n```\n##### insert 与 save的区别\n如果插入的数据的_id相同,save将会更新该文档,而insert将会报错\n\n##### update常用操作符\n``` bash\n  $set         ##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.\n  $unset       ##删除文档中的一个字段.\n  $rename      ##重命名某个列\n  $inc         ##增长某个列\n  $setOnInsert ##当upsert为true时,并且发生了insert操作时,可以补充的字段\n  $push        ##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.\n  $pushAll     ##将多个数值一次存入数组.上面的push只能一个一个的存入\n  $addToSet    ##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.\n  $pop         ##删除数组最后一个元素\n  $pull        ##删除数组中的指定的元素,如果删除的字段不是数组,会报错\n  $pullAll     ##删除数组中的多个值,跟pushAll与push的关系类似.\n```\n\n### 4、查询\n``` bash\n  db.col.find({})          ##查询所有文档\n  db.col.find().pretty()   ##以易读的方式来读取数据\n  db.collection.find(query, projection)\n      #  query：查询条件(数据索引或名字)\n      #  projection：可选。指定返回的字段。\n```\n\n#### 4.1、深入查询表达式\n``` bash\n  db.col.find()##查询所有\n  db.col.find({filed: value})                              ##等值查询\n  db.col.find({filed: {$ne: value}})                       ##不等于 $ne\n  db.col.find({filed: {$nin: [value1, value2, ...]}})      ##不能包含给定的值 $nin\n  db.col.find({filed: {$all: [value1, value2, ...]}})      ##必须包含所有给定的值 $all\n  db.col.find({filed: {$in: [value1, value2, ...]}})       ##只要包含一个或多个给定的值 $in\n  db.col.find({filed: {$exists:1}})                        ##存在filed字段的\n  db.col.find({filed: {$exists:0}})                        ##不存在filed字段的\n  db.col.find({filed: {$mod:[3,1]}})                       ##模三余一，$mod(取模操作)\n  db.col.find({$or: [{filed1: vulue1}, {filed2: vulue2}]}) ##或 $or\n  db.col.find({$nor: [{filed1: vulue1}, {filed2: vulue2}]})##排除 $nor\n  db.col.find({filed: {$size: 3}})                         ##返回值得数组是给定的长度(3) $size\n  db.col.find({$where: function(){return ...}})            ##回调，隐式迭代，符合条件才返回\n  db.col.find({$where: '...'}})                            ##同上\n  db.col.find({age: {$lt: 5}}).limit(3)                    ##查询age的值小于5，限制3条\n      #范围查询：\n      #    $lt  （小于）\n      #    $gt  （大于）\n      #    $lte （小于等于）\n      #    $gte （大于等于）\n      #    limit（限制显示）\n  db.col.find().skip(2).limit(3)                           ##跳过前两个文档查询后面三个\n      #  skip(num):表示跳过前面num个文档\n  db.col.find().sort({age: 1})                             ##查询后以age升序排列显示\n      #  sort():排序，这里 1 代表升序, -1 代表降序.\n  db.col.find({filed: /user.*/i})                          ##正则，查询filed以user开头不区分大小写（正则效率低）\n  db.col.find({filed: {$type: 1}})                         ##查找filed为双精度的文档\n      # 根据数据类型查询 $type\n      #      |类型　　　　　　　　|编号|\n      #      |双精度　　　　　　　|1 　|\n      #      |字符串　　　　　　　|2 　|\n      #      |对象　　　　　　　　|3   |\n      #      |数组　　　　　　　　|4   |\n      #      |二进制数据　　　　　|5   |\n      #      |对象ID　　　　　　　|7   |\n      #      |布尔值　　　　　　　|8   |\n      #      |日期　　　　　　　　|9   |\n      #      |空　　　　　　　　　|10  |\n      #      |正则表达式　　　　　|11  |\n      #      |JavaScript　　　　|13  |\n      #      |符号　　　　　　　　|14  |\n      #      |JavaScript(带范围)|15  |\n      #      |32位整数　　　　　　|16  |\n      #      |时间戳　　　　　　　|17  |\n      #      |64位整数　　　　　　|18  |\n      #      |最小键　　　　　　　|255 |\n      #      |最大键　　　　　　　|127 |\n```\n\n#### 4.2、group分组查询\ngroup做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。\n``` bash\n  group({\n    key:{字段:1},\n    initial:{变量:初始值},\n    $reduce:function(doc,prev){函数代码}\n  })\n```\n其中key下的字段代表,需要按哪个字段分组.\ninitial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.\n$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.\n\n栗子：如下我们按年龄分组,同级不同年龄的用户的多少:\n``` bash\n  db.user.find()\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.group({\n      key:{age:1},\n      initial:{count:0},\n      $reduce:function(doc,prev){\n          prev.count++\n      }\n  }); \n      [\n          {\"age\": 0, \"count\": 1},\n          {\"age\": 1, \"count\": 3},\n          {\"age\": 2, \"count\": 2}\n      ]\n\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      }\n  });\n    [\n        {\"age\": 0, \"users\": [\"user0\"]},\n        {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n        {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n    ]\n```\n\n另外本函数还有两个可选参数 condition 和 finalize\ncondition就是分组的条件筛选类似mysql中的having\n``` bash\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      $reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      },\n      condition:{age:{$gt:0}}})\n　##筛选出age大于0的:\n  [\n      {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n      {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n  ]\n```\n\n#### 4.3、count统计\n``` bash\n  db.goods.count()            ##统计该集合总数\n  db.goods.count({cat_id: 3}) ##统计cat_id=3的总数\n```\n\n#### 4.4、distinct排重\n``` bash\n db.user.find()\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.distinct(\"age\") ## 特殊,传入的参数直接是字符串,而不是对象;\n      [0, 1, 2]\n```\n#### 4.5、子文档查询$elemMatch\n\nelemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。\n注意：\n(1)数组中元素是内嵌文档。\n(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。\n假设集合school有如下数据：\n``` bash\n{\n _id: 1,\n zipcode: 63109,\n students: [\n              { name: \"john\", school: 102, age: 10 },\n              { name: \"jess\", school: 102, age: 11 },\n              { name: \"jeff\", school: 108, age: 15 }\n           ]\n}\n{\n _id: 2,\n zipcode: 63110,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 3,\n zipcode: 63109,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 4,\n zipcode: 63109,\n students: [\n              { name: \"barney\", school: 102, age: 7 },\n           ]\n}\n```\n下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。\n``` bash\n  db.school.find({zipcode: 63109 },{ students: { $elemMatch: { school: 102 } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"john\", \"school\":102, \"age\":10}]}\n  {\"_id\": 3}\n  {\"_id\": 4, \"students\": [{\"name\":\"barney\", \"school\":102, \"age\":7}]}\n```\n查询结果说明：\n`_id为1的文档`，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。\n`_id为3的文档`，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含\"students\"字段。\n\n$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。\n``` bash\ndb.school.find( { zipcode: 63109 },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"jess\", \"school\":102, \"age\":11}]}\n  {\"_id\": 3}\n  {\"_id\": 4}\n```\n","slug":"MongoDB学习笔记","published":1,"updated":"2019-07-07T06:36:14.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop5h000yjst3sibo8srq","content":"<h2 id=\"part1-安装配置\"><a href=\"#part1-安装配置\" class=\"headerlink\" title=\"part1 安装配置\"></a>part1 安装配置</h2><h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><p>在mongodb官网下载对应自己电脑系统的安装包，地址为： <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/downloads</a>。</p>\n<a id=\"more\"></a> \n<p>1、以Windows64bit为例，下载.msi文件双击安装。<br>2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\\MongoDB\\bin)。<br>3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。<br>4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod –dbpath D:\\MongoDB\\data\\db)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\MongoDB\\bin</span><br><span class=\"line\">mongod --dbpath D:\\MongoDB\\data\\db</span><br></pre></td></tr></table></figure>\n\n<p>5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: 3.2.4  //mongodb版本</span><br><span class=\"line\">connecting to: <span class=\"built_in\">test</span>  //默认shell连接的是本机localhost 上面的<span class=\"built_in\">test</span>库</span><br></pre></td></tr></table></figure>\n\n<p>此时就可以操作数据库了。</p>\n<h3 id=\"二、将MongoDB服务器作为Windows服务运行\"><a href=\"#二、将MongoDB服务器作为Windows服务运行\" class=\"headerlink\" title=\"二、将MongoDB服务器作为Windows服务运行\"></a>二、将MongoDB服务器作为Windows服务运行</h3><p>1、在D:\\MongoDB目录下创建mongodb.config,写入如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 数据库文件目录</span></span><br><span class=\"line\">dbpath=D:/MongoDB/data</span><br><span class=\"line\"><span class=\"comment\">## 日志目录</span></span><br><span class=\"line\">logpath=D:/MongoDB/<span class=\"built_in\">log</span>/mongo.log</span><br><span class=\"line\">diaglog=3</span><br></pre></td></tr></table></figure>\n\n<p>2、常规命令(cmd管理员):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\">cd D:\\MongoDB\\bin</span><br><span class=\"line\">mongod --config D:\\MongoDB\\mongodb.config</span><br></pre></td></tr></table></figure>\n\n<p>3、若常规方式失败，则sc方式(cmd管理员)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\">cd D:\\MongoDB\\bin</span><br><span class=\"line\">sc create mongodb binPath= &quot;D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config&quot;</span><br></pre></td></tr></table></figure>\n\n<p>访问地址：localhost:27017测试是否启动成功</p>\n<h2 id=\"part2-CRUD操作-Creat-Read-Update-Delete\"><a href=\"#part2-CRUD操作-Creat-Read-Update-Delete\" class=\"headerlink\" title=\"part2 CRUD操作(Creat,Read,Update,Delete)\"></a>part2 CRUD操作(Creat,Read,Update,Delete)</h2><h3 id=\"一、基础：\"><a href=\"#一、基础：\" class=\"headerlink\" title=\"一、基础：\"></a>一、基础：</h3><p>1、document(文档)</p>\n<p>MongoDB把所有数据存放在类似于JSON数据结构的文档内：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、collection(集合)</p>\n<p>集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil2\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">550</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil3\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">800</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、database(数据库)</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。</p>\n<h3 id=\"二、数据库操作：\"><a href=\"#二、数据库操作：\" class=\"headerlink\" title=\"二、数据库操作：\"></a>二、数据库操作：</h3><p>连接及运行mongoDB<br>“<code>show dbs</code>“命令可以显示所有的数据的列表<br>“<code>db</code>“命令可以显示当前数据库对象或集合<br>“<code>use</code>“命令可以连接到一个指定的数据库<br>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。<br>  1.不能是空字符串（””)。<br>  2.不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。<br>  3.应全部小写。<br>  4.最多64字节。</p>\n<p>1、创建数据库：<code>use Database_Name</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use <span class=\"built_in\">test</span>  <span class=\"comment\">##创建名为test的数据库</span></span><br></pre></td></tr></table></figure>\n\n<p>2、删除当前数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、文档操作（以-Collection-Name-col-为例）\"><a href=\"#三、文档操作（以-Collection-Name-col-为例）\" class=\"headerlink\" title=\"三、文档操作（以 Collection_Name = col 为例）\"></a>三、文档操作（以 Collection_Name = col 为例）</h3><h4 id=\"1、插入：\"><a href=\"#1、插入：\" class=\"headerlink\" title=\"1、插入：\"></a>1、插入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.insert(Document)     <span class=\"comment\">##插入一条或多组数据</span></span><br><span class=\"line\">db.col.insertOne(Document)  <span class=\"comment\">##插入一条数据</span></span><br><span class=\"line\">db.col.insertMany(Document) <span class=\"comment\">##插入多条数据</span></span><br><span class=\"line\"><span class=\"comment\">##例如：</span></span><br><span class=\"line\">    db.col.insertOne(&#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;)</span><br><span class=\"line\">    db.col.insertMany([</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.4\"</span> &#125;</span><br><span class=\"line\">    ])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、删除：\"><a href=\"#2、删除：\" class=\"headerlink\" title=\"2、删除：\"></a>2、删除：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;&#125;)                    <span class=\"comment\">##删除所有数据</span></span><br><span class=\"line\">db.col.remove(query &lt;,options&gt;)</span><br><span class=\"line\">    <span class=\"comment\">#  query: 查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  ptions:两个可选参数</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#123;justOne: &lt;boolean&gt;,     //默认false，删除所有匹配到的。</span></span><br><span class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//抛出异常的级别。</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#125;</span></span><br><span class=\"line\">db.col.deleteOne(query &lt;,options&gt;)   <span class=\"comment\">##同上，无justOne参数，只删除第一条</span></span><br><span class=\"line\">db.col.deleteMany(query &lt;,options&gt;)  <span class=\"comment\">##同上，无justOne参数，只删除多条</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、更新：\"><a href=\"#3、更新：\" class=\"headerlink\" title=\"3、更新：\"></a>3、更新：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.update(query, update &lt;,options&gt;)</span><br><span class=\"line\">    <span class=\"comment\">#  query:  查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  update: 更新的内容，语法：&#123;$set:query&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#  options:三个可选参数</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#123;upsert: &lt;boolean&gt;,      //如果不存在update的记录，是否插入新数据，默认:false。</span></span><br><span class=\"line\">    <span class=\"comment\">#       multi: &lt;boolean&gt;,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。</span></span><br><span class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//#抛出异常的级别。</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">##例如：</span></span><br><span class=\"line\">    db.col.update(</span><br><span class=\"line\">        &#123;<span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span>&#125;, </span><br><span class=\"line\">        &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"item\"</span>: <span class=\"string\">\"human\"</span>&#125;&#125;, </span><br><span class=\"line\">        &#123;upsert: <span class=\"literal\">true</span>, multi: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">db.col.updateOne()                    <span class=\"comment\">##同上，无multi参数，只更新第一条</span></span><br><span class=\"line\">db.col.updateMany()                   <span class=\"comment\">##同上，无multi参数</span></span><br><span class=\"line\">db.col.replaceOne()                   <span class=\"comment\">##同updateOne</span></span><br><span class=\"line\">db.col.save(document &lt;,writeConcern&gt;) <span class=\"comment\">##通过传入的文档整个替换</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"insert-与-save的区别\"><a href=\"#insert-与-save的区别\" class=\"headerlink\" title=\"insert 与 save的区别\"></a>insert 与 save的区别</h5><p>如果插入的数据的_id相同,save将会更新该文档,而insert将会报错</p>\n<h5 id=\"update常用操作符\"><a href=\"#update常用操作符\" class=\"headerlink\" title=\"update常用操作符\"></a>update常用操作符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$set</span>         <span class=\"comment\">##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.</span></span><br><span class=\"line\"><span class=\"variable\">$unset</span>       <span class=\"comment\">##删除文档中的一个字段.</span></span><br><span class=\"line\"><span class=\"variable\">$rename</span>      <span class=\"comment\">##重命名某个列</span></span><br><span class=\"line\"><span class=\"variable\">$inc</span>         <span class=\"comment\">##增长某个列</span></span><br><span class=\"line\"><span class=\"variable\">$setOnInsert</span> <span class=\"comment\">##当upsert为true时,并且发生了insert操作时,可以补充的字段</span></span><br><span class=\"line\"><span class=\"variable\">$push</span>        <span class=\"comment\">##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.</span></span><br><span class=\"line\"><span class=\"variable\">$pushAll</span>     <span class=\"comment\">##将多个数值一次存入数组.上面的push只能一个一个的存入</span></span><br><span class=\"line\"><span class=\"variable\">$addToSet</span>    <span class=\"comment\">##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.</span></span><br><span class=\"line\"><span class=\"variable\">$pop</span>         <span class=\"comment\">##删除数组最后一个元素</span></span><br><span class=\"line\"><span class=\"variable\">$pull</span>        <span class=\"comment\">##删除数组中的指定的元素,如果删除的字段不是数组,会报错</span></span><br><span class=\"line\"><span class=\"variable\">$pullAll</span>     <span class=\"comment\">##删除数组中的多个值,跟pushAll与push的关系类似.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、查询\"><a href=\"#4、查询\" class=\"headerlink\" title=\"4、查询\"></a>4、查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&#125;)          <span class=\"comment\">##查询所有文档</span></span><br><span class=\"line\">db.col.find().pretty()   <span class=\"comment\">##以易读的方式来读取数据</span></span><br><span class=\"line\">db.collection.find(query, projection)</span><br><span class=\"line\">    <span class=\"comment\">#  query：查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  projection：可选。指定返回的字段。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1、深入查询表达式\"><a href=\"#4-1、深入查询表达式\" class=\"headerlink\" title=\"4.1、深入查询表达式\"></a>4.1、深入查询表达式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find()<span class=\"comment\">##查询所有</span></span><br><span class=\"line\">db.col.find(&#123;filed: value&#125;)                              <span class=\"comment\">##等值查询</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$ne</span>: value&#125;&#125;)                       <span class=\"comment\">##不等于 $ne</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$nin</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##不能包含给定的值 $nin</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$all</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##必须包含所有给定的值 $all</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$in</span>: [value1, value2, ...]&#125;&#125;)       <span class=\"comment\">##只要包含一个或多个给定的值 $in</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:1&#125;&#125;)                        <span class=\"comment\">##存在filed字段的</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:0&#125;&#125;)                        <span class=\"comment\">##不存在filed字段的</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$mod</span>:[3,1]&#125;&#125;)                       <span class=\"comment\">##模三余一，$mod(取模操作)</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$or</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) <span class=\"comment\">##或 $or</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$nor</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)<span class=\"comment\">##排除 $nor</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$size</span>: 3&#125;&#125;)                         <span class=\"comment\">##返回值得数组是给定的长度(3) $size</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> ...&#125;&#125;)            <span class=\"comment\">##回调，隐式迭代，符合条件才返回</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"string\">'...'</span>&#125;&#125;)                            <span class=\"comment\">##同上</span></span><br><span class=\"line\">db.col.find(&#123;age: &#123;<span class=\"variable\">$lt</span>: 5&#125;&#125;).<span class=\"built_in\">limit</span>(3)                    <span class=\"comment\">##查询age的值小于5，限制3条</span></span><br><span class=\"line\">    <span class=\"comment\">#范围查询：</span></span><br><span class=\"line\">    <span class=\"comment\">#    $lt  （小于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $gt  （大于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $lte （小于等于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $gte （大于等于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    limit（限制显示）</span></span><br><span class=\"line\">db.col.find().skip(2).<span class=\"built_in\">limit</span>(3)                           <span class=\"comment\">##跳过前两个文档查询后面三个</span></span><br><span class=\"line\">    <span class=\"comment\">#  skip(num):表示跳过前面num个文档</span></span><br><span class=\"line\">db.col.find().sort(&#123;age: 1&#125;)                             <span class=\"comment\">##查询后以age升序排列显示</span></span><br><span class=\"line\">    <span class=\"comment\">#  sort():排序，这里 1 代表升序, -1 代表降序.</span></span><br><span class=\"line\">db.col.find(&#123;filed: /user.*/i&#125;)                          <span class=\"comment\">##正则，查询filed以user开头不区分大小写（正则效率低）</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$type</span>: 1&#125;&#125;)                         <span class=\"comment\">##查找filed为双精度的文档</span></span><br><span class=\"line\">    <span class=\"comment\"># 根据数据类型查询 $type</span></span><br><span class=\"line\">    <span class=\"comment\">#      |类型　　　　　　　　|编号|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |双精度　　　　　　　|1 　|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |字符串　　　　　　　|2 　|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |对象　　　　　　　　|3   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |数组　　　　　　　　|4   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |二进制数据　　　　　|5   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |对象ID　　　　　　　|7   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |布尔值　　　　　　　|8   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |日期　　　　　　　　|9   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |空　　　　　　　　　|10  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |正则表达式　　　　　|11  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |JavaScript　　　　|13  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |符号　　　　　　　　|14  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |JavaScript(带范围)|15  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |32位整数　　　　　　|16  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |时间戳　　　　　　　|17  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |64位整数　　　　　　|18  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |最小键　　　　　　　|255 |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |最大键　　　　　　　|127 |</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2、group分组查询\"><a href=\"#4-2、group分组查询\" class=\"headerlink\" title=\"4.2、group分组查询\"></a>4.2、group分组查询</h4><p>group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group(&#123;</span><br><span class=\"line\">  key:&#123;字段:1&#125;,</span><br><span class=\"line\">  initial:&#123;变量:初始值&#125;,</span><br><span class=\"line\">  <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;函数代码&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中key下的字段代表,需要按哪个字段分组.<br>initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.<br>$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.</p>\n<p>栗子：如下我们按年龄分组,同级不同年龄的用户的多少:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;count:0&#125;,</span><br><span class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"count\"</span>: 1&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"count\"</span>: 3&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"count\"</span>: 2&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;users:[]&#125;,</span><br><span class=\"line\">    reduce:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.users.push(doc.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  [</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user0\"</span>]&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n\n<p>另外本函数还有两个可选参数 condition 和 finalize<br>condition就是分组的条件筛选类似mysql中的having</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;users:[]&#125;,</span><br><span class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.users.push(doc.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    condition:&#123;age:&#123;<span class=\"variable\">$gt</span>:0&#125;&#125;&#125;)</span><br><span class=\"line\">　<span class=\"comment\">##筛选出age大于0的:</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3、count统计\"><a href=\"#4-3、count统计\" class=\"headerlink\" title=\"4.3、count统计\"></a>4.3、count统计</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.goods.count()            <span class=\"comment\">##统计该集合总数</span></span><br><span class=\"line\">db.goods.count(&#123;cat_id: 3&#125;) <span class=\"comment\">##统计cat_id=3的总数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4、distinct排重\"><a href=\"#4-4、distinct排重\" class=\"headerlink\" title=\"4.4、distinct排重\"></a>4.4、distinct排重</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> db.user.distinct(<span class=\"string\">\"age\"</span>) <span class=\"comment\">## 特殊,传入的参数直接是字符串,而不是对象;</span></span><br><span class=\"line\">     [0, 1, 2]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5、子文档查询-elemMatch\"><a href=\"#4-5、子文档查询-elemMatch\" class=\"headerlink\" title=\"4.5、子文档查询$elemMatch\"></a>4.5、子文档查询$elemMatch</h4><p>elemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。<br>注意：<br>(1)数组中元素是内嵌文档。<br>(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。<br>假设集合school有如下数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 1,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"john\"</span>, school: 102, age: 10 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"jess\"</span>, school: 102, age: 11 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"jeff\"</span>, school: 108, age: 15 &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 2,</span><br><span class=\"line\"> zipcode: 63110,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 3,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 4,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"barney\"</span>, school: 102, age: 7 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102 &#125; &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"john\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:10&#125;]&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 3&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 4, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"barney\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:7&#125;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果说明：<br><code>_id为1的文档</code>，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。<br><code>_id为3的文档</code>，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。</p>\n<p>$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102, age: &#123; <span class=\"variable\">$gt</span>: 10&#125; &#125; &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"jess\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:11&#125;]&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 3&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 4&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"part1-安装配置\"><a href=\"#part1-安装配置\" class=\"headerlink\" title=\"part1 安装配置\"></a>part1 安装配置</h2><h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><p>在mongodb官网下载对应自己电脑系统的安装包，地址为： <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/downloads</a>。</p>","more":"<p>1、以Windows64bit为例，下载.msi文件双击安装。<br>2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\\MongoDB\\bin)。<br>3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。<br>4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod –dbpath D:\\MongoDB\\data\\db)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\MongoDB\\bin</span><br><span class=\"line\">mongod --dbpath D:\\MongoDB\\data\\db</span><br></pre></td></tr></table></figure>\n\n<p>5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version: 3.2.4  //mongodb版本</span><br><span class=\"line\">connecting to: <span class=\"built_in\">test</span>  //默认shell连接的是本机localhost 上面的<span class=\"built_in\">test</span>库</span><br></pre></td></tr></table></figure>\n\n<p>此时就可以操作数据库了。</p>\n<h3 id=\"二、将MongoDB服务器作为Windows服务运行\"><a href=\"#二、将MongoDB服务器作为Windows服务运行\" class=\"headerlink\" title=\"二、将MongoDB服务器作为Windows服务运行\"></a>二、将MongoDB服务器作为Windows服务运行</h3><p>1、在D:\\MongoDB目录下创建mongodb.config,写入如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 数据库文件目录</span></span><br><span class=\"line\">dbpath=D:/MongoDB/data</span><br><span class=\"line\"><span class=\"comment\">## 日志目录</span></span><br><span class=\"line\">logpath=D:/MongoDB/<span class=\"built_in\">log</span>/mongo.log</span><br><span class=\"line\">diaglog=3</span><br></pre></td></tr></table></figure>\n\n<p>2、常规命令(cmd管理员):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\">cd D:\\MongoDB\\bin</span><br><span class=\"line\">mongod --config D:\\MongoDB\\mongodb.config</span><br></pre></td></tr></table></figure>\n\n<p>3、若常规方式失败，则sc方式(cmd管理员)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:</span><br><span class=\"line\">cd D:\\MongoDB\\bin</span><br><span class=\"line\">sc create mongodb binPath= &quot;D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config&quot;</span><br></pre></td></tr></table></figure>\n\n<p>访问地址：localhost:27017测试是否启动成功</p>\n<h2 id=\"part2-CRUD操作-Creat-Read-Update-Delete\"><a href=\"#part2-CRUD操作-Creat-Read-Update-Delete\" class=\"headerlink\" title=\"part2 CRUD操作(Creat,Read,Update,Delete)\"></a>part2 CRUD操作(Creat,Read,Update,Delete)</h2><h3 id=\"一、基础：\"><a href=\"#一、基础：\" class=\"headerlink\" title=\"一、基础：\"></a>一、基础：</h3><p>1、document(文档)</p>\n<p>MongoDB把所有数据存放在类似于JSON数据结构的文档内：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、collection(集合)</p>\n<p>集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil2\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">550</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil3\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">800</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、database(数据库)</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。</p>\n<h3 id=\"二、数据库操作：\"><a href=\"#二、数据库操作：\" class=\"headerlink\" title=\"二、数据库操作：\"></a>二、数据库操作：</h3><p>连接及运行mongoDB<br>“<code>show dbs</code>“命令可以显示所有的数据的列表<br>“<code>db</code>“命令可以显示当前数据库对象或集合<br>“<code>use</code>“命令可以连接到一个指定的数据库<br>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。<br>  1.不能是空字符串（””)。<br>  2.不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。<br>  3.应全部小写。<br>  4.最多64字节。</p>\n<p>1、创建数据库：<code>use Database_Name</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use <span class=\"built_in\">test</span>  <span class=\"comment\">##创建名为test的数据库</span></span><br></pre></td></tr></table></figure>\n\n<p>2、删除当前数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、文档操作（以-Collection-Name-col-为例）\"><a href=\"#三、文档操作（以-Collection-Name-col-为例）\" class=\"headerlink\" title=\"三、文档操作（以 Collection_Name = col 为例）\"></a>三、文档操作（以 Collection_Name = col 为例）</h3><h4 id=\"1、插入：\"><a href=\"#1、插入：\" class=\"headerlink\" title=\"1、插入：\"></a>1、插入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.insert(Document)     <span class=\"comment\">##插入一条或多组数据</span></span><br><span class=\"line\">db.col.insertOne(Document)  <span class=\"comment\">##插入一条数据</span></span><br><span class=\"line\">db.col.insertMany(Document) <span class=\"comment\">##插入多条数据</span></span><br><span class=\"line\"><span class=\"comment\">##例如：</span></span><br><span class=\"line\">    db.col.insertOne(&#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;)</span><br><span class=\"line\">    db.col.insertMany([</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.4\"</span> &#125;</span><br><span class=\"line\">    ])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、删除：\"><a href=\"#2、删除：\" class=\"headerlink\" title=\"2、删除：\"></a>2、删除：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;&#125;)                    <span class=\"comment\">##删除所有数据</span></span><br><span class=\"line\">db.col.remove(query &lt;,options&gt;)</span><br><span class=\"line\">    <span class=\"comment\">#  query: 查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  ptions:两个可选参数</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#123;justOne: &lt;boolean&gt;,     //默认false，删除所有匹配到的。</span></span><br><span class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//抛出异常的级别。</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#125;</span></span><br><span class=\"line\">db.col.deleteOne(query &lt;,options&gt;)   <span class=\"comment\">##同上，无justOne参数，只删除第一条</span></span><br><span class=\"line\">db.col.deleteMany(query &lt;,options&gt;)  <span class=\"comment\">##同上，无justOne参数，只删除多条</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、更新：\"><a href=\"#3、更新：\" class=\"headerlink\" title=\"3、更新：\"></a>3、更新：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.update(query, update &lt;,options&gt;)</span><br><span class=\"line\">    <span class=\"comment\">#  query:  查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  update: 更新的内容，语法：&#123;$set:query&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#  options:三个可选参数</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#123;upsert: &lt;boolean&gt;,      //如果不存在update的记录，是否插入新数据，默认:false。</span></span><br><span class=\"line\">    <span class=\"comment\">#       multi: &lt;boolean&gt;,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。</span></span><br><span class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//#抛出异常的级别。</span></span><br><span class=\"line\">    <span class=\"comment\">#      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">##例如：</span></span><br><span class=\"line\">    db.col.update(</span><br><span class=\"line\">        &#123;<span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span>&#125;, </span><br><span class=\"line\">        &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"item\"</span>: <span class=\"string\">\"human\"</span>&#125;&#125;, </span><br><span class=\"line\">        &#123;upsert: <span class=\"literal\">true</span>, multi: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">db.col.updateOne()                    <span class=\"comment\">##同上，无multi参数，只更新第一条</span></span><br><span class=\"line\">db.col.updateMany()                   <span class=\"comment\">##同上，无multi参数</span></span><br><span class=\"line\">db.col.replaceOne()                   <span class=\"comment\">##同updateOne</span></span><br><span class=\"line\">db.col.save(document &lt;,writeConcern&gt;) <span class=\"comment\">##通过传入的文档整个替换</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"insert-与-save的区别\"><a href=\"#insert-与-save的区别\" class=\"headerlink\" title=\"insert 与 save的区别\"></a>insert 与 save的区别</h5><p>如果插入的数据的_id相同,save将会更新该文档,而insert将会报错</p>\n<h5 id=\"update常用操作符\"><a href=\"#update常用操作符\" class=\"headerlink\" title=\"update常用操作符\"></a>update常用操作符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$set</span>         <span class=\"comment\">##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.</span></span><br><span class=\"line\"><span class=\"variable\">$unset</span>       <span class=\"comment\">##删除文档中的一个字段.</span></span><br><span class=\"line\"><span class=\"variable\">$rename</span>      <span class=\"comment\">##重命名某个列</span></span><br><span class=\"line\"><span class=\"variable\">$inc</span>         <span class=\"comment\">##增长某个列</span></span><br><span class=\"line\"><span class=\"variable\">$setOnInsert</span> <span class=\"comment\">##当upsert为true时,并且发生了insert操作时,可以补充的字段</span></span><br><span class=\"line\"><span class=\"variable\">$push</span>        <span class=\"comment\">##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.</span></span><br><span class=\"line\"><span class=\"variable\">$pushAll</span>     <span class=\"comment\">##将多个数值一次存入数组.上面的push只能一个一个的存入</span></span><br><span class=\"line\"><span class=\"variable\">$addToSet</span>    <span class=\"comment\">##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.</span></span><br><span class=\"line\"><span class=\"variable\">$pop</span>         <span class=\"comment\">##删除数组最后一个元素</span></span><br><span class=\"line\"><span class=\"variable\">$pull</span>        <span class=\"comment\">##删除数组中的指定的元素,如果删除的字段不是数组,会报错</span></span><br><span class=\"line\"><span class=\"variable\">$pullAll</span>     <span class=\"comment\">##删除数组中的多个值,跟pushAll与push的关系类似.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、查询\"><a href=\"#4、查询\" class=\"headerlink\" title=\"4、查询\"></a>4、查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&#125;)          <span class=\"comment\">##查询所有文档</span></span><br><span class=\"line\">db.col.find().pretty()   <span class=\"comment\">##以易读的方式来读取数据</span></span><br><span class=\"line\">db.collection.find(query, projection)</span><br><span class=\"line\">    <span class=\"comment\">#  query：查询条件(数据索引或名字)</span></span><br><span class=\"line\">    <span class=\"comment\">#  projection：可选。指定返回的字段。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1、深入查询表达式\"><a href=\"#4-1、深入查询表达式\" class=\"headerlink\" title=\"4.1、深入查询表达式\"></a>4.1、深入查询表达式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find()<span class=\"comment\">##查询所有</span></span><br><span class=\"line\">db.col.find(&#123;filed: value&#125;)                              <span class=\"comment\">##等值查询</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$ne</span>: value&#125;&#125;)                       <span class=\"comment\">##不等于 $ne</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$nin</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##不能包含给定的值 $nin</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$all</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##必须包含所有给定的值 $all</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$in</span>: [value1, value2, ...]&#125;&#125;)       <span class=\"comment\">##只要包含一个或多个给定的值 $in</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:1&#125;&#125;)                        <span class=\"comment\">##存在filed字段的</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:0&#125;&#125;)                        <span class=\"comment\">##不存在filed字段的</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$mod</span>:[3,1]&#125;&#125;)                       <span class=\"comment\">##模三余一，$mod(取模操作)</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$or</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) <span class=\"comment\">##或 $or</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$nor</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)<span class=\"comment\">##排除 $nor</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$size</span>: 3&#125;&#125;)                         <span class=\"comment\">##返回值得数组是给定的长度(3) $size</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> ...&#125;&#125;)            <span class=\"comment\">##回调，隐式迭代，符合条件才返回</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"string\">'...'</span>&#125;&#125;)                            <span class=\"comment\">##同上</span></span><br><span class=\"line\">db.col.find(&#123;age: &#123;<span class=\"variable\">$lt</span>: 5&#125;&#125;).<span class=\"built_in\">limit</span>(3)                    <span class=\"comment\">##查询age的值小于5，限制3条</span></span><br><span class=\"line\">    <span class=\"comment\">#范围查询：</span></span><br><span class=\"line\">    <span class=\"comment\">#    $lt  （小于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $gt  （大于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $lte （小于等于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    $gte （大于等于）</span></span><br><span class=\"line\">    <span class=\"comment\">#    limit（限制显示）</span></span><br><span class=\"line\">db.col.find().skip(2).<span class=\"built_in\">limit</span>(3)                           <span class=\"comment\">##跳过前两个文档查询后面三个</span></span><br><span class=\"line\">    <span class=\"comment\">#  skip(num):表示跳过前面num个文档</span></span><br><span class=\"line\">db.col.find().sort(&#123;age: 1&#125;)                             <span class=\"comment\">##查询后以age升序排列显示</span></span><br><span class=\"line\">    <span class=\"comment\">#  sort():排序，这里 1 代表升序, -1 代表降序.</span></span><br><span class=\"line\">db.col.find(&#123;filed: /user.*/i&#125;)                          <span class=\"comment\">##正则，查询filed以user开头不区分大小写（正则效率低）</span></span><br><span class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$type</span>: 1&#125;&#125;)                         <span class=\"comment\">##查找filed为双精度的文档</span></span><br><span class=\"line\">    <span class=\"comment\"># 根据数据类型查询 $type</span></span><br><span class=\"line\">    <span class=\"comment\">#      |类型　　　　　　　　|编号|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |双精度　　　　　　　|1 　|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |字符串　　　　　　　|2 　|</span></span><br><span class=\"line\">    <span class=\"comment\">#      |对象　　　　　　　　|3   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |数组　　　　　　　　|4   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |二进制数据　　　　　|5   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |对象ID　　　　　　　|7   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |布尔值　　　　　　　|8   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |日期　　　　　　　　|9   |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |空　　　　　　　　　|10  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |正则表达式　　　　　|11  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |JavaScript　　　　|13  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |符号　　　　　　　　|14  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |JavaScript(带范围)|15  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |32位整数　　　　　　|16  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |时间戳　　　　　　　|17  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |64位整数　　　　　　|18  |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |最小键　　　　　　　|255 |</span></span><br><span class=\"line\">    <span class=\"comment\">#      |最大键　　　　　　　|127 |</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2、group分组查询\"><a href=\"#4-2、group分组查询\" class=\"headerlink\" title=\"4.2、group分组查询\"></a>4.2、group分组查询</h4><p>group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group(&#123;</span><br><span class=\"line\">  key:&#123;字段:1&#125;,</span><br><span class=\"line\">  initial:&#123;变量:初始值&#125;,</span><br><span class=\"line\">  <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;函数代码&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中key下的字段代表,需要按哪个字段分组.<br>initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.<br>$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.</p>\n<p>栗子：如下我们按年龄分组,同级不同年龄的用户的多少:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;count:0&#125;,</span><br><span class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"count\"</span>: 1&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"count\"</span>: 3&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"count\"</span>: 2&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;users:[]&#125;,</span><br><span class=\"line\">    reduce:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.users.push(doc.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  [</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user0\"</span>]&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n\n<p>另外本函数还有两个可选参数 condition 和 finalize<br>condition就是分组的条件筛选类似mysql中的having</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.group(&#123;</span><br><span class=\"line\">    key:&#123;age:1&#125;,</span><br><span class=\"line\">    initial:&#123;users:[]&#125;,</span><br><span class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</span><br><span class=\"line\">        prev.users.push(doc.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    condition:&#123;age:&#123;<span class=\"variable\">$gt</span>:0&#125;&#125;&#125;)</span><br><span class=\"line\">　<span class=\"comment\">##筛选出age大于0的:</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3、count统计\"><a href=\"#4-3、count统计\" class=\"headerlink\" title=\"4.3、count统计\"></a>4.3、count统计</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.goods.count()            <span class=\"comment\">##统计该集合总数</span></span><br><span class=\"line\">db.goods.count(&#123;cat_id: 3&#125;) <span class=\"comment\">##统计cat_id=3的总数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4、distinct排重\"><a href=\"#4-4、distinct排重\" class=\"headerlink\" title=\"4.4、distinct排重\"></a>4.4、distinct排重</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</span><br><span class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> db.user.distinct(<span class=\"string\">\"age\"</span>) <span class=\"comment\">## 特殊,传入的参数直接是字符串,而不是对象;</span></span><br><span class=\"line\">     [0, 1, 2]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5、子文档查询-elemMatch\"><a href=\"#4-5、子文档查询-elemMatch\" class=\"headerlink\" title=\"4.5、子文档查询$elemMatch\"></a>4.5、子文档查询$elemMatch</h4><p>elemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。<br>注意：<br>(1)数组中元素是内嵌文档。<br>(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。<br>假设集合school有如下数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 1,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"john\"</span>, school: 102, age: 10 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"jess\"</span>, school: 102, age: 11 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"jeff\"</span>, school: 108, age: 15 &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 2,</span><br><span class=\"line\"> zipcode: 63110,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 3,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> _id: 4,</span><br><span class=\"line\"> zipcode: 63109,</span><br><span class=\"line\"> students: [</span><br><span class=\"line\">              &#123; name: <span class=\"string\">\"barney\"</span>, school: 102, age: 7 &#125;,</span><br><span class=\"line\">           ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102 &#125; &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"john\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:10&#125;]&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 3&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 4, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"barney\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:7&#125;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果说明：<br><code>_id为1的文档</code>，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。<br><code>_id为3的文档</code>，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。</p>\n<p>$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102, age: &#123; <span class=\"variable\">$gt</span>: 10&#125; &#125; &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"jess\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:11&#125;]&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 3&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 4&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Win10下配置Nginx+PHP-7+MySQL-5.6","date":"2019-02-22T03:39:12.000Z","_content":"\n### 1. 软件下载\n  - Windows操作系统。\n  - Nginx，下载地址：[http://nginx.org/en/download.html](http://nginx.org/en/download.html)。\n  - PHP，下载地址：[http://php.net/downloads.php](http://php.net/downloads.php)（nginx下php是以FastCGI的方式运行，所以我们下载非线程安全也就是nts的php包）。\n  - MySQL，下载地址：[https://www.mysql.com/downloads/](https://www.mysql.com/downloads/)。（选择社区版`Community`->`MySQL Community Server`->`MySQL Community Server 5.6`，根据Windows系统选择对应zip包）。\n<!-- more -->\n### 2. 软件安装\n在C盘新建安装目录`C:\\PHP`。\n#### 2.1 Nginx安装\n  Nginx本身就是绿色软件，下载zip安装包解压到`C:\\PHP`，打开目录`C:\\PHP\\nginx-1.15.8`双击nginx.exe就可以运行，然后在浏览器打开[http://127.0.0.1](http://127.0.0.1)，出现欢迎界面表示NGINX正常工作。\n  确认NGINX正常工作后在任务管理器中结束nginx.exe任务。\n#### 2.2 PHP安装\n  把PHP的zip安装包解压到`C:\\PHP`，解压后PHP安装目录为：`C:\\PHP\\php-7.3.2`。\n  cmd进行到安装目录，输入php.exe -v,正常会显示版本信息。\n  将`C:\\PHP\\php-7.3.2`加入系统环境变量。\n#### 2.3 准备网站根目录\n  准备一个文件夹，作为网站的根目录，这个在下面的配置文件中会多次用到，我把`C:\\PHP\\web`作为我的网站根目录。\n  在根目录`C:\\PHP\\web`下新建一个info.php文件，输入如下内容：\n    ``` php\n    <?php\n        phpinfo();\n    ?>\n    ```\n#### 2.4 让nginx识别PHP\n  配置PHP (`C:\\PHP\\php-7.3.2`)\n  在PHP根目录下找到php.ini-development文件，编辑器打开nginx.conf:\n  在PHP根目录下修改配置文件`C:\\PHP\\php-7.3.2\\php.ini-development`并另存为`php.ini`,在其中修改或添加配置：\n  ```\n  cgi.fix_pathinfo=1\n  ```\n  配置nginx conf(`C:\\PHP\\nginx-1.15.8\\conf`)\n  在Nginx根目录下找到conf目录，编辑器打开`C:\\PHP\\nginx-1.15.8\\confnginx.conf`:\n    ```\n    error_log  logs/error.log; #打开error_log\n    http {\n\n        # ...\n\n        server {\n\n            # ...\n\n            location / {\n                root     C:\\PHP\\web; #配置根目录\n                index   index.html index.htm index.php;\n            }\n\n            # ...\n\n            # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n            # 打开下面几行注释\n            location ~ \\.php$ {\n                root             C:\\PHP\\web; #配置根目录\n                fastcgi_pass     127.0.0.1:9000;\n                fastcgi_index    index.php;\n                #重要: 把下面 /scripts 修改成 $document_root\n                fastcgi_param    SCRIPT_FILENAME  $document_root$fastcgi_script_name; \n                include          fastcgi_params;\n            }\n\n            # ...\n        }\n    }\n    ```\n#### 2.5 运行与测试\nnginx是一个反向代理的web服务器，因此它其实必须依赖一个真正的web服务器才能执行动态的网页内容，因此这里php就是使用fastcgi来充当这个真正的web服务器，它运行在9000端口上，这也是为什么`nginx.conf`中有这样一句`fastcgi_pass 127.0.0.1:9000;`。\n1. 在任务管理器中结束nginx.exe任务，然后到`C:\\PHP\\nginx-1.15.8`目录双击nginx.exe开启服务。\n2. 在命令行中，cd到php的home目录`C:\\PHP\\php-7.3.2`，然后执行如下命令：\n  ``` cmd\n  php-cgi.exe -b 127.0.0.1:9000 -c php.ini\n  ```\n3. 打开浏览器，输入 [http://127.0.0.1/info.php](http://127.0.0.1/info.php)，这时候可以看到phpinfo页面：页面内容包含了PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。\n\n#### 2.6 MySQL安装\n  把MySQL的zip安装包解压到`C:\\PHP`，解压后PHP安装目录为：`C:\\PHP\\mysql-5.6.43-winx64`。\n  将`C:\\PHP\\mysql-5.6.43-winx64\\bin`加入系统环境变量。\n  修改配置文件`C:\\PHP\\mysql-5.6.43-winx64\\my-default.ini`并另存为`my.ini`,在其中修改或添加配置 （my.ini文件的编码必须是英文编码（如windows中的ANSI），不能是UTF-8或GBK等）：\n    ```\n    basedir=C:\\PHP\\mysql-5.6.43-winx64       #mysql所在目录\n    datadir=C:\\PHP\\mysql-5.6.43-winx64\\data  #mysql所在目录\\data\n    ```\n  以管理员身份运行cmd,到安装目录的bin下，输入`mysqld -install`：\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin> mysqld -install\n    Service successfully installed.\n    ```\n  输入命令:`mysql --version`,正常会显示版本信息。\n  输入命令:`net start mysql`启动服务(停止命令：net stop mysql):\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>net start mysql\n    MySQL 服务正在启动 ..\n    MySQL 服务已经启动成功。\n    ```\n  服务启动成功之后，输入命令：`mysql -u root -p`（第一次登录没有密码，直接按回车过）:\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>mysql -u root -p\n    Enter password:\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\n    Your MySQL connection id is 1\n    Server version: 5.6.43 MySQL Community Server (GPL)\n    Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n    Oracle is a registered trademark of Oracle Corporation and/or its\n    affiliates. Other names may be trademarks of their respective\n    owners.\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n    mysql>\n    ```\n  如出现`mysql>`,即登录成功。\n  输入命令`exit`,退出登录。\n    ```\n    mysql> exit\n    Bye\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>\n    ```\n### 3. 制作自动启动脚本\n控制台就一直开着，很不方便。这个时候可以使用 [RunHiddenConsole.zip](https://link.jianshu.com?t=http://www.inbeijing.org/wp-content/uploads/2015/06/RunHiddenConsole.zip) 来得管理服务的启动与关闭。\n#### 3.1 启动脚本\n在目录`C:\\PHP`下新建一个`start.bat`作为启动脚本文件：\n``` bat\n:启动脚本\n@echo off\nset php_home=./php-7.3.2\nset nginx_home=./nginx-1.15.8\n\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\necho Starting PHP FastCGI...\nRunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.ini\necho FastCGI 启动成功\necho.\necho Starting nginx...\nRunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%\necho nginx 启动成功\necho.\n:echo 15秒后自动退出\n:ping 0.0.0.0  -n 15 > null\n:请按任意键继续. . .\npause\n```\n#### 3.2 停止脚本\n在目录`C:\\PHP`下新建一个`stop.bat`作为停止脚本文件：\n``` bat\n:停止脚本\n@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho nginx 已停止\n:换行\necho.\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\necho FastCGI 已停止\n:请按任意键继续. . .\npause\n```\n#### 3.3 重启脚本\n在目录`C:\\PHP`下新建一个`restart.bat`作为重启脚本文件：\n``` bat\n:停止脚本\n@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho nginx 已停止\n:换行\necho.\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\necho FastCGI 已停止\necho.\n\n:启动脚本\n@echo off\nset php_home=./php-7.3.2\nset nginx_home=./nginx-1.15.8\n\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\necho Starting PHP FastCGI...\nRunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.ini\necho FastCGI 启动成功\necho.\necho Starting nginx...\nRunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%\necho nginx 启动成功\necho.\n:echo 15秒后自动退出\n:ping 0.0.0.0  -n 15 > null\n:请按任意键继续. . .\npause\n```\n### 4.最后\n我的根目录结构\n``` cmd\nC:\\PHP>dir\n 驱动器 C 中的卷是 系统\n 卷的序列号是 09C1-B27D\n\n C:\\PHP 的目录\n\n2019/02/22  15:46    <DIR>          .\n2019/02/22  15:46    <DIR>          ..\n2019/02/22  11:23    <DIR>          mysql-5.6.43-winx64\n2018/12/25  17:54    <DIR>          nginx-1.15.8\n2019/02/21  15:59    <DIR>          php-7.3.2\n2019/02/22  15:41               758 restart.bat\n2010/10/26  11:43             1,536 RunHiddenConsole.exe\n2019/02/22  15:41               549 start.bat\n2019/02/22  15:41               227 stop.bat\n2019/02/21  16:56    <DIR>          web\n               4 个文件          3,070 字节\n               6 个目录 100,959,772,672 可用字节\n```\n","source":"_posts/Win10下配置Nginx-php7-mysql-5-6.md","raw":"---\nlayout: '[post]'\ntitle: Win10下配置Nginx+PHP-7+MySQL-5.6\ndate: 2019-02-22 11:39:12\ntags:\n---\n\n### 1. 软件下载\n  - Windows操作系统。\n  - Nginx，下载地址：[http://nginx.org/en/download.html](http://nginx.org/en/download.html)。\n  - PHP，下载地址：[http://php.net/downloads.php](http://php.net/downloads.php)（nginx下php是以FastCGI的方式运行，所以我们下载非线程安全也就是nts的php包）。\n  - MySQL，下载地址：[https://www.mysql.com/downloads/](https://www.mysql.com/downloads/)。（选择社区版`Community`->`MySQL Community Server`->`MySQL Community Server 5.6`，根据Windows系统选择对应zip包）。\n<!-- more -->\n### 2. 软件安装\n在C盘新建安装目录`C:\\PHP`。\n#### 2.1 Nginx安装\n  Nginx本身就是绿色软件，下载zip安装包解压到`C:\\PHP`，打开目录`C:\\PHP\\nginx-1.15.8`双击nginx.exe就可以运行，然后在浏览器打开[http://127.0.0.1](http://127.0.0.1)，出现欢迎界面表示NGINX正常工作。\n  确认NGINX正常工作后在任务管理器中结束nginx.exe任务。\n#### 2.2 PHP安装\n  把PHP的zip安装包解压到`C:\\PHP`，解压后PHP安装目录为：`C:\\PHP\\php-7.3.2`。\n  cmd进行到安装目录，输入php.exe -v,正常会显示版本信息。\n  将`C:\\PHP\\php-7.3.2`加入系统环境变量。\n#### 2.3 准备网站根目录\n  准备一个文件夹，作为网站的根目录，这个在下面的配置文件中会多次用到，我把`C:\\PHP\\web`作为我的网站根目录。\n  在根目录`C:\\PHP\\web`下新建一个info.php文件，输入如下内容：\n    ``` php\n    <?php\n        phpinfo();\n    ?>\n    ```\n#### 2.4 让nginx识别PHP\n  配置PHP (`C:\\PHP\\php-7.3.2`)\n  在PHP根目录下找到php.ini-development文件，编辑器打开nginx.conf:\n  在PHP根目录下修改配置文件`C:\\PHP\\php-7.3.2\\php.ini-development`并另存为`php.ini`,在其中修改或添加配置：\n  ```\n  cgi.fix_pathinfo=1\n  ```\n  配置nginx conf(`C:\\PHP\\nginx-1.15.8\\conf`)\n  在Nginx根目录下找到conf目录，编辑器打开`C:\\PHP\\nginx-1.15.8\\confnginx.conf`:\n    ```\n    error_log  logs/error.log; #打开error_log\n    http {\n\n        # ...\n\n        server {\n\n            # ...\n\n            location / {\n                root     C:\\PHP\\web; #配置根目录\n                index   index.html index.htm index.php;\n            }\n\n            # ...\n\n            # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n            # 打开下面几行注释\n            location ~ \\.php$ {\n                root             C:\\PHP\\web; #配置根目录\n                fastcgi_pass     127.0.0.1:9000;\n                fastcgi_index    index.php;\n                #重要: 把下面 /scripts 修改成 $document_root\n                fastcgi_param    SCRIPT_FILENAME  $document_root$fastcgi_script_name; \n                include          fastcgi_params;\n            }\n\n            # ...\n        }\n    }\n    ```\n#### 2.5 运行与测试\nnginx是一个反向代理的web服务器，因此它其实必须依赖一个真正的web服务器才能执行动态的网页内容，因此这里php就是使用fastcgi来充当这个真正的web服务器，它运行在9000端口上，这也是为什么`nginx.conf`中有这样一句`fastcgi_pass 127.0.0.1:9000;`。\n1. 在任务管理器中结束nginx.exe任务，然后到`C:\\PHP\\nginx-1.15.8`目录双击nginx.exe开启服务。\n2. 在命令行中，cd到php的home目录`C:\\PHP\\php-7.3.2`，然后执行如下命令：\n  ``` cmd\n  php-cgi.exe -b 127.0.0.1:9000 -c php.ini\n  ```\n3. 打开浏览器，输入 [http://127.0.0.1/info.php](http://127.0.0.1/info.php)，这时候可以看到phpinfo页面：页面内容包含了PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。\n\n#### 2.6 MySQL安装\n  把MySQL的zip安装包解压到`C:\\PHP`，解压后PHP安装目录为：`C:\\PHP\\mysql-5.6.43-winx64`。\n  将`C:\\PHP\\mysql-5.6.43-winx64\\bin`加入系统环境变量。\n  修改配置文件`C:\\PHP\\mysql-5.6.43-winx64\\my-default.ini`并另存为`my.ini`,在其中修改或添加配置 （my.ini文件的编码必须是英文编码（如windows中的ANSI），不能是UTF-8或GBK等）：\n    ```\n    basedir=C:\\PHP\\mysql-5.6.43-winx64       #mysql所在目录\n    datadir=C:\\PHP\\mysql-5.6.43-winx64\\data  #mysql所在目录\\data\n    ```\n  以管理员身份运行cmd,到安装目录的bin下，输入`mysqld -install`：\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin> mysqld -install\n    Service successfully installed.\n    ```\n  输入命令:`mysql --version`,正常会显示版本信息。\n  输入命令:`net start mysql`启动服务(停止命令：net stop mysql):\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>net start mysql\n    MySQL 服务正在启动 ..\n    MySQL 服务已经启动成功。\n    ```\n  服务启动成功之后，输入命令：`mysql -u root -p`（第一次登录没有密码，直接按回车过）:\n    ```\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>mysql -u root -p\n    Enter password:\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\n    Your MySQL connection id is 1\n    Server version: 5.6.43 MySQL Community Server (GPL)\n    Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n    Oracle is a registered trademark of Oracle Corporation and/or its\n    affiliates. Other names may be trademarks of their respective\n    owners.\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n    mysql>\n    ```\n  如出现`mysql>`,即登录成功。\n  输入命令`exit`,退出登录。\n    ```\n    mysql> exit\n    Bye\n    C:\\PHP\\mysql-5.6.43-winx64\\bin>\n    ```\n### 3. 制作自动启动脚本\n控制台就一直开着，很不方便。这个时候可以使用 [RunHiddenConsole.zip](https://link.jianshu.com?t=http://www.inbeijing.org/wp-content/uploads/2015/06/RunHiddenConsole.zip) 来得管理服务的启动与关闭。\n#### 3.1 启动脚本\n在目录`C:\\PHP`下新建一个`start.bat`作为启动脚本文件：\n``` bat\n:启动脚本\n@echo off\nset php_home=./php-7.3.2\nset nginx_home=./nginx-1.15.8\n\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\necho Starting PHP FastCGI...\nRunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.ini\necho FastCGI 启动成功\necho.\necho Starting nginx...\nRunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%\necho nginx 启动成功\necho.\n:echo 15秒后自动退出\n:ping 0.0.0.0  -n 15 > null\n:请按任意键继续. . .\npause\n```\n#### 3.2 停止脚本\n在目录`C:\\PHP`下新建一个`stop.bat`作为停止脚本文件：\n``` bat\n:停止脚本\n@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho nginx 已停止\n:换行\necho.\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\necho FastCGI 已停止\n:请按任意键继续. . .\npause\n```\n#### 3.3 重启脚本\n在目录`C:\\PHP`下新建一个`restart.bat`作为重启脚本文件：\n``` bat\n:停止脚本\n@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho nginx 已停止\n:换行\necho.\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\necho FastCGI 已停止\necho.\n\n:启动脚本\n@echo off\nset php_home=./php-7.3.2\nset nginx_home=./nginx-1.15.8\n\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\necho Starting PHP FastCGI...\nRunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.ini\necho FastCGI 启动成功\necho.\necho Starting nginx...\nRunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%\necho nginx 启动成功\necho.\n:echo 15秒后自动退出\n:ping 0.0.0.0  -n 15 > null\n:请按任意键继续. . .\npause\n```\n### 4.最后\n我的根目录结构\n``` cmd\nC:\\PHP>dir\n 驱动器 C 中的卷是 系统\n 卷的序列号是 09C1-B27D\n\n C:\\PHP 的目录\n\n2019/02/22  15:46    <DIR>          .\n2019/02/22  15:46    <DIR>          ..\n2019/02/22  11:23    <DIR>          mysql-5.6.43-winx64\n2018/12/25  17:54    <DIR>          nginx-1.15.8\n2019/02/21  15:59    <DIR>          php-7.3.2\n2019/02/22  15:41               758 restart.bat\n2010/10/26  11:43             1,536 RunHiddenConsole.exe\n2019/02/22  15:41               549 start.bat\n2019/02/22  15:41               227 stop.bat\n2019/02/21  16:56    <DIR>          web\n               4 个文件          3,070 字节\n               6 个目录 100,959,772,672 可用字节\n```\n","slug":"Win10下配置Nginx-php7-mysql-5-6","published":1,"updated":"2019-07-07T03:06:11.448Z","comments":1,"photos":[],"link":"","_id":"cjxsvop5l0010jst3k54d8j9r","content":"<h3 id=\"1-软件下载\"><a href=\"#1-软件下载\" class=\"headerlink\" title=\"1. 软件下载\"></a>1. 软件下载</h3><ul>\n<li>Windows操作系统。</li>\n<li>Nginx，下载地址：<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a>。</li>\n<li>PHP，下载地址：<a href=\"http://php.net/downloads.php\" target=\"_blank\" rel=\"noopener\">http://php.net/downloads.php</a>（nginx下php是以FastCGI的方式运行，所以我们下载非线程安全也就是nts的php包）。</li>\n<li>MySQL，下载地址：<a href=\"https://www.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.mysql.com/downloads/</a>。（选择社区版<code>Community</code>-&gt;<code>MySQL Community Server</code>-&gt;<code>MySQL Community Server 5.6</code>，根据Windows系统选择对应zip包）。<a id=\"more\"></a>\n<h3 id=\"2-软件安装\"><a href=\"#2-软件安装\" class=\"headerlink\" title=\"2. 软件安装\"></a>2. 软件安装</h3>在C盘新建安装目录<code>C:\\PHP</code>。<h4 id=\"2-1-Nginx安装\"><a href=\"#2-1-Nginx安装\" class=\"headerlink\" title=\"2.1 Nginx安装\"></a>2.1 Nginx安装</h4>Nginx本身就是绿色软件，下载zip安装包解压到<code>C:\\PHP</code>，打开目录<code>C:\\PHP\\nginx-1.15.8</code>双击nginx.exe就可以运行，然后在浏览器打开<a href=\"http://127.0.0.1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>，出现欢迎界面表示NGINX正常工作。<br>确认NGINX正常工作后在任务管理器中结束nginx.exe任务。<h4 id=\"2-2-PHP安装\"><a href=\"#2-2-PHP安装\" class=\"headerlink\" title=\"2.2 PHP安装\"></a>2.2 PHP安装</h4>把PHP的zip安装包解压到<code>C:\\PHP</code>，解压后PHP安装目录为：<code>C:\\PHP\\php-7.3.2</code>。<br>cmd进行到安装目录，输入php.exe -v,正常会显示版本信息。<br>将<code>C:\\PHP\\php-7.3.2</code>加入系统环境变量。<h4 id=\"2-3-准备网站根目录\"><a href=\"#2-3-准备网站根目录\" class=\"headerlink\" title=\"2.3 准备网站根目录\"></a>2.3 准备网站根目录</h4>准备一个文件夹，作为网站的根目录，这个在下面的配置文件中会多次用到，我把<code>C:\\PHP\\web</code>作为我的网站根目录。<br>在根目录<code>C:\\PHP\\web</code>下新建一个info.php文件，输入如下内容：<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"2-4-让nginx识别PHP\"><a href=\"#2-4-让nginx识别PHP\" class=\"headerlink\" title=\"2.4 让nginx识别PHP\"></a>2.4 让nginx识别PHP</h4><p>  配置PHP (<code>C:\\PHP\\php-7.3.2</code>)<br>  在PHP根目录下找到php.ini-development文件，编辑器打开nginx.conf:<br>  在PHP根目录下修改配置文件<code>C:\\PHP\\php-7.3.2\\php.ini-development</code>并另存为<code>php.ini</code>,在其中修改或添加配置：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgi.fix_pathinfo=1</span><br></pre></td></tr></table></figure></p>\n<p>  配置nginx conf(<code>C:\\PHP\\nginx-1.15.8\\conf</code>)<br>  在Nginx根目录下找到conf目录，编辑器打开<code>C:\\PHP\\nginx-1.15.8\\confnginx.conf</code>:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_log  logs/error.log; #打开error_log</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    # ...</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root     C:\\PHP\\web; #配置根目录</span><br><span class=\"line\">            index   index.html index.htm index.php;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        # 打开下面几行注释</span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">            root             C:\\PHP\\web; #配置根目录</span><br><span class=\"line\">            fastcgi_pass     127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index    index.php;</span><br><span class=\"line\">            #重要: 把下面 /scripts 修改成 $document_root</span><br><span class=\"line\">            fastcgi_param    SCRIPT_FILENAME  $document_root$fastcgi_script_name; </span><br><span class=\"line\">            include          fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-5-运行与测试\"><a href=\"#2-5-运行与测试\" class=\"headerlink\" title=\"2.5 运行与测试\"></a>2.5 运行与测试</h4><p>nginx是一个反向代理的web服务器，因此它其实必须依赖一个真正的web服务器才能执行动态的网页内容，因此这里php就是使用fastcgi来充当这个真正的web服务器，它运行在9000端口上，这也是为什么<code>nginx.conf</code>中有这样一句<code>fastcgi_pass 127.0.0.1:9000;</code>。</p>\n<ol>\n<li><p>在任务管理器中结束nginx.exe任务，然后到<code>C:\\PHP\\nginx-1.15.8</code>目录双击nginx.exe开启服务。</p>\n</li>\n<li><p>在命令行中，cd到php的home目录<code>C:\\PHP\\php-7.3.2</code>，然后执行如下命令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c php.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，输入 <a href=\"http://127.0.0.1/info.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/info.php</a>，这时候可以看到phpinfo页面：页面内容包含了PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。</p>\n</li>\n</ol>\n<h4 id=\"2-6-MySQL安装\"><a href=\"#2-6-MySQL安装\" class=\"headerlink\" title=\"2.6 MySQL安装\"></a>2.6 MySQL安装</h4><p>  把MySQL的zip安装包解压到<code>C:\\PHP</code>，解压后PHP安装目录为：<code>C:\\PHP\\mysql-5.6.43-winx64</code>。<br>  将<code>C:\\PHP\\mysql-5.6.43-winx64\\bin</code>加入系统环境变量。<br>  修改配置文件<code>C:\\PHP\\mysql-5.6.43-winx64\\my-default.ini</code>并另存为<code>my.ini</code>,在其中修改或添加配置 （my.ini文件的编码必须是英文编码（如windows中的ANSI），不能是UTF-8或GBK等）：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=C:\\PHP\\mysql-5.6.43-winx64       #mysql所在目录</span><br><span class=\"line\">datadir=C:\\PHP\\mysql-5.6.43-winx64\\data  #mysql所在目录\\data</span><br></pre></td></tr></table></figure></p>\n<p>  以管理员身份运行cmd,到安装目录的bin下，输入<code>mysqld -install</code>：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt; mysqld -install</span><br><span class=\"line\">Service successfully installed.</span><br></pre></td></tr></table></figure></p>\n<p>  输入命令:<code>mysql --version</code>,正常会显示版本信息。<br>  输入命令:<code>net start mysql</code>启动服务(停止命令：net stop mysql):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;net start mysql</span><br><span class=\"line\">MySQL 服务正在启动 ..</span><br><span class=\"line\">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure></p>\n<p>  服务启动成功之后，输入命令：<code>mysql -u root -p</code>（第一次登录没有密码，直接按回车过）:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 1</span><br><span class=\"line\">Server version: 5.6.43 MySQL Community Server (GPL)</span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  如出现<code>mysql&gt;</code>,即登录成功。<br>  输入命令<code>exit</code>,退出登录。<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; exit</span><br><span class=\"line\">Bye</span><br><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-制作自动启动脚本\"><a href=\"#3-制作自动启动脚本\" class=\"headerlink\" title=\"3. 制作自动启动脚本\"></a>3. 制作自动启动脚本</h3><p>控制台就一直开着，很不方便。这个时候可以使用 <a href=\"https://link.jianshu.com?t=http://www.inbeijing.org/wp-content/uploads/2015/06/RunHiddenConsole.zip\" target=\"_blank\" rel=\"noopener\">RunHiddenConsole.zip</a> 来得管理服务的启动与关闭。</p>\n<h4 id=\"3-1-启动脚本\"><a href=\"#3-1-启动脚本\" class=\"headerlink\" title=\"3.1 启动脚本\"></a>3.1 启动脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>start.bat</code>作为启动脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:启动脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> php_home=./php-<span class=\"number\">7</span>.<span class=\"number\">3</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nginx_home=./nginx-<span class=\"number\">1</span>.<span class=\"number\">15</span>.<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM Windows 下无效</span></span><br><span class=\"line\"><span class=\"comment\">REM set PHP_FCGI_CHILDREN=5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PHP_FCGI_MAX_REQUESTS=<span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting PHP FastCGI...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%php_home%</span>/php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c <span class=\"variable\">%php_home%</span>/php.ini</span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting nginx...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%nginx_home%</span>/nginx.exe -p <span class=\"variable\">%nginx_home%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:<span class=\"built_in\">echo</span> <span class=\"number\">15</span>秒后自动退出</span><br><span class=\"line\">:<span class=\"built_in\">ping</span> <span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>  -n <span class=\"number\">15</span> &gt; null</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-停止脚本\"><a href=\"#3-2-停止脚本\" class=\"headerlink\" title=\"3.2 停止脚本\"></a>3.2 停止脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>stop.bat</code>作为停止脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:停止脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping nginx...  </span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM nginx.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 已停止</span><br><span class=\"line\">:换行</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping PHP FastCGI...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM php-cgi.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 已停止</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-重启脚本\"><a href=\"#3-3-重启脚本\" class=\"headerlink\" title=\"3.3 重启脚本\"></a>3.3 重启脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>restart.bat</code>作为重启脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:停止脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping nginx...  </span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM nginx.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 已停止</span><br><span class=\"line\">:换行</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping PHP FastCGI...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM php-cgi.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 已停止</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">:启动脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> php_home=./php-<span class=\"number\">7</span>.<span class=\"number\">3</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nginx_home=./nginx-<span class=\"number\">1</span>.<span class=\"number\">15</span>.<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM Windows 下无效</span></span><br><span class=\"line\"><span class=\"comment\">REM set PHP_FCGI_CHILDREN=5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PHP_FCGI_MAX_REQUESTS=<span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting PHP FastCGI...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%php_home%</span>/php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c <span class=\"variable\">%php_home%</span>/php.ini</span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting nginx...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%nginx_home%</span>/nginx.exe -p <span class=\"variable\">%nginx_home%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:<span class=\"built_in\">echo</span> <span class=\"number\">15</span>秒后自动退出</span><br><span class=\"line\">:<span class=\"built_in\">ping</span> <span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>  -n <span class=\"number\">15</span> &gt; null</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4.最后\"></a>4.最后</h3><p>我的根目录结构</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">PHP</span>&gt;<span class=\"title\">dir</span></span></span><br><span class=\"line\"><span class=\"function\"> 驱动器 <span class=\"title\">C</span> 中的卷是 系统</span></span><br><span class=\"line\"><span class=\"function\"> 卷的序列号是 09<span class=\"title\">C1</span>-<span class=\"title\">B27D</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"title\">C</span>:\\<span class=\"title\">PHP</span> 的目录</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:46    &lt;<span class=\"title\">DIR</span>&gt;          .</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:46    &lt;<span class=\"title\">DIR</span>&gt;          ..</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  11:23    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">mysql</span>-5.6.43-<span class=\"title\">winx64</span></span></span><br><span class=\"line\"><span class=\"function\">2018/12/25  17:54    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">nginx</span>-1.15.8</span></span><br><span class=\"line\"><span class=\"function\">2019/02/21  15:59    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">php</span>-7.3.2</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               758 <span class=\"title\">restart.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2010/10/26  11:43             1,536 <span class=\"title\">RunHiddenConsole.exe</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               549 <span class=\"title\">start.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               227 <span class=\"title\">stop.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/21  16:56    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">web</span></span></span><br><span class=\"line\"><span class=\"function\">               4 个文件          3,070 字节</span></span><br><span class=\"line\"><span class=\"function\">               6 个目录 100,959,772,672 可用字节</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"1-软件下载\"><a href=\"#1-软件下载\" class=\"headerlink\" title=\"1. 软件下载\"></a>1. 软件下载</h3><ul>\n<li>Windows操作系统。</li>\n<li>Nginx，下载地址：<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a>。</li>\n<li>PHP，下载地址：<a href=\"http://php.net/downloads.php\" target=\"_blank\" rel=\"noopener\">http://php.net/downloads.php</a>（nginx下php是以FastCGI的方式运行，所以我们下载非线程安全也就是nts的php包）。</li>\n<li>MySQL，下载地址：<a href=\"https://www.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.mysql.com/downloads/</a>。（选择社区版<code>Community</code>-&gt;<code>MySQL Community Server</code>-&gt;<code>MySQL Community Server 5.6</code>，根据Windows系统选择对应zip包）。","more":"<h3 id=\"2-软件安装\"><a href=\"#2-软件安装\" class=\"headerlink\" title=\"2. 软件安装\"></a>2. 软件安装</h3>在C盘新建安装目录<code>C:\\PHP</code>。<h4 id=\"2-1-Nginx安装\"><a href=\"#2-1-Nginx安装\" class=\"headerlink\" title=\"2.1 Nginx安装\"></a>2.1 Nginx安装</h4>Nginx本身就是绿色软件，下载zip安装包解压到<code>C:\\PHP</code>，打开目录<code>C:\\PHP\\nginx-1.15.8</code>双击nginx.exe就可以运行，然后在浏览器打开<a href=\"http://127.0.0.1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>，出现欢迎界面表示NGINX正常工作。<br>确认NGINX正常工作后在任务管理器中结束nginx.exe任务。<h4 id=\"2-2-PHP安装\"><a href=\"#2-2-PHP安装\" class=\"headerlink\" title=\"2.2 PHP安装\"></a>2.2 PHP安装</h4>把PHP的zip安装包解压到<code>C:\\PHP</code>，解压后PHP安装目录为：<code>C:\\PHP\\php-7.3.2</code>。<br>cmd进行到安装目录，输入php.exe -v,正常会显示版本信息。<br>将<code>C:\\PHP\\php-7.3.2</code>加入系统环境变量。<h4 id=\"2-3-准备网站根目录\"><a href=\"#2-3-准备网站根目录\" class=\"headerlink\" title=\"2.3 准备网站根目录\"></a>2.3 准备网站根目录</h4>准备一个文件夹，作为网站的根目录，这个在下面的配置文件中会多次用到，我把<code>C:\\PHP\\web</code>作为我的网站根目录。<br>在根目录<code>C:\\PHP\\web</code>下新建一个info.php文件，输入如下内容：<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"2-4-让nginx识别PHP\"><a href=\"#2-4-让nginx识别PHP\" class=\"headerlink\" title=\"2.4 让nginx识别PHP\"></a>2.4 让nginx识别PHP</h4><p>  配置PHP (<code>C:\\PHP\\php-7.3.2</code>)<br>  在PHP根目录下找到php.ini-development文件，编辑器打开nginx.conf:<br>  在PHP根目录下修改配置文件<code>C:\\PHP\\php-7.3.2\\php.ini-development</code>并另存为<code>php.ini</code>,在其中修改或添加配置：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgi.fix_pathinfo=1</span><br></pre></td></tr></table></figure></p>\n<p>  配置nginx conf(<code>C:\\PHP\\nginx-1.15.8\\conf</code>)<br>  在Nginx根目录下找到conf目录，编辑器打开<code>C:\\PHP\\nginx-1.15.8\\confnginx.conf</code>:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_log  logs/error.log; #打开error_log</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    # ...</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root     C:\\PHP\\web; #配置根目录</span><br><span class=\"line\">            index   index.html index.htm index.php;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        # 打开下面几行注释</span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">            root             C:\\PHP\\web; #配置根目录</span><br><span class=\"line\">            fastcgi_pass     127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index    index.php;</span><br><span class=\"line\">            #重要: 把下面 /scripts 修改成 $document_root</span><br><span class=\"line\">            fastcgi_param    SCRIPT_FILENAME  $document_root$fastcgi_script_name; </span><br><span class=\"line\">            include          fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-5-运行与测试\"><a href=\"#2-5-运行与测试\" class=\"headerlink\" title=\"2.5 运行与测试\"></a>2.5 运行与测试</h4><p>nginx是一个反向代理的web服务器，因此它其实必须依赖一个真正的web服务器才能执行动态的网页内容，因此这里php就是使用fastcgi来充当这个真正的web服务器，它运行在9000端口上，这也是为什么<code>nginx.conf</code>中有这样一句<code>fastcgi_pass 127.0.0.1:9000;</code>。</p>\n<ol>\n<li><p>在任务管理器中结束nginx.exe任务，然后到<code>C:\\PHP\\nginx-1.15.8</code>目录双击nginx.exe开启服务。</p>\n</li>\n<li><p>在命令行中，cd到php的home目录<code>C:\\PHP\\php-7.3.2</code>，然后执行如下命令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c php.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，输入 <a href=\"http://127.0.0.1/info.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/info.php</a>，这时候可以看到phpinfo页面：页面内容包含了PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。</p>\n</li>\n</ol>\n<h4 id=\"2-6-MySQL安装\"><a href=\"#2-6-MySQL安装\" class=\"headerlink\" title=\"2.6 MySQL安装\"></a>2.6 MySQL安装</h4><p>  把MySQL的zip安装包解压到<code>C:\\PHP</code>，解压后PHP安装目录为：<code>C:\\PHP\\mysql-5.6.43-winx64</code>。<br>  将<code>C:\\PHP\\mysql-5.6.43-winx64\\bin</code>加入系统环境变量。<br>  修改配置文件<code>C:\\PHP\\mysql-5.6.43-winx64\\my-default.ini</code>并另存为<code>my.ini</code>,在其中修改或添加配置 （my.ini文件的编码必须是英文编码（如windows中的ANSI），不能是UTF-8或GBK等）：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basedir=C:\\PHP\\mysql-5.6.43-winx64       #mysql所在目录</span><br><span class=\"line\">datadir=C:\\PHP\\mysql-5.6.43-winx64\\data  #mysql所在目录\\data</span><br></pre></td></tr></table></figure></p>\n<p>  以管理员身份运行cmd,到安装目录的bin下，输入<code>mysqld -install</code>：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt; mysqld -install</span><br><span class=\"line\">Service successfully installed.</span><br></pre></td></tr></table></figure></p>\n<p>  输入命令:<code>mysql --version</code>,正常会显示版本信息。<br>  输入命令:<code>net start mysql</code>启动服务(停止命令：net stop mysql):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;net start mysql</span><br><span class=\"line\">MySQL 服务正在启动 ..</span><br><span class=\"line\">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure></p>\n<p>  服务启动成功之后，输入命令：<code>mysql -u root -p</code>（第一次登录没有密码，直接按回车过）:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 1</span><br><span class=\"line\">Server version: 5.6.43 MySQL Community Server (GPL)</span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  如出现<code>mysql&gt;</code>,即登录成功。<br>  输入命令<code>exit</code>,退出登录。<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; exit</span><br><span class=\"line\">Bye</span><br><span class=\"line\">C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-制作自动启动脚本\"><a href=\"#3-制作自动启动脚本\" class=\"headerlink\" title=\"3. 制作自动启动脚本\"></a>3. 制作自动启动脚本</h3><p>控制台就一直开着，很不方便。这个时候可以使用 <a href=\"https://link.jianshu.com?t=http://www.inbeijing.org/wp-content/uploads/2015/06/RunHiddenConsole.zip\" target=\"_blank\" rel=\"noopener\">RunHiddenConsole.zip</a> 来得管理服务的启动与关闭。</p>\n<h4 id=\"3-1-启动脚本\"><a href=\"#3-1-启动脚本\" class=\"headerlink\" title=\"3.1 启动脚本\"></a>3.1 启动脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>start.bat</code>作为启动脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:启动脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> php_home=./php-<span class=\"number\">7</span>.<span class=\"number\">3</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nginx_home=./nginx-<span class=\"number\">1</span>.<span class=\"number\">15</span>.<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM Windows 下无效</span></span><br><span class=\"line\"><span class=\"comment\">REM set PHP_FCGI_CHILDREN=5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PHP_FCGI_MAX_REQUESTS=<span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting PHP FastCGI...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%php_home%</span>/php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c <span class=\"variable\">%php_home%</span>/php.ini</span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting nginx...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%nginx_home%</span>/nginx.exe -p <span class=\"variable\">%nginx_home%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:<span class=\"built_in\">echo</span> <span class=\"number\">15</span>秒后自动退出</span><br><span class=\"line\">:<span class=\"built_in\">ping</span> <span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>  -n <span class=\"number\">15</span> &gt; null</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-停止脚本\"><a href=\"#3-2-停止脚本\" class=\"headerlink\" title=\"3.2 停止脚本\"></a>3.2 停止脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>stop.bat</code>作为停止脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:停止脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping nginx...  </span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM nginx.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 已停止</span><br><span class=\"line\">:换行</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping PHP FastCGI...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM php-cgi.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 已停止</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-重启脚本\"><a href=\"#3-3-重启脚本\" class=\"headerlink\" title=\"3.3 重启脚本\"></a>3.3 重启脚本</h4><p>在目录<code>C:\\PHP</code>下新建一个<code>restart.bat</code>作为重启脚本文件：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:停止脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping nginx...  </span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM nginx.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 已停止</span><br><span class=\"line\">:换行</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping PHP FastCGI...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /F /IM php-cgi.exe &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 已停止</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">:启动脚本</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">set</span> php_home=./php-<span class=\"number\">7</span>.<span class=\"number\">3</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nginx_home=./nginx-<span class=\"number\">1</span>.<span class=\"number\">15</span>.<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM Windows 下无效</span></span><br><span class=\"line\"><span class=\"comment\">REM set PHP_FCGI_CHILDREN=5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PHP_FCGI_MAX_REQUESTS=<span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting PHP FastCGI...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%php_home%</span>/php-cgi.exe -b <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9000</span> -c <span class=\"variable\">%php_home%</span>/php.ini</span><br><span class=\"line\"><span class=\"built_in\">echo</span> FastCGI 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting nginx...</span><br><span class=\"line\">RunHiddenConsole <span class=\"variable\">%nginx_home%</span>/nginx.exe -p <span class=\"variable\">%nginx_home%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> nginx 启动成功</span><br><span class=\"line\"><span class=\"built_in\">echo</span>.</span><br><span class=\"line\">:<span class=\"built_in\">echo</span> <span class=\"number\">15</span>秒后自动退出</span><br><span class=\"line\">:<span class=\"built_in\">ping</span> <span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>  -n <span class=\"number\">15</span> &gt; null</span><br><span class=\"line\">:请按任意键继续. . .</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4.最后\"></a>4.最后</h3><p>我的根目录结构</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">PHP</span>&gt;<span class=\"title\">dir</span></span></span><br><span class=\"line\"><span class=\"function\"> 驱动器 <span class=\"title\">C</span> 中的卷是 系统</span></span><br><span class=\"line\"><span class=\"function\"> 卷的序列号是 09<span class=\"title\">C1</span>-<span class=\"title\">B27D</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"title\">C</span>:\\<span class=\"title\">PHP</span> 的目录</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:46    &lt;<span class=\"title\">DIR</span>&gt;          .</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:46    &lt;<span class=\"title\">DIR</span>&gt;          ..</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  11:23    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">mysql</span>-5.6.43-<span class=\"title\">winx64</span></span></span><br><span class=\"line\"><span class=\"function\">2018/12/25  17:54    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">nginx</span>-1.15.8</span></span><br><span class=\"line\"><span class=\"function\">2019/02/21  15:59    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">php</span>-7.3.2</span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               758 <span class=\"title\">restart.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2010/10/26  11:43             1,536 <span class=\"title\">RunHiddenConsole.exe</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               549 <span class=\"title\">start.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/22  15:41               227 <span class=\"title\">stop.bat</span></span></span><br><span class=\"line\"><span class=\"function\">2019/02/21  16:56    &lt;<span class=\"title\">DIR</span>&gt;          <span class=\"title\">web</span></span></span><br><span class=\"line\"><span class=\"function\">               4 个文件          3,070 字节</span></span><br><span class=\"line\"><span class=\"function\">               6 个目录 100,959,772,672 可用字节</span></span><br></pre></td></tr></table></figure>"},{"title":"J2SE面向对象","date":"2019-07-07T10:50:47.000Z","describe":"J2SE面向对象","_content":"\n\n## 二、Java面向对象\n1. [类与对象](#id1)\n2. [构造方法和方法重载](#id2)\n3. [this关键字](#id3)\n4. [方法的传递和递归](#id4)\n5. [封装](#id5)\n6. [static关键字](#id6)\n7. [单例设计模式](#id7)\n8. [继承（extends）](#id8)\n9. [方法的重写（Override）](#id9)\n10. [访问控制](#id10)\n11. [包（Package）](#id11)\n12. [final关键字](#id12)\n13. [对象的创建过程](#id13)\n14. [多态](#id14)\n15. [抽象类](#id15)\n16. [接口](#id16)\n17. [内部类](#id17)\n18. [回调模式](#id18)\n19. [抽象方法的笔试考点](#id19)\n20. [枚举类（enum）](#id20)\n21. [内存机制问题](#id21)\n\n\n<span id=\"id1\"><span>\n### 1. 类与对象\n#### 1.1 类的定义\n``` java\nclass 类名 {类体}\n```\n\n> 类名由多个单词组成时，要求每个单词首字母大写\n\n#### 1.2 成员变量的定义\n``` java\nclass 类名 { 数据类型 成员变量名=初始值; ... }\n```\n\n> 成员变量名由多个单词组成时，要求第二个起每个单词首字母大写\n\n#### 1.3 对象的创建\n``` java\nnew 类名();\n```\n\n> 当一个类定义完毕后使用new关键字创建/构造该类的对象的过程叫做类的实例化。\n\n#### 1.4 引用\n``` java\n类名 引用变量名;\nPerson p = new Person(); //声明person类型的引用p指向Person类型对象\n```\n\n``` java\n引用变量名.成员变量名;\np.name = 'zhangsan';\n``` \n\n>- 在JAVA中，使用引用数据类型声明的变量叫做引用变量，简称‘引用’。\n>- 使用引用可以记录对象在堆区中存放的内存地址信息，便于下次访问。\n\n- 除八种基本类型之外，用类名（接口，数组）声明的变量称为引用类型变量，引用类型变量存的某个对象的地址信息，引用的功能在于访问对象。\n\n#### 1.5 成员方法\n``` java\nclass 类名 {\n\t返回值类型 成员方法名(形参列表){方法体;}\n}\n```\n\n- 返回值类型：可以是基本数据类型，也可以是引用，当方法不需要返回数据用void\n- 形参列表：数据类型 形参1, 数据类型 形参2, ...\n\n\n<span id=\"id2\"><span>\n### 2. 构造方法和方法重载\n#### 2.1 构造方法\n``` java\nclass 类名 { 构造方法名(形参列表){构造方法体;} }\n```\n\n- 构造方法名与类名相同且没有返回值\n- 当使用new关键字构造对象时，会自动调用构造方法，实现成员变量的初始化工作。\n\n#### 2.2 默认构造方法\n- 当一个类中没有没有自定义任何构造方法时，编译器会提供一个无参的空构造方法，叫做默认/缺省构造方法。\n- 若类中出现自定义构造方法，则编译器不再提供构造方法。\n\n#### 2.3 方法重载（overload）\n在Java中，方法名相同，参数列表不同的方法构成重载关系。\n\n- 体现形式：参数个数，参数顺序，参数类型。（与形参变量名和返回值无关，但最好返回值类型相同）\n- 实际意义：调用者只需要记住一个方法名就可以不同的版本，从而实现不同的效果。\n\n\n<span id=\"id3\"><span>\n### 3. this关键字\n在构造方法中出现this时,this代表当前正在构造的对象；在成员方法中出现this,this代表当前正在调用的对象。\n- 使用方式：\n\t1. 当形参变量和成员变量同名时，在方法体中优先使用形参变量，若希望使用成员变量，则需要加上this，即this.变量名\n\t2. 在构造方法的的第一行，可以调用本类中的其他构造方法。\n\n\n<span id=\"id4\"><span>\n### 4. 方法的传递和递归\n#### 4.1 传参\n- 基本数据类型变量作为参数传递时，型参数值改变不会影响实参变量的数值。\n- 引用类型变量作为参数传递时，形参指向内容的改变会影响实参变量指向的内容。\n- 引用数据类型变量作为参数传递时，形参改变指向后再改变指向内容不会影响实参指向的内容。\n\n#### 4.2 递归的调用\n- 递归是指方法体内部调用自身\n- 必须有递归的规律和退出条件\n- 使用递归必须使得问题简单化而不是复杂化\n- 若递归影响到程序的执行性能时，则用递推取代之\n\n\n<span id=\"id5\"><span>\n### 5. 封装\n面向对象的三大特征：封装，继承，多态。\n- 封装基本概念：封装就是对成员变量的数值进行密封包装处理以及合理性判断\n- 封装基本流程：\n\t1. 私有化成员变量(private)\n\t2. 提供公有的get、set方法，并在set方法体中进行合理性判断\n\t3. 在构方法中调用set方法进行合理值的判断\n\n\n<span id=\"id6\"><span>\n### 6. static关键字\n基本概念：通常情况下成员变量隶属于对象层级，也就是每创建一个对象就会申请一块独立的内存空间来存储就会造成内存空间的浪费。\n\n> 为了解决上诉问题，Java中使用static关键字修饰该成员变量表达静态的含义，此时成员变量提升到类层级，所有对象共享，随着类的加载准备就绪，与对象创建再无关。\n\n- static可以修饰：修饰属性 修饰方法 修饰块 修饰类(内部类)\n- 特点\n\t* 静态元素在类加载时就初始化，此时还没创建对象，可以通过类名直接访问\n\t* 静态元素存储在静态元素区，每个类有一个自己的区域，与别的类不冲突\n\t* 静态元素只加载一次，全部类对象及类本身共享\n\t* 静态元素区Carbage Collection无法管理，可以粗暴理解为常驻内存\n\t* 非静态成员和静态成员都可以访问静态成员\n\t* 静态成员不可以访问非静态成员\n\t* 静态元素中不可出现this或super关键字，静态元素属于类的\n\n\n<span id=\"id7\"><span>\n### 7. 单例设计模式\n基本概念：当一个类有且只能对外提供一个对象时，这样的类就叫作单例类，而设计单例类的思想和模式，叫做单例设计模式。\n\n``` java\n/**\n * 编程实现Singleton类的封装\n */\npublic class Singleton{\n\tprivate static Singleton sin = new Singleton();//2.提供本类的引用指向本类的对象\n\tprivate Singleton(){} //1.私有化构造方法\n\tpublic static Singleton getInstance(){//3.提供公有的get方法将上述成员变量的数值返回出去\n\t\treturn sin;\n\t}\n}\n```\n\n- 实现流程：\n\t1. 私有化构造方法（private）\n\t2. 提供本类类型的引用指向本类类型对象（private static）\n\t3. 提供公有的get方法将上述对象return出去（public static）\n\t4. 实现方式：饿汉式和懒汉式，开发中推荐饿汉式。\n\n\n<span id=\"id8\"><span>\n### 8. 继承（extends）\n- 继承就是子类复用父类的代码，关键字extends表示类和类的继承关系\n- 使用继承可以提高代码复用性、扩展性、以及可维护性。\n\t1. 子类不能继承父类的构造方法和私有方法，私有成员变量可以继承但不能直接使用。\n\t2. 无论使用何种方式构造方式构造子类的对象都会自动调用父类的无参构造方法来初始化从父类中继承下来的成员变量，相当于在构造方法的第一行增加super()的效果。\n\t3. 使用继承必须满足逻辑关系：子类 is a 父类，不能滥用继承。\n\t4. 在Java中只能支持单继承，也就是一个一个子类只能有一个父类，但一个父类可以有多个子类。\n\n``` java\nclass Cricle extends Shape{\n\tint r;\n\tCricle(){}   //编译器会加入无参的调用 super()。\n\tCricle(int x, int y, int r){\n\t\tsuper(x, y);  //通过super关键字调用父类的构造方法。\n\t\tsetR(r);\n\t}\n\tpublic void setR(int r){\n\t\tthis.r = r;\n\t}\n}\n```\n\n\n<span id=\"id9\"><span>\n### 9. 方法的重写（Override）\n概念：从父类继承下来的方法不满足子类的需求时，就需要子类中重新写一个和父类一样的方法，覆盖从父类中继承下来的版本，该方法就叫方法的重写。\n<br>原则：\n1. 要求方法名相同，参数列表相同，返回值类型相同；jdk1.5开始返回子类类型。\n2. 要求访问权限不能变小，可以相同或变大\n3. 重写的方法不能抛出更大的异常\n\n\n<span id=\"id10\"><span>\n### 10. 访问控制\n- public修饰的内容可以在任意位置使用，private修饰的内容只能在本类中使用，\n- 通常情况下，成员变量都使用private修饰，成员方法都使用pubic修饰\n\n| 访问控制符 | 访问权限\t| 本类内部\t| 本类中的包 | 子类\t| 其他包 |\n| ---------\t|:---------:| ------:\t|-------:\t|-----:\t|------:|\n| public\t| 共有的\t\t| Y\t\t\t| Y\t\t\t| Y\t\t| Y\t\t|\n| protected\t| 保护的\t\t| Y\t\t\t| Y\t\t\t| Y\t\t| N\t\t|\n| 不写\t\t| 默认的\t\t| Y\t\t\t| Y\t\t\t| N\t\t| N\t\t|\n| private\t| 私有的\t\t| Y\t\t\t| N\t\t\t| N\t\t| N\t\t|\n\n\n<span id=\"id11\"><span>\n### 11. 包（Package）\n为了解决命名冲突问题，便于文件的管理\n\n``` java\npackage 包名；\npackage 包名1.包名2.包名3...包名n;\n/* 指定包名时应按照一定的规范，eg: 公司域名反写.项目名称.模块名称.类名 */\norg.apache.commons.lang.StringUtil;\n```\n\n\n<span id=\"id12\"><span>\n### 12. final关键字\n1. final关键字修饰**类**体现该类**不能被继承**（防止滥用继承）。\n2. final关键字修饰**方法**体现在该方法**不能被重新，但可以被继承**（防止不经意间造成的方法重写）。\n3. final关键字修饰**成员变量**体现在改成员变量**必须初始化且不能更改**（防止不经意间造成的数据更改）。\n\n> 扩展：在开发中很少单独使用static或者final单独修饰成员变量，而是使用**`public static final`**共同修饰成员变量来表达常量的含义，而常量的命名规范是：所有字母大写，不同单词之间下划线连接。\n\n\n<span id=\"id13\"><span>\n### 13. 对象的创建过程\n- 单个对象的创建过程\n\t1. main方法是程序的入口，若创建对象时没有指定初始值则采用默认初始化方式处理；\n\t2. 若声明成员变量时进行了显示初始化操作，则最终采用显示初始化的初始值处理；\n\t3. 执行构造块中的代码可以对成员变量进行赋值；\n\t4. 执行构造方法体中的代码可以对成员变量进行再次赋值；\n\t5. 此时对象构造完毕，继续向下执行后续的代码；\n- 子类对象的创建过程\n\t1. main方法是程序的入口，先加载父类的的代码再加载子类的代码；\n\t2. 先执行父类静态代码块，再执行子类的静态代码块；\n\t3. 先执行父类的构造块，再执行父类的构造方法体，此时包含的父类对象构造完毕；\n\t4. 先执行子类的构造块，再执行子类的构造方法体，此时子类对象构造完毕，继续向下执行后续代码。\n\n\n<span id=\"id14\"><span>\n### 14. 多态\n1. 语法：父类的引用指向子类的对象\n\n``` java\n父类类型 引用变量名 = new 子类类型();\nPerson pw = new Worker();\npw.show();//再编译阶段调用Person的show()方法，在运行阶段调用Worker的show()方法。\n```\n\n2. 多态的效果：\n\t1. 父类的引用**可以**直接调用**父类独有**的方法。\n\t2. 父类的引用**不可以**直接调用**子类独有**的方法。\n\t3. 对于父类子类都有的**非静态方法**来说，编译阶段调用父类的，运行阶段调用子类重写后的。\n\t4. 对于父类子类都有的**静态方法**来说，只调用父类的。\n3. 多态的实际意义：屏蔽不同子类的差异性实现通用的编程，从而带来不同的结果。\n4. 多态的表现形式\n\t1. 多态的前提要有继承的关系\n\t2. 使用父类引用指向子类对象 Person p = new Teacher();//向上转型\n\t3. 该引用只能调用父类中定义的属性/方法\n\t4. 执行结果，如果调用属性:执行父类的，如果调用方法:看子类是否重写\n\t5. 若想要调用子类独有的成员，将身份还原回去(向下转型/造型)，若需要转换的类型与真实对象类型不匹配，会产生一个运行时异常ClassCastException\n5. 引用数据类型之间的转换\n\t- 转换必须发生在父子类之间，否则编译报错。\n\t- 自动类型转换：小到大，子类型向父类型的转换，eg:`Person pw = new Worker();`。\n\t- 强制类型转换：大到小，父类型向子类型转换，eg:`((Worker) pw).getSalary();//将父类引用强制转换子类型调用子类方法`。\n6. 为了避免类型转换异常，对象进行强制类型转换时应该用instanceof判断引用变量真正指向的对象是否是要转换的目标类型。\n\n``` java\n/*语法格式：*/ 对象 instanceof 类型  //返回布尔值\nif(pw instanceof Teacher){\n\tTeacher t = (Teacher) pw;\n}else{\n\tSystem.out.println(\"转换会有异常\");\n}\n```\n\n7. 多态的使用场合：\n\n``` java\n// 通过方法的参数传递形成多态。\npublic static void draw(Shape s){}\nTestShape.draw(new Rect(1,2,3,4));\n\n// 在方法体中直接使用多态的语法格式。\nTestAbstrat ta = new SubTestAbstract();\nta.show();\n```\n\n\n<span id=\"id15\"><span>\n### 15. 抽象类\n1. 基本概念\n\t- 用**abstract**关键字修饰的类称为抽象类。\n\t- 抽象类不能实例化，抽象类的意义在于被继承。\n\t- 抽象类为其子类“抽象”出了公共部分，通常也定义了子类所必须具体实现的抽象方法。\n\t- 抽象方法：指不能具体实现的方法，没有方法体并使用abstract修饰。\n\n``` java\npublic abstract class Shape{ //一个类若定义了抽象方法，则必须以abstract关键字声明为抽象类\n\tprivate int x;\n\tprivate int y;\n\tpublic abstract boolean contains(int x, int y);//用abstract修饰的方法，称之为抽象方法，没有方法体\n}\n```\n\n2. 注意：\n\t1. 抽象类中可以有成员变量，成员方法，以及构造方法。\n\t2. 抽象类中可以没有抽象方法，也可以有抽象方法。\n\t3. 具有抽象方法的类必须是抽象类，因此其真正意义的抽象类应该是有抽象方法，并且使用abstract修饰。\n\t4. 子类必须实现抽象方法（不同子类可能有不同实现），否则改子类也变抽象。\n\t5. 抽象类对子类具有强制性和规范性，因此叫做模板设计模式。\n\t6. 推荐使用多态的语法格式实现抽象类，若需要更换子类时，该方法中只需要将new关键字后面的类型名称修改而其他位置无需改变就可以立即生效，从而提高了代码的维护性和扩展性。\n\n> 多态实现抽象类的缺点：若希望调用子类独有的方法时，则需要强制类型转换。\n\n\n<span id=\"id16\"><span>\n### 16. 接口\n1. 基本概念：接口可以看成是特殊的抽象类。即只包含抽象方法的抽象类。通过**interface**关键字定义。\n\n``` java\ninterface Runner { //-通过interface关键字定义接口\n\tpublic static final int SEF_SPEED=100;//-接口中不能定义成员变量，只能定义常量\n\tpublic void run();//-接口中只可以定义没有实现的方法（可以省略public abstract）\n}\n```\n\n2. 一个类可以通过**implements**关键字实现接口，一个类可以实现多个接口，并且该类需要实现这些接口中定义的所有方法。\n\n``` java\nclass American implements Runner,... { //与继承不同，可以实现多个接口\n\t@Override\n\tpublic void run(){//该类需要实现接口中定义的所有方法\n\t\tSystem.out.println(\"run...\");\n\t}\n\tpublic static void main(String[] args) {\n\t\tRunner ra = new American();//接口作为一种类型声明，并且声明的变量可以引用实现类的对象\n\t\tra.run();//通过该变量可以调用该接口定义的方法\n\t}\n}\n```\n\n3. 一个接口可以通过extends关键字继承另一个接口，子接口继承了父接口所有的方法。\n\n``` java\ninterface Hunter extends Runner{...}\n```\n\n4. 类与接口的关系\n\t- 类和类使用`extends`继承，仅支持**单继承**。\n\t- 接口和接口使用`extends`继承，支持多继承。\n\t- 类使用`implements`实现接口，支持**多实现**。\n5. 抽象类与接口的关系（笔试题）\n\t1. 定义抽象类:`abstract class`，而定义接口:`interface`；\n\t2. 类继承抽象类:`extends`单继承，而类实现接口:`implements`多实现；\n\t3. 抽象类可以`有`构造方法，而接口`不能有`构造方法；\n\t4. 抽象类可以有`成员变量`，而接口只能有`常量`；\n\t5. 抽象类可以有`成员方法`，而接口只能有`抽象方法`；\n\t6. 抽象类中增加方法子类可以`不用重写`，而接口中增加方法子类`必须重写`；\n\t7. 从jdk1.8开始允许接口中有非抽象方法，但需要`default`关键字修饰。\n\n\n<span id=\"id17\"><span>\n### 17. 内部类\n- 内部类指的是在Java中可以将一个类定义在另一个类定义在另一个类的内部\n- 内部类定义在 类的内部 ，与类成员层次一致\n- 内部类定义在 方法/块内部（与类成员相差一个层次，方法的局部变量一个层次）\n\t* 成员内部类：将一个类直接定义在类的里面，作为成员，与属性或方法层次一致\n\t* 局部内部类：将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次\n\t* 匿名内部类：成员匿名内部类，局部匿名内部类\n\t* 静态内部类：成员静态内部类\n\n#### 17.1 *成员内部类\n- 将一个类直接定义在类的里面，作为成员，与属性或方法层次一致\n- 成员内部类可以与正常类一样 使用不同的修饰符来修饰\n- 好处1.省略了一个.java文件  好处2.成员内部类中可以访问外部类的所有成员 包括私有的\n- 若想要在内部类中通过对象.调用外部类成员   外部类.this.外部类成员;\n- 内部类存在后 源代码进行编译 产生一个字节码  Demo$InnerDemo.class\n\n#### 17.2 局部内部类\n- 将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次\n- 局部内部类像是一个局部的变量一样，不能用public protected private及static\n- 只能用abstract或final\n- 局部内部类命名规则Demo$1InnerTestMethod   Demo$2InnerTestMethod\n- 局部内部类使用的变量只能是final修饰\n\n#### 17.3 *匿名内部类\n将类直接定义在类中 或者类成员中     成员匿名内部类   局部匿名内部类\n<br>匿名内部类没有类的所有结构(名字 修饰符) 只有类体\n<br>通常会在抽象类或接口创建的后面使用，当然具体的类也可以有匿名子类\n<br>匿名类内部没有构造方法，也不能用任何修饰符来修饰\n\n- 当接口类型的引用作为方法的形参时，实参的传递方式有两种：\n\t1. 自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递。\n\t2. 直接使用匿名内部类的语法格式得到接口类型的引用，再作为实参传递。\n\n``` java\npublic interface A {\n\tpublic abstract void show();\n}\n//-方式1：自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递\npublic class SubA implements A {\n\t@Override\n\tpublic void show() {\n\t\tSystem.out.println(\"这里自定义类实现接口并重写抽象方法！\");\n\t}\n}\n//测试类\npublic class ATest {\n\tpublic static void test(A a) {\n\t\ta.show();\n\t}\n\tpublic static void main(String[] args) {\n\t\t//ATest.test(new A());//报错，A是接口，不能new对象\n\t\t//-方式1：接口实现类的对象作为实参传递\n\t\tATest.test(new ASub());//接口类型引用指向实现类的对象，形成了多态。\n\t\t\n\t\t//-方式2：匿名内部类\n\t\t// 接口/父类类型 引用变量名 = new 接口/父类类型() {方法的重写};\n\t\tA ta = new A() {\n\t\t\t@Override\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"这里是匿名内部类\");\n\t\t\t}\n\t\t};\n\t\tATest.test(ta);//得到接口类型的引用，再作为实参传递\n\t}\n}\n```\n\n- 匿名内部类定义：如果在一段程序需要创建一个类的对象（通常这个类需要实现某个接口或继承某个类），而且对象创建后这个类的价值就不存在了，这个类不必命名，称之为匿名内部类。\n- 语法格式：`接口/父类类型 引用变量名 = new 接口/父类类型() {匿名类类体，这里重写方法};`。\n\n``` java\nSuperType obj = new SuperType(...){ ... };\n```\n\n\n#### 17.4 静态内部类\n- 成员静态内部类\n- 不需要外部类对象，通过正常的方式直接创建内部类\n- 静态元素不能访问非静态成员(自己类和外部类)\n\n\n<span id=\"id18\"><span>\n### 18. 回调模式\n回调模式是指：如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递一个实现此接口的对象；而该方法在运行时会调用到参数对象中所实现的方法\n\n``` java\ninterface Action{\n\tpublic void doSth();\n}\n//repeat方法需要一个Action接口类型参数，让其doSth方法重复执行n次\npublic static void repeat(int n, Action ac){\n\tfor(int i=0; i<n; i++){ ac.doSth();}\n}\n//此处的语义可解释为：通过接口回调传递了一个方法给repeat,让repeat将其执行5次。\npublic static void main(String[] args){\n\trepeat(5, new Action(){//通过匿名内部类传递参数\n\t\tpublic void doSth(){\n\t\t\tSystem.out.println(\"Hello\")\n\t\t}\n\t});\n}\n```\n\n\n<span id=\"id19\"><span>\n### 19. 抽象方法的笔试考点\n- `abstract`与哪些关键字不能共存：\n\t1. `final`关键字；因为final关键字修饰的类不能被继承，方法不能被重写，而abstract关键字修饰的类继承后，该类的方法需要重写，相互冲突。\n\t2. `static`关键字；因为static能被实例化可直接调用，而abstract不能被实例化，相互冲突。\n\t3. `private`关键字；因为private修饰的私有方法不能被继承，就不能重写，而`abstract`方法需要重写。\n\n\n<span id=\"id20\"><span>\n### 20. 枚举类（enum）\n- 一个类中的对象 认为个数是有限且固定的 可以将每一个对象一一列举出来\n- 创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum<E extends Enum<E>>，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。\n- 我们自己定义的每一个enum类型 都会默认继承Enum 间接继承Object\n- Enum类型，有两个属性\n\t* name----->枚举对象的名字，name()获取name属性\n\t* ordinal--->枚举对象在类中罗列的顺序  类似index  也从0开始   ordinal()获取序号\n- 一些常用的方法\n\t* valueOf()   通过给定的name获取对应的枚举对象\n\t* values()     获取全部的枚举对象  ---> 返回一个数组  Day[]\n\t* compareTo()   可以比较两个枚举对象   int\n\t* toString()\t  由于这个方法没有final修饰  可以覆盖(重写)\n- switch内部判断枚举的应用\n- 我们也可以在enum中描述自己的一些属性或方法\n\t* 必须在enum类中第一行 描述一下枚举的样子 最后需要分号结束;\n\t* 可以定义自己的属性\n\t* 类创建的过程中  帮我们创建枚举类型的对象\n\t* 需要给枚举类型提供对应样子的构造方法  构造方法只能private修饰  可以重载\n\n``` java\npublic enum Day{\n    //描述了七个当前类的对象\n    monday(\"星期一\",1),tuesday(\"星期二\",2),wednesday,thursday,friday,saturday,sunday;\n\n    private String name;\n    private int index;\n\t\n    private Day(){}\n    private Day(String  name,int index){\n        this.name=name;\n        this.index=index;\n    }\n\t\n    public String getName(){\n        return this.name;\n    }\n    public void setName(String name){\n        this.name=name;\n    }\n}\n```\n\n\n<span id=\"id21\"><span>\n### 21. 内存机制问题\n- 类创建在哪儿   对象创建在哪里   继承关系   静态成员   方法执行\n- 栈内存--->Person p = new Person();---->堆内存    方法区---类模板\n\t* 栈内存----变量空间,方法临时执行空间（从创建开始执行完毕,**立即回收**）\n\t* 堆内存----new申请对象空间（**垃圾回收器GC**,对象空间没有任何引用指向视为垃圾）\n\t* 方法区----常量  类模板  静态成员（有且只有一份,**不回收**）\n- Runtime类(是单例模式)之中提供了几个管理内存的方法\n\t* maxMemory\n\t* totalMemory\n\t* freeMemory\n\t* 栈内存溢出错误StackOverflowError \n\t* 堆内存溢出错误OutOfMemoryError\n- Object类中有一个finalize方法  如果重写也能看见对象回收的效果\n- GC系统提供的一个线程    回收算法\n\n\n[回到顶部😼](#)","source":"_posts/J2SE面向对象.md","raw":"---\ntitle: J2SE面向对象\ndate: 2019-07-07 18:50:47\ntags: [javaSE, 后端开发]\ncategories: javaSE知识梳理\ndescribe: J2SE面向对象\n---\n\n\n## 二、Java面向对象\n1. [类与对象](#id1)\n2. [构造方法和方法重载](#id2)\n3. [this关键字](#id3)\n4. [方法的传递和递归](#id4)\n5. [封装](#id5)\n6. [static关键字](#id6)\n7. [单例设计模式](#id7)\n8. [继承（extends）](#id8)\n9. [方法的重写（Override）](#id9)\n10. [访问控制](#id10)\n11. [包（Package）](#id11)\n12. [final关键字](#id12)\n13. [对象的创建过程](#id13)\n14. [多态](#id14)\n15. [抽象类](#id15)\n16. [接口](#id16)\n17. [内部类](#id17)\n18. [回调模式](#id18)\n19. [抽象方法的笔试考点](#id19)\n20. [枚举类（enum）](#id20)\n21. [内存机制问题](#id21)\n\n\n<span id=\"id1\"><span>\n### 1. 类与对象\n#### 1.1 类的定义\n``` java\nclass 类名 {类体}\n```\n\n> 类名由多个单词组成时，要求每个单词首字母大写\n\n#### 1.2 成员变量的定义\n``` java\nclass 类名 { 数据类型 成员变量名=初始值; ... }\n```\n\n> 成员变量名由多个单词组成时，要求第二个起每个单词首字母大写\n\n#### 1.3 对象的创建\n``` java\nnew 类名();\n```\n\n> 当一个类定义完毕后使用new关键字创建/构造该类的对象的过程叫做类的实例化。\n\n#### 1.4 引用\n``` java\n类名 引用变量名;\nPerson p = new Person(); //声明person类型的引用p指向Person类型对象\n```\n\n``` java\n引用变量名.成员变量名;\np.name = 'zhangsan';\n``` \n\n>- 在JAVA中，使用引用数据类型声明的变量叫做引用变量，简称‘引用’。\n>- 使用引用可以记录对象在堆区中存放的内存地址信息，便于下次访问。\n\n- 除八种基本类型之外，用类名（接口，数组）声明的变量称为引用类型变量，引用类型变量存的某个对象的地址信息，引用的功能在于访问对象。\n\n#### 1.5 成员方法\n``` java\nclass 类名 {\n\t返回值类型 成员方法名(形参列表){方法体;}\n}\n```\n\n- 返回值类型：可以是基本数据类型，也可以是引用，当方法不需要返回数据用void\n- 形参列表：数据类型 形参1, 数据类型 形参2, ...\n\n\n<span id=\"id2\"><span>\n### 2. 构造方法和方法重载\n#### 2.1 构造方法\n``` java\nclass 类名 { 构造方法名(形参列表){构造方法体;} }\n```\n\n- 构造方法名与类名相同且没有返回值\n- 当使用new关键字构造对象时，会自动调用构造方法，实现成员变量的初始化工作。\n\n#### 2.2 默认构造方法\n- 当一个类中没有没有自定义任何构造方法时，编译器会提供一个无参的空构造方法，叫做默认/缺省构造方法。\n- 若类中出现自定义构造方法，则编译器不再提供构造方法。\n\n#### 2.3 方法重载（overload）\n在Java中，方法名相同，参数列表不同的方法构成重载关系。\n\n- 体现形式：参数个数，参数顺序，参数类型。（与形参变量名和返回值无关，但最好返回值类型相同）\n- 实际意义：调用者只需要记住一个方法名就可以不同的版本，从而实现不同的效果。\n\n\n<span id=\"id3\"><span>\n### 3. this关键字\n在构造方法中出现this时,this代表当前正在构造的对象；在成员方法中出现this,this代表当前正在调用的对象。\n- 使用方式：\n\t1. 当形参变量和成员变量同名时，在方法体中优先使用形参变量，若希望使用成员变量，则需要加上this，即this.变量名\n\t2. 在构造方法的的第一行，可以调用本类中的其他构造方法。\n\n\n<span id=\"id4\"><span>\n### 4. 方法的传递和递归\n#### 4.1 传参\n- 基本数据类型变量作为参数传递时，型参数值改变不会影响实参变量的数值。\n- 引用类型变量作为参数传递时，形参指向内容的改变会影响实参变量指向的内容。\n- 引用数据类型变量作为参数传递时，形参改变指向后再改变指向内容不会影响实参指向的内容。\n\n#### 4.2 递归的调用\n- 递归是指方法体内部调用自身\n- 必须有递归的规律和退出条件\n- 使用递归必须使得问题简单化而不是复杂化\n- 若递归影响到程序的执行性能时，则用递推取代之\n\n\n<span id=\"id5\"><span>\n### 5. 封装\n面向对象的三大特征：封装，继承，多态。\n- 封装基本概念：封装就是对成员变量的数值进行密封包装处理以及合理性判断\n- 封装基本流程：\n\t1. 私有化成员变量(private)\n\t2. 提供公有的get、set方法，并在set方法体中进行合理性判断\n\t3. 在构方法中调用set方法进行合理值的判断\n\n\n<span id=\"id6\"><span>\n### 6. static关键字\n基本概念：通常情况下成员变量隶属于对象层级，也就是每创建一个对象就会申请一块独立的内存空间来存储就会造成内存空间的浪费。\n\n> 为了解决上诉问题，Java中使用static关键字修饰该成员变量表达静态的含义，此时成员变量提升到类层级，所有对象共享，随着类的加载准备就绪，与对象创建再无关。\n\n- static可以修饰：修饰属性 修饰方法 修饰块 修饰类(内部类)\n- 特点\n\t* 静态元素在类加载时就初始化，此时还没创建对象，可以通过类名直接访问\n\t* 静态元素存储在静态元素区，每个类有一个自己的区域，与别的类不冲突\n\t* 静态元素只加载一次，全部类对象及类本身共享\n\t* 静态元素区Carbage Collection无法管理，可以粗暴理解为常驻内存\n\t* 非静态成员和静态成员都可以访问静态成员\n\t* 静态成员不可以访问非静态成员\n\t* 静态元素中不可出现this或super关键字，静态元素属于类的\n\n\n<span id=\"id7\"><span>\n### 7. 单例设计模式\n基本概念：当一个类有且只能对外提供一个对象时，这样的类就叫作单例类，而设计单例类的思想和模式，叫做单例设计模式。\n\n``` java\n/**\n * 编程实现Singleton类的封装\n */\npublic class Singleton{\n\tprivate static Singleton sin = new Singleton();//2.提供本类的引用指向本类的对象\n\tprivate Singleton(){} //1.私有化构造方法\n\tpublic static Singleton getInstance(){//3.提供公有的get方法将上述成员变量的数值返回出去\n\t\treturn sin;\n\t}\n}\n```\n\n- 实现流程：\n\t1. 私有化构造方法（private）\n\t2. 提供本类类型的引用指向本类类型对象（private static）\n\t3. 提供公有的get方法将上述对象return出去（public static）\n\t4. 实现方式：饿汉式和懒汉式，开发中推荐饿汉式。\n\n\n<span id=\"id8\"><span>\n### 8. 继承（extends）\n- 继承就是子类复用父类的代码，关键字extends表示类和类的继承关系\n- 使用继承可以提高代码复用性、扩展性、以及可维护性。\n\t1. 子类不能继承父类的构造方法和私有方法，私有成员变量可以继承但不能直接使用。\n\t2. 无论使用何种方式构造方式构造子类的对象都会自动调用父类的无参构造方法来初始化从父类中继承下来的成员变量，相当于在构造方法的第一行增加super()的效果。\n\t3. 使用继承必须满足逻辑关系：子类 is a 父类，不能滥用继承。\n\t4. 在Java中只能支持单继承，也就是一个一个子类只能有一个父类，但一个父类可以有多个子类。\n\n``` java\nclass Cricle extends Shape{\n\tint r;\n\tCricle(){}   //编译器会加入无参的调用 super()。\n\tCricle(int x, int y, int r){\n\t\tsuper(x, y);  //通过super关键字调用父类的构造方法。\n\t\tsetR(r);\n\t}\n\tpublic void setR(int r){\n\t\tthis.r = r;\n\t}\n}\n```\n\n\n<span id=\"id9\"><span>\n### 9. 方法的重写（Override）\n概念：从父类继承下来的方法不满足子类的需求时，就需要子类中重新写一个和父类一样的方法，覆盖从父类中继承下来的版本，该方法就叫方法的重写。\n<br>原则：\n1. 要求方法名相同，参数列表相同，返回值类型相同；jdk1.5开始返回子类类型。\n2. 要求访问权限不能变小，可以相同或变大\n3. 重写的方法不能抛出更大的异常\n\n\n<span id=\"id10\"><span>\n### 10. 访问控制\n- public修饰的内容可以在任意位置使用，private修饰的内容只能在本类中使用，\n- 通常情况下，成员变量都使用private修饰，成员方法都使用pubic修饰\n\n| 访问控制符 | 访问权限\t| 本类内部\t| 本类中的包 | 子类\t| 其他包 |\n| ---------\t|:---------:| ------:\t|-------:\t|-----:\t|------:|\n| public\t| 共有的\t\t| Y\t\t\t| Y\t\t\t| Y\t\t| Y\t\t|\n| protected\t| 保护的\t\t| Y\t\t\t| Y\t\t\t| Y\t\t| N\t\t|\n| 不写\t\t| 默认的\t\t| Y\t\t\t| Y\t\t\t| N\t\t| N\t\t|\n| private\t| 私有的\t\t| Y\t\t\t| N\t\t\t| N\t\t| N\t\t|\n\n\n<span id=\"id11\"><span>\n### 11. 包（Package）\n为了解决命名冲突问题，便于文件的管理\n\n``` java\npackage 包名；\npackage 包名1.包名2.包名3...包名n;\n/* 指定包名时应按照一定的规范，eg: 公司域名反写.项目名称.模块名称.类名 */\norg.apache.commons.lang.StringUtil;\n```\n\n\n<span id=\"id12\"><span>\n### 12. final关键字\n1. final关键字修饰**类**体现该类**不能被继承**（防止滥用继承）。\n2. final关键字修饰**方法**体现在该方法**不能被重新，但可以被继承**（防止不经意间造成的方法重写）。\n3. final关键字修饰**成员变量**体现在改成员变量**必须初始化且不能更改**（防止不经意间造成的数据更改）。\n\n> 扩展：在开发中很少单独使用static或者final单独修饰成员变量，而是使用**`public static final`**共同修饰成员变量来表达常量的含义，而常量的命名规范是：所有字母大写，不同单词之间下划线连接。\n\n\n<span id=\"id13\"><span>\n### 13. 对象的创建过程\n- 单个对象的创建过程\n\t1. main方法是程序的入口，若创建对象时没有指定初始值则采用默认初始化方式处理；\n\t2. 若声明成员变量时进行了显示初始化操作，则最终采用显示初始化的初始值处理；\n\t3. 执行构造块中的代码可以对成员变量进行赋值；\n\t4. 执行构造方法体中的代码可以对成员变量进行再次赋值；\n\t5. 此时对象构造完毕，继续向下执行后续的代码；\n- 子类对象的创建过程\n\t1. main方法是程序的入口，先加载父类的的代码再加载子类的代码；\n\t2. 先执行父类静态代码块，再执行子类的静态代码块；\n\t3. 先执行父类的构造块，再执行父类的构造方法体，此时包含的父类对象构造完毕；\n\t4. 先执行子类的构造块，再执行子类的构造方法体，此时子类对象构造完毕，继续向下执行后续代码。\n\n\n<span id=\"id14\"><span>\n### 14. 多态\n1. 语法：父类的引用指向子类的对象\n\n``` java\n父类类型 引用变量名 = new 子类类型();\nPerson pw = new Worker();\npw.show();//再编译阶段调用Person的show()方法，在运行阶段调用Worker的show()方法。\n```\n\n2. 多态的效果：\n\t1. 父类的引用**可以**直接调用**父类独有**的方法。\n\t2. 父类的引用**不可以**直接调用**子类独有**的方法。\n\t3. 对于父类子类都有的**非静态方法**来说，编译阶段调用父类的，运行阶段调用子类重写后的。\n\t4. 对于父类子类都有的**静态方法**来说，只调用父类的。\n3. 多态的实际意义：屏蔽不同子类的差异性实现通用的编程，从而带来不同的结果。\n4. 多态的表现形式\n\t1. 多态的前提要有继承的关系\n\t2. 使用父类引用指向子类对象 Person p = new Teacher();//向上转型\n\t3. 该引用只能调用父类中定义的属性/方法\n\t4. 执行结果，如果调用属性:执行父类的，如果调用方法:看子类是否重写\n\t5. 若想要调用子类独有的成员，将身份还原回去(向下转型/造型)，若需要转换的类型与真实对象类型不匹配，会产生一个运行时异常ClassCastException\n5. 引用数据类型之间的转换\n\t- 转换必须发生在父子类之间，否则编译报错。\n\t- 自动类型转换：小到大，子类型向父类型的转换，eg:`Person pw = new Worker();`。\n\t- 强制类型转换：大到小，父类型向子类型转换，eg:`((Worker) pw).getSalary();//将父类引用强制转换子类型调用子类方法`。\n6. 为了避免类型转换异常，对象进行强制类型转换时应该用instanceof判断引用变量真正指向的对象是否是要转换的目标类型。\n\n``` java\n/*语法格式：*/ 对象 instanceof 类型  //返回布尔值\nif(pw instanceof Teacher){\n\tTeacher t = (Teacher) pw;\n}else{\n\tSystem.out.println(\"转换会有异常\");\n}\n```\n\n7. 多态的使用场合：\n\n``` java\n// 通过方法的参数传递形成多态。\npublic static void draw(Shape s){}\nTestShape.draw(new Rect(1,2,3,4));\n\n// 在方法体中直接使用多态的语法格式。\nTestAbstrat ta = new SubTestAbstract();\nta.show();\n```\n\n\n<span id=\"id15\"><span>\n### 15. 抽象类\n1. 基本概念\n\t- 用**abstract**关键字修饰的类称为抽象类。\n\t- 抽象类不能实例化，抽象类的意义在于被继承。\n\t- 抽象类为其子类“抽象”出了公共部分，通常也定义了子类所必须具体实现的抽象方法。\n\t- 抽象方法：指不能具体实现的方法，没有方法体并使用abstract修饰。\n\n``` java\npublic abstract class Shape{ //一个类若定义了抽象方法，则必须以abstract关键字声明为抽象类\n\tprivate int x;\n\tprivate int y;\n\tpublic abstract boolean contains(int x, int y);//用abstract修饰的方法，称之为抽象方法，没有方法体\n}\n```\n\n2. 注意：\n\t1. 抽象类中可以有成员变量，成员方法，以及构造方法。\n\t2. 抽象类中可以没有抽象方法，也可以有抽象方法。\n\t3. 具有抽象方法的类必须是抽象类，因此其真正意义的抽象类应该是有抽象方法，并且使用abstract修饰。\n\t4. 子类必须实现抽象方法（不同子类可能有不同实现），否则改子类也变抽象。\n\t5. 抽象类对子类具有强制性和规范性，因此叫做模板设计模式。\n\t6. 推荐使用多态的语法格式实现抽象类，若需要更换子类时，该方法中只需要将new关键字后面的类型名称修改而其他位置无需改变就可以立即生效，从而提高了代码的维护性和扩展性。\n\n> 多态实现抽象类的缺点：若希望调用子类独有的方法时，则需要强制类型转换。\n\n\n<span id=\"id16\"><span>\n### 16. 接口\n1. 基本概念：接口可以看成是特殊的抽象类。即只包含抽象方法的抽象类。通过**interface**关键字定义。\n\n``` java\ninterface Runner { //-通过interface关键字定义接口\n\tpublic static final int SEF_SPEED=100;//-接口中不能定义成员变量，只能定义常量\n\tpublic void run();//-接口中只可以定义没有实现的方法（可以省略public abstract）\n}\n```\n\n2. 一个类可以通过**implements**关键字实现接口，一个类可以实现多个接口，并且该类需要实现这些接口中定义的所有方法。\n\n``` java\nclass American implements Runner,... { //与继承不同，可以实现多个接口\n\t@Override\n\tpublic void run(){//该类需要实现接口中定义的所有方法\n\t\tSystem.out.println(\"run...\");\n\t}\n\tpublic static void main(String[] args) {\n\t\tRunner ra = new American();//接口作为一种类型声明，并且声明的变量可以引用实现类的对象\n\t\tra.run();//通过该变量可以调用该接口定义的方法\n\t}\n}\n```\n\n3. 一个接口可以通过extends关键字继承另一个接口，子接口继承了父接口所有的方法。\n\n``` java\ninterface Hunter extends Runner{...}\n```\n\n4. 类与接口的关系\n\t- 类和类使用`extends`继承，仅支持**单继承**。\n\t- 接口和接口使用`extends`继承，支持多继承。\n\t- 类使用`implements`实现接口，支持**多实现**。\n5. 抽象类与接口的关系（笔试题）\n\t1. 定义抽象类:`abstract class`，而定义接口:`interface`；\n\t2. 类继承抽象类:`extends`单继承，而类实现接口:`implements`多实现；\n\t3. 抽象类可以`有`构造方法，而接口`不能有`构造方法；\n\t4. 抽象类可以有`成员变量`，而接口只能有`常量`；\n\t5. 抽象类可以有`成员方法`，而接口只能有`抽象方法`；\n\t6. 抽象类中增加方法子类可以`不用重写`，而接口中增加方法子类`必须重写`；\n\t7. 从jdk1.8开始允许接口中有非抽象方法，但需要`default`关键字修饰。\n\n\n<span id=\"id17\"><span>\n### 17. 内部类\n- 内部类指的是在Java中可以将一个类定义在另一个类定义在另一个类的内部\n- 内部类定义在 类的内部 ，与类成员层次一致\n- 内部类定义在 方法/块内部（与类成员相差一个层次，方法的局部变量一个层次）\n\t* 成员内部类：将一个类直接定义在类的里面，作为成员，与属性或方法层次一致\n\t* 局部内部类：将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次\n\t* 匿名内部类：成员匿名内部类，局部匿名内部类\n\t* 静态内部类：成员静态内部类\n\n#### 17.1 *成员内部类\n- 将一个类直接定义在类的里面，作为成员，与属性或方法层次一致\n- 成员内部类可以与正常类一样 使用不同的修饰符来修饰\n- 好处1.省略了一个.java文件  好处2.成员内部类中可以访问外部类的所有成员 包括私有的\n- 若想要在内部类中通过对象.调用外部类成员   外部类.this.外部类成员;\n- 内部类存在后 源代码进行编译 产生一个字节码  Demo$InnerDemo.class\n\n#### 17.2 局部内部类\n- 将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次\n- 局部内部类像是一个局部的变量一样，不能用public protected private及static\n- 只能用abstract或final\n- 局部内部类命名规则Demo$1InnerTestMethod   Demo$2InnerTestMethod\n- 局部内部类使用的变量只能是final修饰\n\n#### 17.3 *匿名内部类\n将类直接定义在类中 或者类成员中     成员匿名内部类   局部匿名内部类\n<br>匿名内部类没有类的所有结构(名字 修饰符) 只有类体\n<br>通常会在抽象类或接口创建的后面使用，当然具体的类也可以有匿名子类\n<br>匿名类内部没有构造方法，也不能用任何修饰符来修饰\n\n- 当接口类型的引用作为方法的形参时，实参的传递方式有两种：\n\t1. 自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递。\n\t2. 直接使用匿名内部类的语法格式得到接口类型的引用，再作为实参传递。\n\n``` java\npublic interface A {\n\tpublic abstract void show();\n}\n//-方式1：自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递\npublic class SubA implements A {\n\t@Override\n\tpublic void show() {\n\t\tSystem.out.println(\"这里自定义类实现接口并重写抽象方法！\");\n\t}\n}\n//测试类\npublic class ATest {\n\tpublic static void test(A a) {\n\t\ta.show();\n\t}\n\tpublic static void main(String[] args) {\n\t\t//ATest.test(new A());//报错，A是接口，不能new对象\n\t\t//-方式1：接口实现类的对象作为实参传递\n\t\tATest.test(new ASub());//接口类型引用指向实现类的对象，形成了多态。\n\t\t\n\t\t//-方式2：匿名内部类\n\t\t// 接口/父类类型 引用变量名 = new 接口/父类类型() {方法的重写};\n\t\tA ta = new A() {\n\t\t\t@Override\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"这里是匿名内部类\");\n\t\t\t}\n\t\t};\n\t\tATest.test(ta);//得到接口类型的引用，再作为实参传递\n\t}\n}\n```\n\n- 匿名内部类定义：如果在一段程序需要创建一个类的对象（通常这个类需要实现某个接口或继承某个类），而且对象创建后这个类的价值就不存在了，这个类不必命名，称之为匿名内部类。\n- 语法格式：`接口/父类类型 引用变量名 = new 接口/父类类型() {匿名类类体，这里重写方法};`。\n\n``` java\nSuperType obj = new SuperType(...){ ... };\n```\n\n\n#### 17.4 静态内部类\n- 成员静态内部类\n- 不需要外部类对象，通过正常的方式直接创建内部类\n- 静态元素不能访问非静态成员(自己类和外部类)\n\n\n<span id=\"id18\"><span>\n### 18. 回调模式\n回调模式是指：如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递一个实现此接口的对象；而该方法在运行时会调用到参数对象中所实现的方法\n\n``` java\ninterface Action{\n\tpublic void doSth();\n}\n//repeat方法需要一个Action接口类型参数，让其doSth方法重复执行n次\npublic static void repeat(int n, Action ac){\n\tfor(int i=0; i<n; i++){ ac.doSth();}\n}\n//此处的语义可解释为：通过接口回调传递了一个方法给repeat,让repeat将其执行5次。\npublic static void main(String[] args){\n\trepeat(5, new Action(){//通过匿名内部类传递参数\n\t\tpublic void doSth(){\n\t\t\tSystem.out.println(\"Hello\")\n\t\t}\n\t});\n}\n```\n\n\n<span id=\"id19\"><span>\n### 19. 抽象方法的笔试考点\n- `abstract`与哪些关键字不能共存：\n\t1. `final`关键字；因为final关键字修饰的类不能被继承，方法不能被重写，而abstract关键字修饰的类继承后，该类的方法需要重写，相互冲突。\n\t2. `static`关键字；因为static能被实例化可直接调用，而abstract不能被实例化，相互冲突。\n\t3. `private`关键字；因为private修饰的私有方法不能被继承，就不能重写，而`abstract`方法需要重写。\n\n\n<span id=\"id20\"><span>\n### 20. 枚举类（enum）\n- 一个类中的对象 认为个数是有限且固定的 可以将每一个对象一一列举出来\n- 创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum<E extends Enum<E>>，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。\n- 我们自己定义的每一个enum类型 都会默认继承Enum 间接继承Object\n- Enum类型，有两个属性\n\t* name----->枚举对象的名字，name()获取name属性\n\t* ordinal--->枚举对象在类中罗列的顺序  类似index  也从0开始   ordinal()获取序号\n- 一些常用的方法\n\t* valueOf()   通过给定的name获取对应的枚举对象\n\t* values()     获取全部的枚举对象  ---> 返回一个数组  Day[]\n\t* compareTo()   可以比较两个枚举对象   int\n\t* toString()\t  由于这个方法没有final修饰  可以覆盖(重写)\n- switch内部判断枚举的应用\n- 我们也可以在enum中描述自己的一些属性或方法\n\t* 必须在enum类中第一行 描述一下枚举的样子 最后需要分号结束;\n\t* 可以定义自己的属性\n\t* 类创建的过程中  帮我们创建枚举类型的对象\n\t* 需要给枚举类型提供对应样子的构造方法  构造方法只能private修饰  可以重载\n\n``` java\npublic enum Day{\n    //描述了七个当前类的对象\n    monday(\"星期一\",1),tuesday(\"星期二\",2),wednesday,thursday,friday,saturday,sunday;\n\n    private String name;\n    private int index;\n\t\n    private Day(){}\n    private Day(String  name,int index){\n        this.name=name;\n        this.index=index;\n    }\n\t\n    public String getName(){\n        return this.name;\n    }\n    public void setName(String name){\n        this.name=name;\n    }\n}\n```\n\n\n<span id=\"id21\"><span>\n### 21. 内存机制问题\n- 类创建在哪儿   对象创建在哪里   继承关系   静态成员   方法执行\n- 栈内存--->Person p = new Person();---->堆内存    方法区---类模板\n\t* 栈内存----变量空间,方法临时执行空间（从创建开始执行完毕,**立即回收**）\n\t* 堆内存----new申请对象空间（**垃圾回收器GC**,对象空间没有任何引用指向视为垃圾）\n\t* 方法区----常量  类模板  静态成员（有且只有一份,**不回收**）\n- Runtime类(是单例模式)之中提供了几个管理内存的方法\n\t* maxMemory\n\t* totalMemory\n\t* freeMemory\n\t* 栈内存溢出错误StackOverflowError \n\t* 堆内存溢出错误OutOfMemoryError\n- Object类中有一个finalize方法  如果重写也能看见对象回收的效果\n- GC系统提供的一个线程    回收算法\n\n\n[回到顶部😼](#)","slug":"J2SE面向对象","published":1,"updated":"2019-07-07T11:19:04.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsvop9q0018jst319hbca8p","content":"<h2 id=\"二、Java面向对象\"><a href=\"#二、Java面向对象\" class=\"headerlink\" title=\"二、Java面向对象\"></a>二、Java面向对象</h2><ol>\n<li><a href=\"#id1\">类与对象</a></li>\n<li><a href=\"#id2\">构造方法和方法重载</a></li>\n<li><a href=\"#id3\">this关键字</a></li>\n<li><a href=\"#id4\">方法的传递和递归</a></li>\n<li><a href=\"#id5\">封装</a></li>\n<li><a href=\"#id6\">static关键字</a></li>\n<li><a href=\"#id7\">单例设计模式</a></li>\n<li><a href=\"#id8\">继承（extends）</a></li>\n<li><a href=\"#id9\">方法的重写（Override）</a></li>\n<li><a href=\"#id10\">访问控制</a></li>\n<li><a href=\"#id11\">包（Package）</a></li>\n<li><a href=\"#id12\">final关键字</a></li>\n<li><a href=\"#id13\">对象的创建过程</a></li>\n<li><a href=\"#id14\">多态</a></li>\n<li><a href=\"#id15\">抽象类</a></li>\n<li><a href=\"#id16\">接口</a></li>\n<li><a href=\"#id17\">内部类</a></li>\n<li><a href=\"#id18\">回调模式</a></li>\n<li><a href=\"#id19\">抽象方法的笔试考点</a></li>\n<li><a href=\"#id20\">枚举类（enum）</a></li>\n<li><a href=\"#id21\">内存机制问题</a></li>\n</ol>\n<p><span id=\"id1\"><span></span></span></p>\n<h3 id=\"1-类与对象\"><a href=\"#1-类与对象\" class=\"headerlink\" title=\"1. 类与对象\"></a>1. 类与对象</h3><h4 id=\"1-1-类的定义\"><a href=\"#1-1-类的定义\" class=\"headerlink\" title=\"1.1 类的定义\"></a>1.1 类的定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;类体&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>类名由多个单词组成时，要求每个单词首字母大写</p>\n</blockquote>\n<h4 id=\"1-2-成员变量的定义\"><a href=\"#1-2-成员变量的定义\" class=\"headerlink\" title=\"1.2 成员变量的定义\"></a>1.2 成员变量的定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123; 数据类型 成员变量名=初始值; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>成员变量名由多个单词组成时，要求第二个起每个单词首字母大写</p>\n</blockquote>\n<h4 id=\"1-3-对象的创建\"><a href=\"#1-3-对象的创建\" class=\"headerlink\" title=\"1.3 对象的创建\"></a>1.3 对象的创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 类名();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当一个类定义完毕后使用new关键字创建/构造该类的对象的过程叫做类的实例化。</p>\n</blockquote>\n<h4 id=\"1-4-引用\"><a href=\"#1-4-引用\" class=\"headerlink\" title=\"1.4 引用\"></a>1.4 引用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 引用变量名;</span><br><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person(); <span class=\"comment\">//声明person类型的引用p指向Person类型对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用变量名.成员变量名;</span><br><span class=\"line\">p.name = <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;- 在JAVA中，使用引用数据类型声明的变量叫做引用变量，简称‘引用’。</span><br><span class=\"line\">&gt;- 使用引用可以记录对象在堆区中存放的内存地址信息，便于下次访问。</span><br><span class=\"line\"></span><br><span class=\"line\">- 除八种基本类型之外，用类名（接口，数组）声明的变量称为引用类型变量，引用类型变量存的某个对象的地址信息，引用的功能在于访问对象。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.5 成员方法</span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</span><br><span class=\"line\">\t返回值类型 成员方法名(形参列表)&#123;方法体;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回值类型：可以是基本数据类型，也可以是引用，当方法不需要返回数据用void</li>\n<li>形参列表：数据类型 形参1, 数据类型 形参2, …</li>\n</ul>\n<p><span id=\"id2\"><span></span></span></p>\n<h3 id=\"2-构造方法和方法重载\"><a href=\"#2-构造方法和方法重载\" class=\"headerlink\" title=\"2. 构造方法和方法重载\"></a>2. 构造方法和方法重载</h3><h4 id=\"2-1-构造方法\"><a href=\"#2-1-构造方法\" class=\"headerlink\" title=\"2.1 构造方法\"></a>2.1 构造方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123; 构造方法名(形参列表)&#123;构造方法体;&#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构造方法名与类名相同且没有返回值</li>\n<li>当使用new关键字构造对象时，会自动调用构造方法，实现成员变量的初始化工作。</li>\n</ul>\n<h4 id=\"2-2-默认构造方法\"><a href=\"#2-2-默认构造方法\" class=\"headerlink\" title=\"2.2 默认构造方法\"></a>2.2 默认构造方法</h4><ul>\n<li>当一个类中没有没有自定义任何构造方法时，编译器会提供一个无参的空构造方法，叫做默认/缺省构造方法。</li>\n<li>若类中出现自定义构造方法，则编译器不再提供构造方法。</li>\n</ul>\n<h4 id=\"2-3-方法重载（overload）\"><a href=\"#2-3-方法重载（overload）\" class=\"headerlink\" title=\"2.3 方法重载（overload）\"></a>2.3 方法重载（overload）</h4><p>在Java中，方法名相同，参数列表不同的方法构成重载关系。</p>\n<ul>\n<li>体现形式：参数个数，参数顺序，参数类型。（与形参变量名和返回值无关，但最好返回值类型相同）</li>\n<li>实际意义：调用者只需要记住一个方法名就可以不同的版本，从而实现不同的效果。</li>\n</ul>\n<p><span id=\"id3\"><span></span></span></p>\n<h3 id=\"3-this关键字\"><a href=\"#3-this关键字\" class=\"headerlink\" title=\"3. this关键字\"></a>3. this关键字</h3><p>在构造方法中出现this时,this代表当前正在构造的对象；在成员方法中出现this,this代表当前正在调用的对象。</p>\n<ul>\n<li>使用方式：<ol>\n<li>当形参变量和成员变量同名时，在方法体中优先使用形参变量，若希望使用成员变量，则需要加上this，即this.变量名</li>\n<li>在构造方法的的第一行，可以调用本类中的其他构造方法。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id4\"><span></span></span></p>\n<h3 id=\"4-方法的传递和递归\"><a href=\"#4-方法的传递和递归\" class=\"headerlink\" title=\"4. 方法的传递和递归\"></a>4. 方法的传递和递归</h3><h4 id=\"4-1-传参\"><a href=\"#4-1-传参\" class=\"headerlink\" title=\"4.1 传参\"></a>4.1 传参</h4><ul>\n<li>基本数据类型变量作为参数传递时，型参数值改变不会影响实参变量的数值。</li>\n<li>引用类型变量作为参数传递时，形参指向内容的改变会影响实参变量指向的内容。</li>\n<li>引用数据类型变量作为参数传递时，形参改变指向后再改变指向内容不会影响实参指向的内容。</li>\n</ul>\n<h4 id=\"4-2-递归的调用\"><a href=\"#4-2-递归的调用\" class=\"headerlink\" title=\"4.2 递归的调用\"></a>4.2 递归的调用</h4><ul>\n<li>递归是指方法体内部调用自身</li>\n<li>必须有递归的规律和退出条件</li>\n<li>使用递归必须使得问题简单化而不是复杂化</li>\n<li>若递归影响到程序的执行性能时，则用递推取代之</li>\n</ul>\n<p><span id=\"id5\"><span></span></span></p>\n<h3 id=\"5-封装\"><a href=\"#5-封装\" class=\"headerlink\" title=\"5. 封装\"></a>5. 封装</h3><p>面向对象的三大特征：封装，继承，多态。</p>\n<ul>\n<li>封装基本概念：封装就是对成员变量的数值进行密封包装处理以及合理性判断</li>\n<li>封装基本流程：<ol>\n<li>私有化成员变量(private)</li>\n<li>提供公有的get、set方法，并在set方法体中进行合理性判断</li>\n<li>在构方法中调用set方法进行合理值的判断</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id6\"><span></span></span></p>\n<h3 id=\"6-static关键字\"><a href=\"#6-static关键字\" class=\"headerlink\" title=\"6. static关键字\"></a>6. static关键字</h3><p>基本概念：通常情况下成员变量隶属于对象层级，也就是每创建一个对象就会申请一块独立的内存空间来存储就会造成内存空间的浪费。</p>\n<blockquote>\n<p>为了解决上诉问题，Java中使用static关键字修饰该成员变量表达静态的含义，此时成员变量提升到类层级，所有对象共享，随着类的加载准备就绪，与对象创建再无关。</p>\n</blockquote>\n<ul>\n<li>static可以修饰：修饰属性 修饰方法 修饰块 修饰类(内部类)</li>\n<li>特点<ul>\n<li>静态元素在类加载时就初始化，此时还没创建对象，可以通过类名直接访问</li>\n<li>静态元素存储在静态元素区，每个类有一个自己的区域，与别的类不冲突</li>\n<li>静态元素只加载一次，全部类对象及类本身共享</li>\n<li>静态元素区Carbage Collection无法管理，可以粗暴理解为常驻内存</li>\n<li>非静态成员和静态成员都可以访问静态成员</li>\n<li>静态成员不可以访问非静态成员</li>\n<li>静态元素中不可出现this或super关键字，静态元素属于类的</li>\n</ul>\n</li>\n</ul>\n<p><span id=\"id7\"><span></span></span></p>\n<h3 id=\"7-单例设计模式\"><a href=\"#7-单例设计模式\" class=\"headerlink\" title=\"7. 单例设计模式\"></a>7. 单例设计模式</h3><p>基本概念：当一个类有且只能对外提供一个对象时，这样的类就叫作单例类，而设计单例类的思想和模式，叫做单例设计模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编程实现Singleton类的封装</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton sin = <span class=\"keyword\">new</span> Singleton();<span class=\"comment\">//2.提供本类的引用指向本类的对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">//1.私有化构造方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//3.提供公有的get方法将上述成员变量的数值返回出去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sin;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现流程：<ol>\n<li>私有化构造方法（private）</li>\n<li>提供本类类型的引用指向本类类型对象（private static）</li>\n<li>提供公有的get方法将上述对象return出去（public static）</li>\n<li>实现方式：饿汉式和懒汉式，开发中推荐饿汉式。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id8\"><span></span></span></p>\n<h3 id=\"8-继承（extends）\"><a href=\"#8-继承（extends）\" class=\"headerlink\" title=\"8. 继承（extends）\"></a>8. 继承（extends）</h3><ul>\n<li>继承就是子类复用父类的代码，关键字extends表示类和类的继承关系</li>\n<li>使用继承可以提高代码复用性、扩展性、以及可维护性。<ol>\n<li>子类不能继承父类的构造方法和私有方法，私有成员变量可以继承但不能直接使用。</li>\n<li>无论使用何种方式构造方式构造子类的对象都会自动调用父类的无参构造方法来初始化从父类中继承下来的成员变量，相当于在构造方法的第一行增加super()的效果。</li>\n<li>使用继承必须满足逻辑关系：子类 is a 父类，不能滥用继承。</li>\n<li>在Java中只能支持单继承，也就是一个一个子类只能有一个父类，但一个父类可以有多个子类。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cricle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r;</span><br><span class=\"line\">\tCricle()&#123;&#125;   <span class=\"comment\">//编译器会加入无参的调用 super()。</span></span><br><span class=\"line\">\tCricle(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);  <span class=\"comment\">//通过super关键字调用父类的构造方法。</span></span><br><span class=\"line\">\t\tsetR(r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setR</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id9\"><span></span></span></p>\n<h3 id=\"9-方法的重写（Override）\"><a href=\"#9-方法的重写（Override）\" class=\"headerlink\" title=\"9. 方法的重写（Override）\"></a>9. 方法的重写（Override）</h3><p>概念：从父类继承下来的方法不满足子类的需求时，就需要子类中重新写一个和父类一样的方法，覆盖从父类中继承下来的版本，该方法就叫方法的重写。<br><br>原则：</p>\n<ol>\n<li>要求方法名相同，参数列表相同，返回值类型相同；jdk1.5开始返回子类类型。</li>\n<li>要求访问权限不能变小，可以相同或变大</li>\n<li>重写的方法不能抛出更大的异常</li>\n</ol>\n<p><span id=\"id10\"><span></span></span></p>\n<h3 id=\"10-访问控制\"><a href=\"#10-访问控制\" class=\"headerlink\" title=\"10. 访问控制\"></a>10. 访问控制</h3><ul>\n<li>public修饰的内容可以在任意位置使用，private修饰的内容只能在本类中使用，</li>\n<li>通常情况下，成员变量都使用private修饰，成员方法都使用pubic修饰</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>访问控制符</th>\n<th align=\"center\">访问权限</th>\n<th align=\"right\">本类内部</th>\n<th align=\"right\">本类中的包</th>\n<th align=\"right\">子类</th>\n<th align=\"right\">其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td align=\"center\">共有的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n</tr>\n<tr>\n<td>protected</td>\n<td align=\"center\">保护的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n</tr>\n<tr>\n<td>不写</td>\n<td align=\"center\">默认的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n</tr>\n<tr>\n<td>private</td>\n<td align=\"center\">私有的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n</tr>\n</tbody></table>\n<p><span id=\"id11\"><span></span></span></p>\n<h3 id=\"11-包（Package）\"><a href=\"#11-包（Package）\" class=\"headerlink\" title=\"11. 包（Package）\"></a>11. 包（Package）</h3><p>为了解决命名冲突问题，便于文件的管理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名；</span><br><span class=\"line\"><span class=\"keyword\">package</span> 包名<span class=\"number\">1</span>.包名<span class=\"number\">2</span>.包名<span class=\"number\">3</span>...包名n;</span><br><span class=\"line\"><span class=\"comment\">/* 指定包名时应按照一定的规范，eg: 公司域名反写.项目名称.模块名称.类名 */</span></span><br><span class=\"line\">org.apache.commons.lang.StringUtil;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id12\"><span></span></span></p>\n<h3 id=\"12-final关键字\"><a href=\"#12-final关键字\" class=\"headerlink\" title=\"12. final关键字\"></a>12. final关键字</h3><ol>\n<li>final关键字修饰<strong>类</strong>体现该类<strong>不能被继承</strong>（防止滥用继承）。</li>\n<li>final关键字修饰<strong>方法</strong>体现在该方法<strong>不能被重新，但可以被继承</strong>（防止不经意间造成的方法重写）。</li>\n<li>final关键字修饰<strong>成员变量</strong>体现在改成员变量<strong>必须初始化且不能更改</strong>（防止不经意间造成的数据更改）。</li>\n</ol>\n<blockquote>\n<p>扩展：在开发中很少单独使用static或者final单独修饰成员变量，而是使用<strong><code>public static final</code></strong>共同修饰成员变量来表达常量的含义，而常量的命名规范是：所有字母大写，不同单词之间下划线连接。</p>\n</blockquote>\n<p><span id=\"id13\"><span></span></span></p>\n<h3 id=\"13-对象的创建过程\"><a href=\"#13-对象的创建过程\" class=\"headerlink\" title=\"13. 对象的创建过程\"></a>13. 对象的创建过程</h3><ul>\n<li>单个对象的创建过程<ol>\n<li>main方法是程序的入口，若创建对象时没有指定初始值则采用默认初始化方式处理；</li>\n<li>若声明成员变量时进行了显示初始化操作，则最终采用显示初始化的初始值处理；</li>\n<li>执行构造块中的代码可以对成员变量进行赋值；</li>\n<li>执行构造方法体中的代码可以对成员变量进行再次赋值；</li>\n<li>此时对象构造完毕，继续向下执行后续的代码；</li>\n</ol>\n</li>\n<li>子类对象的创建过程<ol>\n<li>main方法是程序的入口，先加载父类的的代码再加载子类的代码；</li>\n<li>先执行父类静态代码块，再执行子类的静态代码块；</li>\n<li>先执行父类的构造块，再执行父类的构造方法体，此时包含的父类对象构造完毕；</li>\n<li>先执行子类的构造块，再执行子类的构造方法体，此时子类对象构造完毕，继续向下执行后续代码。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id14\"><span></span></span></p>\n<h3 id=\"14-多态\"><a href=\"#14-多态\" class=\"headerlink\" title=\"14. 多态\"></a>14. 多态</h3><ol>\n<li>语法：父类的引用指向子类的对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类类型 引用变量名 = <span class=\"keyword\">new</span> 子类类型();</span><br><span class=\"line\">Person pw = <span class=\"keyword\">new</span> Worker();</span><br><span class=\"line\">pw.show();<span class=\"comment\">//再编译阶段调用Person的show()方法，在运行阶段调用Worker的show()方法。</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>多态的效果：<ol>\n<li>父类的引用<strong>可以</strong>直接调用<strong>父类独有</strong>的方法。</li>\n<li>父类的引用<strong>不可以</strong>直接调用<strong>子类独有</strong>的方法。</li>\n<li>对于父类子类都有的<strong>非静态方法</strong>来说，编译阶段调用父类的，运行阶段调用子类重写后的。</li>\n<li>对于父类子类都有的<strong>静态方法</strong>来说，只调用父类的。</li>\n</ol>\n</li>\n<li>多态的实际意义：屏蔽不同子类的差异性实现通用的编程，从而带来不同的结果。</li>\n<li>多态的表现形式<ol>\n<li>多态的前提要有继承的关系</li>\n<li>使用父类引用指向子类对象 Person p = new Teacher();//向上转型</li>\n<li>该引用只能调用父类中定义的属性/方法</li>\n<li>执行结果，如果调用属性:执行父类的，如果调用方法:看子类是否重写</li>\n<li>若想要调用子类独有的成员，将身份还原回去(向下转型/造型)，若需要转换的类型与真实对象类型不匹配，会产生一个运行时异常ClassCastException</li>\n</ol>\n</li>\n<li>引用数据类型之间的转换<ul>\n<li>转换必须发生在父子类之间，否则编译报错。</li>\n<li>自动类型转换：小到大，子类型向父类型的转换，eg:<code>Person pw = new Worker();</code>。</li>\n<li>强制类型转换：大到小，父类型向子类型转换，eg:<code>((Worker) pw).getSalary();//将父类引用强制转换子类型调用子类方法</code>。</li>\n</ul>\n</li>\n<li>为了避免类型转换异常，对象进行强制类型转换时应该用instanceof判断引用变量真正指向的对象是否是要转换的目标类型。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*语法格式：*/</span> 对象 <span class=\"keyword\">instanceof</span> 类型  <span class=\"comment\">//返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(pw <span class=\"keyword\">instanceof</span> Teacher)&#123;</span><br><span class=\"line\">\tTeacher t = (Teacher) pw;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"转换会有异常\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>多态的使用场合：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过方法的参数传递形成多态。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Shape s)</span></span>&#123;&#125;</span><br><span class=\"line\">TestShape.draw(<span class=\"keyword\">new</span> Rect(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在方法体中直接使用多态的语法格式。</span></span><br><span class=\"line\">TestAbstrat ta = <span class=\"keyword\">new</span> SubTestAbstract();</span><br><span class=\"line\">ta.show();</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id15\"><span></span></span></p>\n<h3 id=\"15-抽象类\"><a href=\"#15-抽象类\" class=\"headerlink\" title=\"15. 抽象类\"></a>15. 抽象类</h3><ol>\n<li>基本概念<ul>\n<li>用<strong>abstract</strong>关键字修饰的类称为抽象类。</li>\n<li>抽象类不能实例化，抽象类的意义在于被继承。</li>\n<li>抽象类为其子类“抽象”出了公共部分，通常也定义了子类所必须具体实现的抽象方法。</li>\n<li>抽象方法：指不能具体实现的方法，没有方法体并使用abstract修饰。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123; <span class=\"comment\">//一个类若定义了抽象方法，则必须以abstract关键字声明为抽象类</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;<span class=\"comment\">//用abstract修饰的方法，称之为抽象方法，没有方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>注意：<ol>\n<li>抽象类中可以有成员变量，成员方法，以及构造方法。</li>\n<li>抽象类中可以没有抽象方法，也可以有抽象方法。</li>\n<li>具有抽象方法的类必须是抽象类，因此其真正意义的抽象类应该是有抽象方法，并且使用abstract修饰。</li>\n<li>子类必须实现抽象方法（不同子类可能有不同实现），否则改子类也变抽象。</li>\n<li>抽象类对子类具有强制性和规范性，因此叫做模板设计模式。</li>\n<li>推荐使用多态的语法格式实现抽象类，若需要更换子类时，该方法中只需要将new关键字后面的类型名称修改而其他位置无需改变就可以立即生效，从而提高了代码的维护性和扩展性。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>多态实现抽象类的缺点：若希望调用子类独有的方法时，则需要强制类型转换。</p>\n</blockquote>\n<p><span id=\"id16\"><span></span></span></p>\n<h3 id=\"16-接口\"><a href=\"#16-接口\" class=\"headerlink\" title=\"16. 接口\"></a>16. 接口</h3><ol>\n<li>基本概念：接口可以看成是特殊的抽象类。即只包含抽象方法的抽象类。通过<strong>interface</strong>关键字定义。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runner</span> </span>&#123; <span class=\"comment\">//-通过interface关键字定义接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SEF_SPEED=<span class=\"number\">100</span>;<span class=\"comment\">//-接口中不能定义成员变量，只能定义常量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;<span class=\"comment\">//-接口中只可以定义没有实现的方法（可以省略public abstract）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一个类可以通过<strong>implements</strong>关键字实现接口，一个类可以实现多个接口，并且该类需要实现这些接口中定义的所有方法。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">American</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runner</span>,... </span>&#123; <span class=\"comment\">//与继承不同，可以实现多个接口</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//该类需要实现接口中定义的所有方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"run...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tRunner ra = <span class=\"keyword\">new</span> American();<span class=\"comment\">//接口作为一种类型声明，并且声明的变量可以引用实现类的对象</span></span><br><span class=\"line\">\t\tra.run();<span class=\"comment\">//通过该变量可以调用该接口定义的方法</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>一个接口可以通过extends关键字继承另一个接口，子接口继承了父接口所有的方法。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Hunter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runner</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>类与接口的关系<ul>\n<li>类和类使用<code>extends</code>继承，仅支持<strong>单继承</strong>。</li>\n<li>接口和接口使用<code>extends</code>继承，支持多继承。</li>\n<li>类使用<code>implements</code>实现接口，支持<strong>多实现</strong>。</li>\n</ul>\n</li>\n<li>抽象类与接口的关系（笔试题）<ol>\n<li>定义抽象类:<code>abstract class</code>，而定义接口:<code>interface</code>；</li>\n<li>类继承抽象类:<code>extends</code>单继承，而类实现接口:<code>implements</code>多实现；</li>\n<li>抽象类可以<code>有</code>构造方法，而接口<code>不能有</code>构造方法；</li>\n<li>抽象类可以有<code>成员变量</code>，而接口只能有<code>常量</code>；</li>\n<li>抽象类可以有<code>成员方法</code>，而接口只能有<code>抽象方法</code>；</li>\n<li>抽象类中增加方法子类可以<code>不用重写</code>，而接口中增加方法子类<code>必须重写</code>；</li>\n<li>从jdk1.8开始允许接口中有非抽象方法，但需要<code>default</code>关键字修饰。</li>\n</ol>\n</li>\n</ol>\n<p><span id=\"id17\"><span></span></span></p>\n<h3 id=\"17-内部类\"><a href=\"#17-内部类\" class=\"headerlink\" title=\"17. 内部类\"></a>17. 内部类</h3><ul>\n<li>内部类指的是在Java中可以将一个类定义在另一个类定义在另一个类的内部</li>\n<li>内部类定义在 类的内部 ，与类成员层次一致</li>\n<li>内部类定义在 方法/块内部（与类成员相差一个层次，方法的局部变量一个层次）<ul>\n<li>成员内部类：将一个类直接定义在类的里面，作为成员，与属性或方法层次一致</li>\n<li>局部内部类：将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次</li>\n<li>匿名内部类：成员匿名内部类，局部匿名内部类</li>\n<li>静态内部类：成员静态内部类</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"17-1-成员内部类\"><a href=\"#17-1-成员内部类\" class=\"headerlink\" title=\"17.1 *成员内部类\"></a>17.1 *成员内部类</h4><ul>\n<li>将一个类直接定义在类的里面，作为成员，与属性或方法层次一致</li>\n<li>成员内部类可以与正常类一样 使用不同的修饰符来修饰</li>\n<li>好处1.省略了一个.java文件  好处2.成员内部类中可以访问外部类的所有成员 包括私有的</li>\n<li>若想要在内部类中通过对象.调用外部类成员   外部类.this.外部类成员;</li>\n<li>内部类存在后 源代码进行编译 产生一个字节码  Demo$InnerDemo.class</li>\n</ul>\n<h4 id=\"17-2-局部内部类\"><a href=\"#17-2-局部内部类\" class=\"headerlink\" title=\"17.2 局部内部类\"></a>17.2 局部内部类</h4><ul>\n<li>将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次</li>\n<li>局部内部类像是一个局部的变量一样，不能用public protected private及static</li>\n<li>只能用abstract或final</li>\n<li>局部内部类命名规则Demo$1InnerTestMethod   Demo$2InnerTestMethod</li>\n<li>局部内部类使用的变量只能是final修饰</li>\n</ul>\n<h4 id=\"17-3-匿名内部类\"><a href=\"#17-3-匿名内部类\" class=\"headerlink\" title=\"17.3 *匿名内部类\"></a>17.3 *匿名内部类</h4><p>将类直接定义在类中 或者类成员中     成员匿名内部类   局部匿名内部类<br><br>匿名内部类没有类的所有结构(名字 修饰符) 只有类体<br><br>通常会在抽象类或接口创建的后面使用，当然具体的类也可以有匿名子类<br><br>匿名类内部没有构造方法，也不能用任何修饰符来修饰</p>\n<ul>\n<li>当接口类型的引用作为方法的形参时，实参的传递方式有两种：<ol>\n<li>自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递。</li>\n<li>直接使用匿名内部类的语法格式得到接口类型的引用，再作为实参传递。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-方式1：自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubA</span> <span class=\"keyword\">implements</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"这里自定义类实现接口并重写抽象方法！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ATest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//ATest.test(new A());//报错，A是接口，不能new对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//-方式1：接口实现类的对象作为实参传递</span></span><br><span class=\"line\">\t\tATest.test(<span class=\"keyword\">new</span> ASub());<span class=\"comment\">//接口类型引用指向实现类的对象，形成了多态。</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//-方式2：匿名内部类</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 接口/父类类型 引用变量名 = new 接口/父类类型() &#123;方法的重写&#125;;</span></span><br><span class=\"line\">\t\tA ta = <span class=\"keyword\">new</span> A() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"这里是匿名内部类\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tATest.test(ta);<span class=\"comment\">//得到接口类型的引用，再作为实参传递</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>匿名内部类定义：如果在一段程序需要创建一个类的对象（通常这个类需要实现某个接口或继承某个类），而且对象创建后这个类的价值就不存在了，这个类不必命名，称之为匿名内部类。</li>\n<li>语法格式：<code>接口/父类类型 引用变量名 = new 接口/父类类型() {匿名类类体，这里重写方法};</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SuperType obj = <span class=\"keyword\">new</span> SuperType(...)&#123; ... &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-4-静态内部类\"><a href=\"#17-4-静态内部类\" class=\"headerlink\" title=\"17.4 静态内部类\"></a>17.4 静态内部类</h4><ul>\n<li>成员静态内部类</li>\n<li>不需要外部类对象，通过正常的方式直接创建内部类</li>\n<li>静态元素不能访问非静态成员(自己类和外部类)</li>\n</ul>\n<p><span id=\"id18\"><span></span></span></p>\n<h3 id=\"18-回调模式\"><a href=\"#18-回调模式\" class=\"headerlink\" title=\"18. 回调模式\"></a>18. 回调模式</h3><p>回调模式是指：如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递一个实现此接口的对象；而该方法在运行时会调用到参数对象中所实现的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//repeat方法需要一个Action接口类型参数，让其doSth方法重复执行n次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">repeat</span><span class=\"params\">(<span class=\"keyword\">int</span> n, Action ac)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)&#123; ac.doSth();&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此处的语义可解释为：通过接口回调传递了一个方法给repeat,让repeat将其执行5次。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\trepeat(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Action()&#123;<span class=\"comment\">//通过匿名内部类传递参数</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id19\"><span></span></span></p>\n<h3 id=\"19-抽象方法的笔试考点\"><a href=\"#19-抽象方法的笔试考点\" class=\"headerlink\" title=\"19. 抽象方法的笔试考点\"></a>19. 抽象方法的笔试考点</h3><ul>\n<li><code>abstract</code>与哪些关键字不能共存：<ol>\n<li><code>final</code>关键字；因为final关键字修饰的类不能被继承，方法不能被重写，而abstract关键字修饰的类继承后，该类的方法需要重写，相互冲突。</li>\n<li><code>static</code>关键字；因为static能被实例化可直接调用，而abstract不能被实例化，相互冲突。</li>\n<li><code>private</code>关键字；因为private修饰的私有方法不能被继承，就不能重写，而<code>abstract</code>方法需要重写。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id20\"><span></span></span></p>\n<h3 id=\"20-枚举类（enum）\"><a href=\"#20-枚举类（enum）\" class=\"headerlink\" title=\"20. 枚举类（enum）\"></a>20. 枚举类（enum）</h3><ul>\n<li>一个类中的对象 认为个数是有限且固定的 可以将每一个对象一一列举出来</li>\n<li>创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum&lt;E extends Enum<e>&gt;，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。</e></li>\n<li>我们自己定义的每一个enum类型 都会默认继承Enum 间接继承Object</li>\n<li>Enum类型，有两个属性<ul>\n<li>name—–&gt;枚举对象的名字，name()获取name属性</li>\n<li>ordinal—&gt;枚举对象在类中罗列的顺序  类似index  也从0开始   ordinal()获取序号</li>\n</ul>\n</li>\n<li>一些常用的方法<ul>\n<li>valueOf()   通过给定的name获取对应的枚举对象</li>\n<li>values()     获取全部的枚举对象  —&gt; 返回一个数组  Day[]</li>\n<li>compareTo()   可以比较两个枚举对象   int</li>\n<li>toString()      由于这个方法没有final修饰  可以覆盖(重写)</li>\n</ul>\n</li>\n<li>switch内部判断枚举的应用</li>\n<li>我们也可以在enum中描述自己的一些属性或方法<ul>\n<li>必须在enum类中第一行 描述一下枚举的样子 最后需要分号结束;</li>\n<li>可以定义自己的属性</li>\n<li>类创建的过程中  帮我们创建枚举类型的对象</li>\n<li>需要给枚举类型提供对应样子的构造方法  构造方法只能private修饰  可以重载</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Day&#123;</span><br><span class=\"line\">    <span class=\"comment\">//描述了七个当前类的对象</span></span><br><span class=\"line\">    monday(<span class=\"string\">\"星期一\"</span>,<span class=\"number\">1</span>),tuesday(<span class=\"string\">\"星期二\"</span>,<span class=\"number\">2</span>),wednesday,thursday,friday,saturday,sunday;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Day</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Day</span><span class=\"params\">(String  name,<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index=index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id21\"><span></span></span></p>\n<h3 id=\"21-内存机制问题\"><a href=\"#21-内存机制问题\" class=\"headerlink\" title=\"21. 内存机制问题\"></a>21. 内存机制问题</h3><ul>\n<li>类创建在哪儿   对象创建在哪里   继承关系   静态成员   方法执行</li>\n<li>栈内存—&gt;Person p = new Person();—-&gt;堆内存    方法区—类模板<ul>\n<li>栈内存—-变量空间,方法临时执行空间（从创建开始执行完毕,<strong>立即回收</strong>）</li>\n<li>堆内存—-new申请对象空间（<strong>垃圾回收器GC</strong>,对象空间没有任何引用指向视为垃圾）</li>\n<li>方法区—-常量  类模板  静态成员（有且只有一份,<strong>不回收</strong>）</li>\n</ul>\n</li>\n<li>Runtime类(是单例模式)之中提供了几个管理内存的方法<ul>\n<li>maxMemory</li>\n<li>totalMemory</li>\n<li>freeMemory</li>\n<li>栈内存溢出错误StackOverflowError </li>\n<li>堆内存溢出错误OutOfMemoryError</li>\n</ul>\n</li>\n<li>Object类中有一个finalize方法  如果重写也能看见对象回收的效果</li>\n<li>GC系统提供的一个线程    回收算法</li>\n</ul>\n<p><a href=\"#\">回到顶部😼</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二、Java面向对象\"><a href=\"#二、Java面向对象\" class=\"headerlink\" title=\"二、Java面向对象\"></a>二、Java面向对象</h2><ol>\n<li><a href=\"#id1\">类与对象</a></li>\n<li><a href=\"#id2\">构造方法和方法重载</a></li>\n<li><a href=\"#id3\">this关键字</a></li>\n<li><a href=\"#id4\">方法的传递和递归</a></li>\n<li><a href=\"#id5\">封装</a></li>\n<li><a href=\"#id6\">static关键字</a></li>\n<li><a href=\"#id7\">单例设计模式</a></li>\n<li><a href=\"#id8\">继承（extends）</a></li>\n<li><a href=\"#id9\">方法的重写（Override）</a></li>\n<li><a href=\"#id10\">访问控制</a></li>\n<li><a href=\"#id11\">包（Package）</a></li>\n<li><a href=\"#id12\">final关键字</a></li>\n<li><a href=\"#id13\">对象的创建过程</a></li>\n<li><a href=\"#id14\">多态</a></li>\n<li><a href=\"#id15\">抽象类</a></li>\n<li><a href=\"#id16\">接口</a></li>\n<li><a href=\"#id17\">内部类</a></li>\n<li><a href=\"#id18\">回调模式</a></li>\n<li><a href=\"#id19\">抽象方法的笔试考点</a></li>\n<li><a href=\"#id20\">枚举类（enum）</a></li>\n<li><a href=\"#id21\">内存机制问题</a></li>\n</ol>\n<p><span id=\"id1\"><span></span></span></p>\n<h3 id=\"1-类与对象\"><a href=\"#1-类与对象\" class=\"headerlink\" title=\"1. 类与对象\"></a>1. 类与对象</h3><h4 id=\"1-1-类的定义\"><a href=\"#1-1-类的定义\" class=\"headerlink\" title=\"1.1 类的定义\"></a>1.1 类的定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;类体&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>类名由多个单词组成时，要求每个单词首字母大写</p>\n</blockquote>\n<h4 id=\"1-2-成员变量的定义\"><a href=\"#1-2-成员变量的定义\" class=\"headerlink\" title=\"1.2 成员变量的定义\"></a>1.2 成员变量的定义</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123; 数据类型 成员变量名=初始值; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>成员变量名由多个单词组成时，要求第二个起每个单词首字母大写</p>\n</blockquote>\n<h4 id=\"1-3-对象的创建\"><a href=\"#1-3-对象的创建\" class=\"headerlink\" title=\"1.3 对象的创建\"></a>1.3 对象的创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 类名();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当一个类定义完毕后使用new关键字创建/构造该类的对象的过程叫做类的实例化。</p>\n</blockquote>\n<h4 id=\"1-4-引用\"><a href=\"#1-4-引用\" class=\"headerlink\" title=\"1.4 引用\"></a>1.4 引用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 引用变量名;</span><br><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person(); <span class=\"comment\">//声明person类型的引用p指向Person类型对象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用变量名.成员变量名;</span><br><span class=\"line\">p.name = <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;- 在JAVA中，使用引用数据类型声明的变量叫做引用变量，简称‘引用’。</span><br><span class=\"line\">&gt;- 使用引用可以记录对象在堆区中存放的内存地址信息，便于下次访问。</span><br><span class=\"line\"></span><br><span class=\"line\">- 除八种基本类型之外，用类名（接口，数组）声明的变量称为引用类型变量，引用类型变量存的某个对象的地址信息，引用的功能在于访问对象。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.5 成员方法</span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</span><br><span class=\"line\">\t返回值类型 成员方法名(形参列表)&#123;方法体;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回值类型：可以是基本数据类型，也可以是引用，当方法不需要返回数据用void</li>\n<li>形参列表：数据类型 形参1, 数据类型 形参2, …</li>\n</ul>\n<p><span id=\"id2\"><span></span></span></p>\n<h3 id=\"2-构造方法和方法重载\"><a href=\"#2-构造方法和方法重载\" class=\"headerlink\" title=\"2. 构造方法和方法重载\"></a>2. 构造方法和方法重载</h3><h4 id=\"2-1-构造方法\"><a href=\"#2-1-构造方法\" class=\"headerlink\" title=\"2.1 构造方法\"></a>2.1 构造方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123; 构造方法名(形参列表)&#123;构造方法体;&#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构造方法名与类名相同且没有返回值</li>\n<li>当使用new关键字构造对象时，会自动调用构造方法，实现成员变量的初始化工作。</li>\n</ul>\n<h4 id=\"2-2-默认构造方法\"><a href=\"#2-2-默认构造方法\" class=\"headerlink\" title=\"2.2 默认构造方法\"></a>2.2 默认构造方法</h4><ul>\n<li>当一个类中没有没有自定义任何构造方法时，编译器会提供一个无参的空构造方法，叫做默认/缺省构造方法。</li>\n<li>若类中出现自定义构造方法，则编译器不再提供构造方法。</li>\n</ul>\n<h4 id=\"2-3-方法重载（overload）\"><a href=\"#2-3-方法重载（overload）\" class=\"headerlink\" title=\"2.3 方法重载（overload）\"></a>2.3 方法重载（overload）</h4><p>在Java中，方法名相同，参数列表不同的方法构成重载关系。</p>\n<ul>\n<li>体现形式：参数个数，参数顺序，参数类型。（与形参变量名和返回值无关，但最好返回值类型相同）</li>\n<li>实际意义：调用者只需要记住一个方法名就可以不同的版本，从而实现不同的效果。</li>\n</ul>\n<p><span id=\"id3\"><span></span></span></p>\n<h3 id=\"3-this关键字\"><a href=\"#3-this关键字\" class=\"headerlink\" title=\"3. this关键字\"></a>3. this关键字</h3><p>在构造方法中出现this时,this代表当前正在构造的对象；在成员方法中出现this,this代表当前正在调用的对象。</p>\n<ul>\n<li>使用方式：<ol>\n<li>当形参变量和成员变量同名时，在方法体中优先使用形参变量，若希望使用成员变量，则需要加上this，即this.变量名</li>\n<li>在构造方法的的第一行，可以调用本类中的其他构造方法。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id4\"><span></span></span></p>\n<h3 id=\"4-方法的传递和递归\"><a href=\"#4-方法的传递和递归\" class=\"headerlink\" title=\"4. 方法的传递和递归\"></a>4. 方法的传递和递归</h3><h4 id=\"4-1-传参\"><a href=\"#4-1-传参\" class=\"headerlink\" title=\"4.1 传参\"></a>4.1 传参</h4><ul>\n<li>基本数据类型变量作为参数传递时，型参数值改变不会影响实参变量的数值。</li>\n<li>引用类型变量作为参数传递时，形参指向内容的改变会影响实参变量指向的内容。</li>\n<li>引用数据类型变量作为参数传递时，形参改变指向后再改变指向内容不会影响实参指向的内容。</li>\n</ul>\n<h4 id=\"4-2-递归的调用\"><a href=\"#4-2-递归的调用\" class=\"headerlink\" title=\"4.2 递归的调用\"></a>4.2 递归的调用</h4><ul>\n<li>递归是指方法体内部调用自身</li>\n<li>必须有递归的规律和退出条件</li>\n<li>使用递归必须使得问题简单化而不是复杂化</li>\n<li>若递归影响到程序的执行性能时，则用递推取代之</li>\n</ul>\n<p><span id=\"id5\"><span></span></span></p>\n<h3 id=\"5-封装\"><a href=\"#5-封装\" class=\"headerlink\" title=\"5. 封装\"></a>5. 封装</h3><p>面向对象的三大特征：封装，继承，多态。</p>\n<ul>\n<li>封装基本概念：封装就是对成员变量的数值进行密封包装处理以及合理性判断</li>\n<li>封装基本流程：<ol>\n<li>私有化成员变量(private)</li>\n<li>提供公有的get、set方法，并在set方法体中进行合理性判断</li>\n<li>在构方法中调用set方法进行合理值的判断</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id6\"><span></span></span></p>\n<h3 id=\"6-static关键字\"><a href=\"#6-static关键字\" class=\"headerlink\" title=\"6. static关键字\"></a>6. static关键字</h3><p>基本概念：通常情况下成员变量隶属于对象层级，也就是每创建一个对象就会申请一块独立的内存空间来存储就会造成内存空间的浪费。</p>\n<blockquote>\n<p>为了解决上诉问题，Java中使用static关键字修饰该成员变量表达静态的含义，此时成员变量提升到类层级，所有对象共享，随着类的加载准备就绪，与对象创建再无关。</p>\n</blockquote>\n<ul>\n<li>static可以修饰：修饰属性 修饰方法 修饰块 修饰类(内部类)</li>\n<li>特点<ul>\n<li>静态元素在类加载时就初始化，此时还没创建对象，可以通过类名直接访问</li>\n<li>静态元素存储在静态元素区，每个类有一个自己的区域，与别的类不冲突</li>\n<li>静态元素只加载一次，全部类对象及类本身共享</li>\n<li>静态元素区Carbage Collection无法管理，可以粗暴理解为常驻内存</li>\n<li>非静态成员和静态成员都可以访问静态成员</li>\n<li>静态成员不可以访问非静态成员</li>\n<li>静态元素中不可出现this或super关键字，静态元素属于类的</li>\n</ul>\n</li>\n</ul>\n<p><span id=\"id7\"><span></span></span></p>\n<h3 id=\"7-单例设计模式\"><a href=\"#7-单例设计模式\" class=\"headerlink\" title=\"7. 单例设计模式\"></a>7. 单例设计模式</h3><p>基本概念：当一个类有且只能对外提供一个对象时，这样的类就叫作单例类，而设计单例类的思想和模式，叫做单例设计模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编程实现Singleton类的封装</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton sin = <span class=\"keyword\">new</span> Singleton();<span class=\"comment\">//2.提供本类的引用指向本类的对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">//1.私有化构造方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//3.提供公有的get方法将上述成员变量的数值返回出去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sin;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现流程：<ol>\n<li>私有化构造方法（private）</li>\n<li>提供本类类型的引用指向本类类型对象（private static）</li>\n<li>提供公有的get方法将上述对象return出去（public static）</li>\n<li>实现方式：饿汉式和懒汉式，开发中推荐饿汉式。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id8\"><span></span></span></p>\n<h3 id=\"8-继承（extends）\"><a href=\"#8-继承（extends）\" class=\"headerlink\" title=\"8. 继承（extends）\"></a>8. 继承（extends）</h3><ul>\n<li>继承就是子类复用父类的代码，关键字extends表示类和类的继承关系</li>\n<li>使用继承可以提高代码复用性、扩展性、以及可维护性。<ol>\n<li>子类不能继承父类的构造方法和私有方法，私有成员变量可以继承但不能直接使用。</li>\n<li>无论使用何种方式构造方式构造子类的对象都会自动调用父类的无参构造方法来初始化从父类中继承下来的成员变量，相当于在构造方法的第一行增加super()的效果。</li>\n<li>使用继承必须满足逻辑关系：子类 is a 父类，不能滥用继承。</li>\n<li>在Java中只能支持单继承，也就是一个一个子类只能有一个父类，但一个父类可以有多个子类。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cricle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r;</span><br><span class=\"line\">\tCricle()&#123;&#125;   <span class=\"comment\">//编译器会加入无参的调用 super()。</span></span><br><span class=\"line\">\tCricle(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);  <span class=\"comment\">//通过super关键字调用父类的构造方法。</span></span><br><span class=\"line\">\t\tsetR(r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setR</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id9\"><span></span></span></p>\n<h3 id=\"9-方法的重写（Override）\"><a href=\"#9-方法的重写（Override）\" class=\"headerlink\" title=\"9. 方法的重写（Override）\"></a>9. 方法的重写（Override）</h3><p>概念：从父类继承下来的方法不满足子类的需求时，就需要子类中重新写一个和父类一样的方法，覆盖从父类中继承下来的版本，该方法就叫方法的重写。<br><br>原则：</p>\n<ol>\n<li>要求方法名相同，参数列表相同，返回值类型相同；jdk1.5开始返回子类类型。</li>\n<li>要求访问权限不能变小，可以相同或变大</li>\n<li>重写的方法不能抛出更大的异常</li>\n</ol>\n<p><span id=\"id10\"><span></span></span></p>\n<h3 id=\"10-访问控制\"><a href=\"#10-访问控制\" class=\"headerlink\" title=\"10. 访问控制\"></a>10. 访问控制</h3><ul>\n<li>public修饰的内容可以在任意位置使用，private修饰的内容只能在本类中使用，</li>\n<li>通常情况下，成员变量都使用private修饰，成员方法都使用pubic修饰</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>访问控制符</th>\n<th align=\"center\">访问权限</th>\n<th align=\"right\">本类内部</th>\n<th align=\"right\">本类中的包</th>\n<th align=\"right\">子类</th>\n<th align=\"right\">其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td align=\"center\">共有的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n</tr>\n<tr>\n<td>protected</td>\n<td align=\"center\">保护的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n</tr>\n<tr>\n<td>不写</td>\n<td align=\"center\">默认的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n</tr>\n<tr>\n<td>private</td>\n<td align=\"center\">私有的</td>\n<td align=\"right\">Y</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n<td align=\"right\">N</td>\n</tr>\n</tbody></table>\n<p><span id=\"id11\"><span></span></span></p>\n<h3 id=\"11-包（Package）\"><a href=\"#11-包（Package）\" class=\"headerlink\" title=\"11. 包（Package）\"></a>11. 包（Package）</h3><p>为了解决命名冲突问题，便于文件的管理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名；</span><br><span class=\"line\"><span class=\"keyword\">package</span> 包名<span class=\"number\">1</span>.包名<span class=\"number\">2</span>.包名<span class=\"number\">3</span>...包名n;</span><br><span class=\"line\"><span class=\"comment\">/* 指定包名时应按照一定的规范，eg: 公司域名反写.项目名称.模块名称.类名 */</span></span><br><span class=\"line\">org.apache.commons.lang.StringUtil;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id12\"><span></span></span></p>\n<h3 id=\"12-final关键字\"><a href=\"#12-final关键字\" class=\"headerlink\" title=\"12. final关键字\"></a>12. final关键字</h3><ol>\n<li>final关键字修饰<strong>类</strong>体现该类<strong>不能被继承</strong>（防止滥用继承）。</li>\n<li>final关键字修饰<strong>方法</strong>体现在该方法<strong>不能被重新，但可以被继承</strong>（防止不经意间造成的方法重写）。</li>\n<li>final关键字修饰<strong>成员变量</strong>体现在改成员变量<strong>必须初始化且不能更改</strong>（防止不经意间造成的数据更改）。</li>\n</ol>\n<blockquote>\n<p>扩展：在开发中很少单独使用static或者final单独修饰成员变量，而是使用<strong><code>public static final</code></strong>共同修饰成员变量来表达常量的含义，而常量的命名规范是：所有字母大写，不同单词之间下划线连接。</p>\n</blockquote>\n<p><span id=\"id13\"><span></span></span></p>\n<h3 id=\"13-对象的创建过程\"><a href=\"#13-对象的创建过程\" class=\"headerlink\" title=\"13. 对象的创建过程\"></a>13. 对象的创建过程</h3><ul>\n<li>单个对象的创建过程<ol>\n<li>main方法是程序的入口，若创建对象时没有指定初始值则采用默认初始化方式处理；</li>\n<li>若声明成员变量时进行了显示初始化操作，则最终采用显示初始化的初始值处理；</li>\n<li>执行构造块中的代码可以对成员变量进行赋值；</li>\n<li>执行构造方法体中的代码可以对成员变量进行再次赋值；</li>\n<li>此时对象构造完毕，继续向下执行后续的代码；</li>\n</ol>\n</li>\n<li>子类对象的创建过程<ol>\n<li>main方法是程序的入口，先加载父类的的代码再加载子类的代码；</li>\n<li>先执行父类静态代码块，再执行子类的静态代码块；</li>\n<li>先执行父类的构造块，再执行父类的构造方法体，此时包含的父类对象构造完毕；</li>\n<li>先执行子类的构造块，再执行子类的构造方法体，此时子类对象构造完毕，继续向下执行后续代码。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id14\"><span></span></span></p>\n<h3 id=\"14-多态\"><a href=\"#14-多态\" class=\"headerlink\" title=\"14. 多态\"></a>14. 多态</h3><ol>\n<li>语法：父类的引用指向子类的对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类类型 引用变量名 = <span class=\"keyword\">new</span> 子类类型();</span><br><span class=\"line\">Person pw = <span class=\"keyword\">new</span> Worker();</span><br><span class=\"line\">pw.show();<span class=\"comment\">//再编译阶段调用Person的show()方法，在运行阶段调用Worker的show()方法。</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>多态的效果：<ol>\n<li>父类的引用<strong>可以</strong>直接调用<strong>父类独有</strong>的方法。</li>\n<li>父类的引用<strong>不可以</strong>直接调用<strong>子类独有</strong>的方法。</li>\n<li>对于父类子类都有的<strong>非静态方法</strong>来说，编译阶段调用父类的，运行阶段调用子类重写后的。</li>\n<li>对于父类子类都有的<strong>静态方法</strong>来说，只调用父类的。</li>\n</ol>\n</li>\n<li>多态的实际意义：屏蔽不同子类的差异性实现通用的编程，从而带来不同的结果。</li>\n<li>多态的表现形式<ol>\n<li>多态的前提要有继承的关系</li>\n<li>使用父类引用指向子类对象 Person p = new Teacher();//向上转型</li>\n<li>该引用只能调用父类中定义的属性/方法</li>\n<li>执行结果，如果调用属性:执行父类的，如果调用方法:看子类是否重写</li>\n<li>若想要调用子类独有的成员，将身份还原回去(向下转型/造型)，若需要转换的类型与真实对象类型不匹配，会产生一个运行时异常ClassCastException</li>\n</ol>\n</li>\n<li>引用数据类型之间的转换<ul>\n<li>转换必须发生在父子类之间，否则编译报错。</li>\n<li>自动类型转换：小到大，子类型向父类型的转换，eg:<code>Person pw = new Worker();</code>。</li>\n<li>强制类型转换：大到小，父类型向子类型转换，eg:<code>((Worker) pw).getSalary();//将父类引用强制转换子类型调用子类方法</code>。</li>\n</ul>\n</li>\n<li>为了避免类型转换异常，对象进行强制类型转换时应该用instanceof判断引用变量真正指向的对象是否是要转换的目标类型。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*语法格式：*/</span> 对象 <span class=\"keyword\">instanceof</span> 类型  <span class=\"comment\">//返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(pw <span class=\"keyword\">instanceof</span> Teacher)&#123;</span><br><span class=\"line\">\tTeacher t = (Teacher) pw;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"转换会有异常\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>多态的使用场合：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过方法的参数传递形成多态。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Shape s)</span></span>&#123;&#125;</span><br><span class=\"line\">TestShape.draw(<span class=\"keyword\">new</span> Rect(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在方法体中直接使用多态的语法格式。</span></span><br><span class=\"line\">TestAbstrat ta = <span class=\"keyword\">new</span> SubTestAbstract();</span><br><span class=\"line\">ta.show();</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id15\"><span></span></span></p>\n<h3 id=\"15-抽象类\"><a href=\"#15-抽象类\" class=\"headerlink\" title=\"15. 抽象类\"></a>15. 抽象类</h3><ol>\n<li>基本概念<ul>\n<li>用<strong>abstract</strong>关键字修饰的类称为抽象类。</li>\n<li>抽象类不能实例化，抽象类的意义在于被继承。</li>\n<li>抽象类为其子类“抽象”出了公共部分，通常也定义了子类所必须具体实现的抽象方法。</li>\n<li>抽象方法：指不能具体实现的方法，没有方法体并使用abstract修饰。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123; <span class=\"comment\">//一个类若定义了抽象方法，则必须以abstract关键字声明为抽象类</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;<span class=\"comment\">//用abstract修饰的方法，称之为抽象方法，没有方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>注意：<ol>\n<li>抽象类中可以有成员变量，成员方法，以及构造方法。</li>\n<li>抽象类中可以没有抽象方法，也可以有抽象方法。</li>\n<li>具有抽象方法的类必须是抽象类，因此其真正意义的抽象类应该是有抽象方法，并且使用abstract修饰。</li>\n<li>子类必须实现抽象方法（不同子类可能有不同实现），否则改子类也变抽象。</li>\n<li>抽象类对子类具有强制性和规范性，因此叫做模板设计模式。</li>\n<li>推荐使用多态的语法格式实现抽象类，若需要更换子类时，该方法中只需要将new关键字后面的类型名称修改而其他位置无需改变就可以立即生效，从而提高了代码的维护性和扩展性。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>多态实现抽象类的缺点：若希望调用子类独有的方法时，则需要强制类型转换。</p>\n</blockquote>\n<p><span id=\"id16\"><span></span></span></p>\n<h3 id=\"16-接口\"><a href=\"#16-接口\" class=\"headerlink\" title=\"16. 接口\"></a>16. 接口</h3><ol>\n<li>基本概念：接口可以看成是特殊的抽象类。即只包含抽象方法的抽象类。通过<strong>interface</strong>关键字定义。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runner</span> </span>&#123; <span class=\"comment\">//-通过interface关键字定义接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SEF_SPEED=<span class=\"number\">100</span>;<span class=\"comment\">//-接口中不能定义成员变量，只能定义常量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;<span class=\"comment\">//-接口中只可以定义没有实现的方法（可以省略public abstract）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一个类可以通过<strong>implements</strong>关键字实现接口，一个类可以实现多个接口，并且该类需要实现这些接口中定义的所有方法。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">American</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runner</span>,... </span>&#123; <span class=\"comment\">//与继承不同，可以实现多个接口</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//该类需要实现接口中定义的所有方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"run...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tRunner ra = <span class=\"keyword\">new</span> American();<span class=\"comment\">//接口作为一种类型声明，并且声明的变量可以引用实现类的对象</span></span><br><span class=\"line\">\t\tra.run();<span class=\"comment\">//通过该变量可以调用该接口定义的方法</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>一个接口可以通过extends关键字继承另一个接口，子接口继承了父接口所有的方法。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Hunter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runner</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>类与接口的关系<ul>\n<li>类和类使用<code>extends</code>继承，仅支持<strong>单继承</strong>。</li>\n<li>接口和接口使用<code>extends</code>继承，支持多继承。</li>\n<li>类使用<code>implements</code>实现接口，支持<strong>多实现</strong>。</li>\n</ul>\n</li>\n<li>抽象类与接口的关系（笔试题）<ol>\n<li>定义抽象类:<code>abstract class</code>，而定义接口:<code>interface</code>；</li>\n<li>类继承抽象类:<code>extends</code>单继承，而类实现接口:<code>implements</code>多实现；</li>\n<li>抽象类可以<code>有</code>构造方法，而接口<code>不能有</code>构造方法；</li>\n<li>抽象类可以有<code>成员变量</code>，而接口只能有<code>常量</code>；</li>\n<li>抽象类可以有<code>成员方法</code>，而接口只能有<code>抽象方法</code>；</li>\n<li>抽象类中增加方法子类可以<code>不用重写</code>，而接口中增加方法子类<code>必须重写</code>；</li>\n<li>从jdk1.8开始允许接口中有非抽象方法，但需要<code>default</code>关键字修饰。</li>\n</ol>\n</li>\n</ol>\n<p><span id=\"id17\"><span></span></span></p>\n<h3 id=\"17-内部类\"><a href=\"#17-内部类\" class=\"headerlink\" title=\"17. 内部类\"></a>17. 内部类</h3><ul>\n<li>内部类指的是在Java中可以将一个类定义在另一个类定义在另一个类的内部</li>\n<li>内部类定义在 类的内部 ，与类成员层次一致</li>\n<li>内部类定义在 方法/块内部（与类成员相差一个层次，方法的局部变量一个层次）<ul>\n<li>成员内部类：将一个类直接定义在类的里面，作为成员，与属性或方法层次一致</li>\n<li>局部内部类：将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次</li>\n<li>匿名内部类：成员匿名内部类，局部匿名内部类</li>\n<li>静态内部类：成员静态内部类</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"17-1-成员内部类\"><a href=\"#17-1-成员内部类\" class=\"headerlink\" title=\"17.1 *成员内部类\"></a>17.1 *成员内部类</h4><ul>\n<li>将一个类直接定义在类的里面，作为成员，与属性或方法层次一致</li>\n<li>成员内部类可以与正常类一样 使用不同的修饰符来修饰</li>\n<li>好处1.省略了一个.java文件  好处2.成员内部类中可以访问外部类的所有成员 包括私有的</li>\n<li>若想要在内部类中通过对象.调用外部类成员   外部类.this.外部类成员;</li>\n<li>内部类存在后 源代码进行编译 产生一个字节码  Demo$InnerDemo.class</li>\n</ul>\n<h4 id=\"17-2-局部内部类\"><a href=\"#17-2-局部内部类\" class=\"headerlink\" title=\"17.2 局部内部类\"></a>17.2 局部内部类</h4><ul>\n<li>将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次</li>\n<li>局部内部类像是一个局部的变量一样，不能用public protected private及static</li>\n<li>只能用abstract或final</li>\n<li>局部内部类命名规则Demo$1InnerTestMethod   Demo$2InnerTestMethod</li>\n<li>局部内部类使用的变量只能是final修饰</li>\n</ul>\n<h4 id=\"17-3-匿名内部类\"><a href=\"#17-3-匿名内部类\" class=\"headerlink\" title=\"17.3 *匿名内部类\"></a>17.3 *匿名内部类</h4><p>将类直接定义在类中 或者类成员中     成员匿名内部类   局部匿名内部类<br><br>匿名内部类没有类的所有结构(名字 修饰符) 只有类体<br><br>通常会在抽象类或接口创建的后面使用，当然具体的类也可以有匿名子类<br><br>匿名类内部没有构造方法，也不能用任何修饰符来修饰</p>\n<ul>\n<li>当接口类型的引用作为方法的形参时，实参的传递方式有两种：<ol>\n<li>自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递。</li>\n<li>直接使用匿名内部类的语法格式得到接口类型的引用，再作为实参传递。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-方式1：自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubA</span> <span class=\"keyword\">implements</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"这里自定义类实现接口并重写抽象方法！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ATest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//ATest.test(new A());//报错，A是接口，不能new对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//-方式1：接口实现类的对象作为实参传递</span></span><br><span class=\"line\">\t\tATest.test(<span class=\"keyword\">new</span> ASub());<span class=\"comment\">//接口类型引用指向实现类的对象，形成了多态。</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//-方式2：匿名内部类</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 接口/父类类型 引用变量名 = new 接口/父类类型() &#123;方法的重写&#125;;</span></span><br><span class=\"line\">\t\tA ta = <span class=\"keyword\">new</span> A() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"这里是匿名内部类\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tATest.test(ta);<span class=\"comment\">//得到接口类型的引用，再作为实参传递</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>匿名内部类定义：如果在一段程序需要创建一个类的对象（通常这个类需要实现某个接口或继承某个类），而且对象创建后这个类的价值就不存在了，这个类不必命名，称之为匿名内部类。</li>\n<li>语法格式：<code>接口/父类类型 引用变量名 = new 接口/父类类型() {匿名类类体，这里重写方法};</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SuperType obj = <span class=\"keyword\">new</span> SuperType(...)&#123; ... &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"17-4-静态内部类\"><a href=\"#17-4-静态内部类\" class=\"headerlink\" title=\"17.4 静态内部类\"></a>17.4 静态内部类</h4><ul>\n<li>成员静态内部类</li>\n<li>不需要外部类对象，通过正常的方式直接创建内部类</li>\n<li>静态元素不能访问非静态成员(自己类和外部类)</li>\n</ul>\n<p><span id=\"id18\"><span></span></span></p>\n<h3 id=\"18-回调模式\"><a href=\"#18-回调模式\" class=\"headerlink\" title=\"18. 回调模式\"></a>18. 回调模式</h3><p>回调模式是指：如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递一个实现此接口的对象；而该方法在运行时会调用到参数对象中所实现的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//repeat方法需要一个Action接口类型参数，让其doSth方法重复执行n次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">repeat</span><span class=\"params\">(<span class=\"keyword\">int</span> n, Action ac)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)&#123; ac.doSth();&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此处的语义可解释为：通过接口回调传递了一个方法给repeat,让repeat将其执行5次。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\trepeat(<span class=\"number\">5</span>, <span class=\"keyword\">new</span> Action()&#123;<span class=\"comment\">//通过匿名内部类传递参数</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id19\"><span></span></span></p>\n<h3 id=\"19-抽象方法的笔试考点\"><a href=\"#19-抽象方法的笔试考点\" class=\"headerlink\" title=\"19. 抽象方法的笔试考点\"></a>19. 抽象方法的笔试考点</h3><ul>\n<li><code>abstract</code>与哪些关键字不能共存：<ol>\n<li><code>final</code>关键字；因为final关键字修饰的类不能被继承，方法不能被重写，而abstract关键字修饰的类继承后，该类的方法需要重写，相互冲突。</li>\n<li><code>static</code>关键字；因为static能被实例化可直接调用，而abstract不能被实例化，相互冲突。</li>\n<li><code>private</code>关键字；因为private修饰的私有方法不能被继承，就不能重写，而<code>abstract</code>方法需要重写。</li>\n</ol>\n</li>\n</ul>\n<p><span id=\"id20\"><span></span></span></p>\n<h3 id=\"20-枚举类（enum）\"><a href=\"#20-枚举类（enum）\" class=\"headerlink\" title=\"20. 枚举类（enum）\"></a>20. 枚举类（enum）</h3><ul>\n<li>一个类中的对象 认为个数是有限且固定的 可以将每一个对象一一列举出来</li>\n<li>创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum&lt;E extends Enum<e>&gt;，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。</e></li>\n<li>我们自己定义的每一个enum类型 都会默认继承Enum 间接继承Object</li>\n<li>Enum类型，有两个属性<ul>\n<li>name—–&gt;枚举对象的名字，name()获取name属性</li>\n<li>ordinal—&gt;枚举对象在类中罗列的顺序  类似index  也从0开始   ordinal()获取序号</li>\n</ul>\n</li>\n<li>一些常用的方法<ul>\n<li>valueOf()   通过给定的name获取对应的枚举对象</li>\n<li>values()     获取全部的枚举对象  —&gt; 返回一个数组  Day[]</li>\n<li>compareTo()   可以比较两个枚举对象   int</li>\n<li>toString()      由于这个方法没有final修饰  可以覆盖(重写)</li>\n</ul>\n</li>\n<li>switch内部判断枚举的应用</li>\n<li>我们也可以在enum中描述自己的一些属性或方法<ul>\n<li>必须在enum类中第一行 描述一下枚举的样子 最后需要分号结束;</li>\n<li>可以定义自己的属性</li>\n<li>类创建的过程中  帮我们创建枚举类型的对象</li>\n<li>需要给枚举类型提供对应样子的构造方法  构造方法只能private修饰  可以重载</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Day&#123;</span><br><span class=\"line\">    <span class=\"comment\">//描述了七个当前类的对象</span></span><br><span class=\"line\">    monday(<span class=\"string\">\"星期一\"</span>,<span class=\"number\">1</span>),tuesday(<span class=\"string\">\"星期二\"</span>,<span class=\"number\">2</span>),wednesday,thursday,friday,saturday,sunday;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Day</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Day</span><span class=\"params\">(String  name,<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index=index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span id=\"id21\"><span></span></span></p>\n<h3 id=\"21-内存机制问题\"><a href=\"#21-内存机制问题\" class=\"headerlink\" title=\"21. 内存机制问题\"></a>21. 内存机制问题</h3><ul>\n<li>类创建在哪儿   对象创建在哪里   继承关系   静态成员   方法执行</li>\n<li>栈内存—&gt;Person p = new Person();—-&gt;堆内存    方法区—类模板<ul>\n<li>栈内存—-变量空间,方法临时执行空间（从创建开始执行完毕,<strong>立即回收</strong>）</li>\n<li>堆内存—-new申请对象空间（<strong>垃圾回收器GC</strong>,对象空间没有任何引用指向视为垃圾）</li>\n<li>方法区—-常量  类模板  静态成员（有且只有一份,<strong>不回收</strong>）</li>\n</ul>\n</li>\n<li>Runtime类(是单例模式)之中提供了几个管理内存的方法<ul>\n<li>maxMemory</li>\n<li>totalMemory</li>\n<li>freeMemory</li>\n<li>栈内存溢出错误StackOverflowError </li>\n<li>堆内存溢出错误OutOfMemoryError</li>\n</ul>\n</li>\n<li>Object类中有一个finalize方法  如果重写也能看见对象回收的效果</li>\n<li>GC系统提供的一个线程    回收算法</li>\n</ul>\n<p><a href=\"#\">回到顶部😼</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxsvop1c0000jst3i29u1kga","category_id":"cjxsvop1u0003jst33wki1w8u","_id":"cjxsvop2b000cjst3jfwut33e"},{"post_id":"cjxsvop240007jst3fv7dsvld","category_id":"cjxsvop1u0003jst33wki1w8u","_id":"cjxsvop2g000fjst34nl8kum2"},{"post_id":"cjxsvop1r0002jst3iwh44vpx","category_id":"cjxsvop250008jst3x6s89r7j","_id":"cjxsvop2h000ijst3602nnjks"},{"post_id":"cjxsvop1z0005jst3acoz99x4","category_id":"cjxsvop1u0003jst33wki1w8u","_id":"cjxsvop2j000mjst38thdqa63"},{"post_id":"cjxsvop220006jst3qkwbq9pf","category_id":"cjxsvop250008jst3x6s89r7j","_id":"cjxsvop2k000pjst31mjeetzv"},{"post_id":"cjxsvop27000bjst34tamh2kp","category_id":"cjxsvop2j000ljst3jpag2t25","_id":"cjxsvop2l000sjst3f3jd1y12"},{"post_id":"cjxsvop5g000xjst379tytwr2","category_id":"cjxsvop1u0003jst33wki1w8u","_id":"cjxsvop5q0012jst335kff201"},{"post_id":"cjxsvop5h000yjst3sibo8srq","category_id":"cjxsvop5q0011jst33uwggoev","_id":"cjxsvop5u0016jst3kqsp3c8o"},{"post_id":"cjxsvop9q0018jst319hbca8p","category_id":"cjxsvop2j000ljst3jpag2t25","_id":"cjxsvop9w001bjst3nxxvtxub"}],"PostTag":[{"post_id":"cjxsvop1c0000jst3i29u1kga","tag_id":"cjxsvop1x0004jst3m41ffrwk","_id":"cjxsvop27000ajst3evtygcme"},{"post_id":"cjxsvop1r0002jst3iwh44vpx","tag_id":"cjxsvop260009jst34hpekrrp","_id":"cjxsvop2g000gjst3d5rqb6ek"},{"post_id":"cjxsvop1z0005jst3acoz99x4","tag_id":"cjxsvop1x0004jst3m41ffrwk","_id":"cjxsvop2i000kjst31vopk6w0"},{"post_id":"cjxsvop220006jst3qkwbq9pf","tag_id":"cjxsvop2h000jjst301niekf3","_id":"cjxsvop2k000ojst30f52w3mg"},{"post_id":"cjxsvop240007jst3fv7dsvld","tag_id":"cjxsvop2j000njst3xw8679ng","_id":"cjxsvop2l000rjst3zrn6gh5o"},{"post_id":"cjxsvop240007jst3fv7dsvld","tag_id":"cjxsvop1x0004jst3m41ffrwk","_id":"cjxsvop2m000tjst3eckr9nmn"},{"post_id":"cjxsvop27000bjst34tamh2kp","tag_id":"cjxsvop2k000qjst3ukm7zqvr","_id":"cjxsvop2o000vjst3278ihx0g"},{"post_id":"cjxsvop27000bjst34tamh2kp","tag_id":"cjxsvop2m000ujst3n9dl1jg3","_id":"cjxsvop2o000wjst36ohud0je"},{"post_id":"cjxsvop5g000xjst379tytwr2","tag_id":"cjxsvop1x0004jst3m41ffrwk","_id":"cjxsvop5s0014jst39hrwxguq"},{"post_id":"cjxsvop5g000xjst379tytwr2","tag_id":"cjxsvop5k000zjst3bcpgwlmh","_id":"cjxsvop5t0015jst333frdl8z"},{"post_id":"cjxsvop5h000yjst3sibo8srq","tag_id":"cjxsvop5r0013jst31py66nqv","_id":"cjxsvop5u0017jst39gcoh39u"},{"post_id":"cjxsvop9q0018jst319hbca8p","tag_id":"cjxsvop2k000qjst3ukm7zqvr","_id":"cjxsvop9v0019jst3kt9wq126"},{"post_id":"cjxsvop9q0018jst319hbca8p","tag_id":"cjxsvop2m000ujst3n9dl1jg3","_id":"cjxsvop9v001ajst37yp9pb59"}],"Tag":[{"name":"hexo","_id":"cjxsvop1x0004jst3m41ffrwk"},{"name":"bower","_id":"cjxsvop260009jst34hpekrrp"},{"name":"sublime","_id":"cjxsvop2h000jjst301niekf3"},{"name":"javascript","_id":"cjxsvop2j000njst3xw8679ng"},{"name":"javaSE","_id":"cjxsvop2k000qjst3ukm7zqvr"},{"name":"后端开发","_id":"cjxsvop2m000ujst3n9dl1jg3"},{"name":"BlueLake","_id":"cjxsvop5k000zjst3bcpgwlmh"},{"name":"mongodb","_id":"cjxsvop5r0013jst31py66nqv"}]}}